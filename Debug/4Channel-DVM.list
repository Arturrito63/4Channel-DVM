
4Channel-DVM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002224  08009b00  08009b00  0000ab00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd24  0800bd24  0000d208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bd24  0800bd24  0000cd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd2c  0800bd2c  0000d208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd2c  0800bd2c  0000cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd30  0800bd30  0000cd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800bd34  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000208  0800bf3c  0000d208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800bf3c  0000d7c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f619  00000000  00000000  0000d231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d1  00000000  00000000  0001c84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  0001f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b18  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a29f  00000000  00000000  00020ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ad6  00000000  00000000  0003ae47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092dc6  00000000  00000000  0004c91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df6e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c88  00000000  00000000  000df728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e43b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ae8 	.word	0x08009ae8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08009ae8 	.word	0x08009ae8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80010b4 <MX_ADC1_Init+0xd0>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 8000ffc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001000:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001002:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 8001004:	2200      	movs	r2, #0
 8001006:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001008:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 800100a:	2200      	movs	r2, #0
 800100c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100e:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 8001010:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001014:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800101c:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 800101e:	2204      	movs	r2, #4
 8001020:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001022:	4823      	ldr	r0, [pc, #140]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 8001024:	f003 fcfa 	bl	8004a1c <HAL_ADC_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800102e:	f003 fa5f 	bl	80044f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001036:	2301      	movs	r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800103a:	2303      	movs	r3, #3
 800103c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	481b      	ldr	r0, [pc, #108]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 8001044:	f003 febc 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800104e:	f003 fa4f 	bl	80044f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001052:	2301      	movs	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001056:	2302      	movs	r3, #2
 8001058:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4814      	ldr	r0, [pc, #80]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 8001060:	f003 feae 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800106a:	f003 fa41 	bl	80044f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800106e:	2302      	movs	r3, #2
 8001070:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001072:	2303      	movs	r3, #3
 8001074:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 800107c:	f003 fea0 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001086:	f003 fa33 	bl	80044f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800108a:	2303      	movs	r3, #3
 800108c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800108e:	2304      	movs	r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <MX_ADC1_Init+0xcc>)
 8001098:	f003 fe92 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80010a2:	f003 fa25 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000224 	.word	0x20000224
 80010b4:	40012400 	.word	0x40012400

080010b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <HAL_ADC_MspInit+0xbc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d149      	bne.n	800116c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d8:	4b27      	ldr	r3, [pc, #156]	@ (8001178 <HAL_ADC_MspInit+0xc0>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a26      	ldr	r2, [pc, #152]	@ (8001178 <HAL_ADC_MspInit+0xc0>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <HAL_ADC_MspInit+0xc0>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <HAL_ADC_MspInit+0xc0>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a20      	ldr	r2, [pc, #128]	@ (8001178 <HAL_ADC_MspInit+0xc0>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <HAL_ADC_MspInit+0xc0>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001108:	230f      	movs	r3, #15
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	2303      	movs	r3, #3
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	4819      	ldr	r0, [pc, #100]	@ (800117c <HAL_ADC_MspInit+0xc4>)
 8001118:	f004 fbf6 	bl	8005908 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 800111e:	4a19      	ldr	r2, [pc, #100]	@ (8001184 <HAL_ADC_MspInit+0xcc>)
 8001120:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 8001130:	2280      	movs	r2, #128	@ 0x80
 8001132:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 8001136:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 800113e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 8001146:	2220      	movs	r2, #32
 8001148:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001150:	480b      	ldr	r0, [pc, #44]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 8001152:	f004 f9eb 	bl	800552c <HAL_DMA_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800115c:	f003 f9c8 	bl	80044f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a07      	ldr	r2, [pc, #28]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 8001164:	621a      	str	r2, [r3, #32]
 8001166:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <HAL_ADC_MspInit+0xc8>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40012400 	.word	0x40012400
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800
 8001180:	20000254 	.word	0x20000254
 8001184:	40020008 	.word	0x40020008

08001188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_DMA_Init+0x38>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <MX_DMA_Init+0x38>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_DMA_Init+0x38>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	200b      	movs	r0, #11
 80011ac:	f004 f987 	bl	80054be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011b0:	200b      	movs	r0, #11
 80011b2:	f004 f9a0 	bl	80054f6 <HAL_NVIC_EnableIRQ>

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d8:	4b43      	ldr	r3, [pc, #268]	@ (80012e8 <MX_GPIO_Init+0x124>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a42      	ldr	r2, [pc, #264]	@ (80012e8 <MX_GPIO_Init+0x124>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <MX_GPIO_Init+0x124>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f0:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <MX_GPIO_Init+0x124>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a3c      	ldr	r2, [pc, #240]	@ (80012e8 <MX_GPIO_Init+0x124>)
 80011f6:	f043 0320 	orr.w	r3, r3, #32
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <MX_GPIO_Init+0x124>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <MX_GPIO_Init+0x124>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a36      	ldr	r2, [pc, #216]	@ (80012e8 <MX_GPIO_Init+0x124>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <MX_GPIO_Init+0x124>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <MX_GPIO_Init+0x124>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a30      	ldr	r2, [pc, #192]	@ (80012e8 <MX_GPIO_Init+0x124>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <MX_GPIO_Init+0x124>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800123e:	482b      	ldr	r0, [pc, #172]	@ (80012ec <MX_GPIO_Init+0x128>)
 8001240:	f004 fce6 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_START_GPIO_Port, LED_START_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800124a:	4829      	ldr	r0, [pc, #164]	@ (80012f0 <MX_GPIO_Init+0x12c>)
 800124c:	f004 fce0 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001256:	4826      	ldr	r0, [pc, #152]	@ (80012f0 <MX_GPIO_Init+0x12c>)
 8001258:	f004 fcda 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800125c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001262:	2311      	movs	r3, #17
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2302      	movs	r3, #2
 800126c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4619      	mov	r1, r3
 8001274:	481d      	ldr	r0, [pc, #116]	@ (80012ec <MX_GPIO_Init+0x128>)
 8001276:	f004 fb47 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BOTON_Pin|START_Pin;
 800127a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001280:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <MX_GPIO_Init+0x130>)
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4818      	ldr	r0, [pc, #96]	@ (80012f0 <MX_GPIO_Init+0x12c>)
 8001290:	f004 fb3a 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_START_Pin;
 8001294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800129a:	2311      	movs	r3, #17
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_START_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4619      	mov	r1, r3
 80012ac:	4810      	ldr	r0, [pc, #64]	@ (80012f0 <MX_GPIO_Init+0x12c>)
 80012ae:	f004 fb2b 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80012b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <MX_GPIO_Init+0x12c>)
 80012cc:	f004 fb1c 	bl	8005908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2017      	movs	r0, #23
 80012d6:	f004 f8f2 	bl	80054be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012da:	2017      	movs	r0, #23
 80012dc:	f004 f90b 	bl	80054f6 <HAL_NVIC_EnableIRQ>

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40010800 	.word	0x40010800
 80012f4:	10210000 	.word	0x10210000

080012f8 <ili_set_address_window>:
 * @param y1 start row address.
 * @param x2 end column address.
 * @param y2 end row address.
 */
void ili_set_address_window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80012f8:	b490      	push	{r4, r7}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4604      	mov	r4, r0
 8001300:	4608      	mov	r0, r1
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4623      	mov	r3, r4
 8001308:	80fb      	strh	r3, [r7, #6]
 800130a:	4603      	mov	r3, r0
 800130c:	80bb      	strh	r3, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	807b      	strh	r3, [r7, #2]
 8001312:	4613      	mov	r3, r2
 8001314:	803b      	strh	r3, [r7, #0]
 8001316:	232a      	movs	r3, #42	@ 0x2a
 8001318:	737b      	strb	r3, [r7, #13]
 * User need not call it
 */
__attribute__((always_inline)) static inline void _ili_write_command_8bit(uint8_t cmd)
{
	//CS_ACTIVE;
	ILI_DC_CMD;
 800131a:	4b5f      	ldr	r3, [pc, #380]	@ (8001498 <ili_set_address_window+0x1a0>)
 800131c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001320:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8001322:	7b7b      	ldrb	r3, [r7, #13]
 8001324:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001328:	4b5b      	ldr	r3, [pc, #364]	@ (8001498 <ili_set_address_window+0x1a0>)
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	4b5a      	ldr	r3, [pc, #360]	@ (8001498 <ili_set_address_window+0x1a0>)
 800132e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	4b58      	ldr	r3, [pc, #352]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001336:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800133a:	611a      	str	r2, [r3, #16]
}
 800133c:	bf00      	nop
	_ili_write_command_8bit(ILI_CASET);

	ILI_DC_DAT;
 800133e:	4b56      	ldr	r3, [pc, #344]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001340:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001344:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)(x1 >> 8));
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	b29b      	uxth	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001352:	4b51      	ldr	r3, [pc, #324]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	4b50      	ldr	r3, [pc, #320]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001358:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	4b4e      	ldr	r3, [pc, #312]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001360:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001364:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)x1);
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800136e:	4b4a      	ldr	r3, [pc, #296]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	4b49      	ldr	r3, [pc, #292]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001374:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	4b47      	ldr	r3, [pc, #284]	@ (8001498 <ili_set_address_window+0x1a0>)
 800137c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001380:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)(x2 >> 8));
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800138e:	4b42      	ldr	r3, [pc, #264]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001390:	611a      	str	r2, [r3, #16]
 8001392:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001394:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	4b3f      	ldr	r3, [pc, #252]	@ (8001498 <ili_set_address_window+0x1a0>)
 800139c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013a0:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)x2);
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80013aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001498 <ili_set_address_window+0x1a0>)
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001498 <ili_set_address_window+0x1a0>)
 80013b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <ili_set_address_window+0x1a0>)
 80013b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	232b      	movs	r3, #43	@ 0x2b
 80013c0:	73bb      	strb	r3, [r7, #14]
	ILI_DC_CMD;
 80013c2:	4b35      	ldr	r3, [pc, #212]	@ (8001498 <ili_set_address_window+0x1a0>)
 80013c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013c8:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80013d0:	4b31      	ldr	r3, [pc, #196]	@ (8001498 <ili_set_address_window+0x1a0>)
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <ili_set_address_window+0x1a0>)
 80013d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001498 <ili_set_address_window+0x1a0>)
 80013de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013e2:	611a      	str	r2, [r3, #16]
}
 80013e4:	bf00      	nop


	_ili_write_command_8bit(ILI_PASET);
	ILI_DC_DAT;
 80013e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001498 <ili_set_address_window+0x1a0>)
 80013e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013ec:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)(y1 >> 8));
 80013ee:	88bb      	ldrh	r3, [r7, #4]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80013fa:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <ili_set_address_window+0x1a0>)
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001400:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001408:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800140c:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)y1);
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <ili_set_address_window+0x1a0>)
 800141c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001424:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001428:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)(y2 >> 8));
 800142a:	883b      	ldrh	r3, [r7, #0]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	b29b      	uxth	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <ili_set_address_window+0x1a0>)
 800143c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001444:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001448:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)y2);
 800144a:	883b      	ldrh	r3, [r7, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001458:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001460:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	232c      	movs	r3, #44	@ 0x2c
 8001468:	73fb      	strb	r3, [r7, #15]
	ILI_DC_CMD;
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <ili_set_address_window+0x1a0>)
 800146c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001470:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <ili_set_address_window+0x1a0>)
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <ili_set_address_window+0x1a0>)
 800147e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <ili_set_address_window+0x1a0>)
 8001486:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800148a:	611a      	str	r2, [r3, #16]
}
 800148c:	bf00      	nop

	_ili_write_command_8bit(ILI_RAMWR);
}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bc90      	pop	{r4, r7}
 8001496:	4770      	bx	lr
 8001498:	40010c00 	.word	0x40010c00

0800149c <_ili_render_glyph>:
/*
 * Render a character glyph on the display. Called by `_ili_draw_string_main()`
 * User need NOT call it
 */
void _ili_render_glyph(uint16_t x, uint16_t y, uint16_t fore_color, uint16_t back_color, const tImage *glyph, uint8_t is_bg)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b08b      	sub	sp, #44	@ 0x2c
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4604      	mov	r4, r0
 80014a4:	4608      	mov	r0, r1
 80014a6:	4611      	mov	r1, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4623      	mov	r3, r4
 80014ac:	80fb      	strh	r3, [r7, #6]
 80014ae:	4603      	mov	r3, r0
 80014b0:	80bb      	strh	r3, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	807b      	strh	r3, [r7, #2]
 80014b6:	4613      	mov	r3, r2
 80014b8:	803b      	strh	r3, [r7, #0]
	uint16_t width = 0, height = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	81fb      	strh	r3, [r7, #14]
 80014be:	2300      	movs	r3, #0
 80014c0:	81bb      	strh	r3, [r7, #12]

	width = glyph->width;
 80014c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	81fb      	strh	r3, [r7, #14]
	height = glyph->height;
 80014c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ca:	88db      	ldrh	r3, [r3, #6]
 80014cc:	81bb      	strh	r3, [r7, #12]

	uint16_t temp_x = x;
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t temp_y = y;
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	84bb      	strh	r3, [r7, #36]	@ 0x24

	uint8_t mask = 0x80;
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	72fb      	strb	r3, [r7, #11]
	uint8_t bit_counter = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	const uint8_t *glyph_data_ptr = (const uint8_t *)(glyph->data);
 80014e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61fb      	str	r3, [r7, #28]
	uint8_t glyph_data = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	76fb      	strb	r3, [r7, #27]
	// font bitmaps are stored in column major order (scanned from left-to-right, not the conventional top-to-bottom)
	// as font glyphs have heigher height than width, this scanning saves some storage.
	// So, we also render in left-to-right manner.

	// Along x axis (width)
	for (int i = 0; i < width; i++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e043      	b.n	8001578 <_ili_render_glyph+0xdc>
	{
		// Along y axis (height)
		for (int j = 0; j < height; j++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	e031      	b.n	800155a <_ili_render_glyph+0xbe>
		{

			// load new data only when previous byte (or word, depends on glyph->dataSize) is completely traversed by the mask
			// bit_counter = 0 means glyph_data is completely traversed by the mask
			if (bit_counter == 0)
 80014f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d108      	bne.n	8001510 <_ili_render_glyph+0x74>
			{
				glyph_data = *glyph_data_ptr++;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	61fa      	str	r2, [r7, #28]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	76fb      	strb	r3, [r7, #27]
				bit_counter = glyph->dataSize;
 8001508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800150a:	7a1b      	ldrb	r3, [r3, #8]
 800150c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			}
			// Decrement bit counter
			bit_counter--;
 8001510:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001514:	3b01      	subs	r3, #1
 8001516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

			//If pixel is blank
			if (glyph_data & mask)
 800151a:	7efa      	ldrb	r2, [r7, #27]
 800151c:	7afb      	ldrb	r3, [r7, #11]
 800151e:	4013      	ands	r3, r2
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00a      	beq.n	800153c <_ili_render_glyph+0xa0>
			{
				//Has background color (not transparent bg)
				if (is_bg)
 8001526:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <_ili_render_glyph+0xac>
				{
					ili_draw_pixel(temp_x, temp_y, back_color);
 800152e:	883a      	ldrh	r2, [r7, #0]
 8001530:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001532:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fbff 	bl	8001d38 <ili_draw_pixel>
 800153a:	e005      	b.n	8001548 <_ili_render_glyph+0xac>
			}

			//if pixel is not blank
			else
			{
				ili_draw_pixel(temp_x, temp_y, fore_color);
 800153c:	887a      	ldrh	r2, [r7, #2]
 800153e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001540:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fbf8 	bl	8001d38 <ili_draw_pixel>
			}

			glyph_data <<= 1;
 8001548:	7efb      	ldrb	r3, [r7, #27]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	76fb      	strb	r3, [r7, #27]
			temp_y++;
 800154e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001550:	3301      	adds	r3, #1
 8001552:	84bb      	strh	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	3301      	adds	r3, #1
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	89bb      	ldrh	r3, [r7, #12]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbc9      	blt.n	80014f6 <_ili_render_glyph+0x5a>
		}

		//New col starts. So, row is set to initial value and col is increased by one
		temp_y = y;
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	84bb      	strh	r3, [r7, #36]	@ 0x24
		temp_x++;
 8001566:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001568:	3301      	adds	r3, #1
 800156a:	84fb      	strh	r3, [r7, #38]	@ 0x26

		//Reset the bit counter cause we're moving to next column, so we start with a new byte
		bit_counter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	for (int i = 0; i < width; i++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	89fb      	ldrh	r3, [r7, #14]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbb7      	blt.n	80014f0 <_ili_render_glyph+0x54>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	372c      	adds	r7, #44	@ 0x2c
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
	...

0800158c <_ili_draw_string_main>:
 * is_bg=1 : Text will habe background color,   is_bg=0 : Text will have transparent background
 * User need NOT call it.
 */

void _ili_draw_string_main(uint16_t x, uint16_t y, char *str, uint16_t fore_color, uint16_t back_color, const tFont *font, uint8_t is_bg)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08b      	sub	sp, #44	@ 0x2c
 8001590:	af02      	add	r7, sp, #8
 8001592:	60ba      	str	r2, [r7, #8]
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	81fb      	strh	r3, [r7, #14]
 800159a:	460b      	mov	r3, r1
 800159c:	81bb      	strh	r3, [r7, #12]
 800159e:	4613      	mov	r3, r2
 80015a0:	80fb      	strh	r3, [r7, #6]
	uint16_t x_temp = x;
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	83fb      	strh	r3, [r7, #30]
	uint16_t y_temp = y;
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	83bb      	strh	r3, [r7, #28]

	uint8_t x_padding = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75bb      	strb	r3, [r7, #22]
	uint8_t y_padding = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	757b      	strb	r3, [r7, #21]
	const tImage *img = {0};
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
	uint16_t width = 0, height = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	827b      	strh	r3, [r7, #18]
 80015ba:	2300      	movs	r3, #0
 80015bc:	823b      	strh	r3, [r7, #16]



	while (*str)
 80015be:	e08d      	b.n	80016dc <_ili_draw_string_main+0x150>
	{
		if (*str == '\n')
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b0a      	cmp	r3, #10
 80015c6:	d10d      	bne.n	80015e4 <_ili_draw_string_main+0x58>
		{
			x_temp = x;					//go to first col
 80015c8:	89fb      	ldrh	r3, [r7, #14]
 80015ca:	83fb      	strh	r3, [r7, #30]
			y_temp += (font->chars[0].image->height + y_padding);	//go to next row (row height = height of space)
 80015cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	88da      	ldrh	r2, [r3, #6]
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4413      	add	r3, r2
 80015da:	b29a      	uxth	r2, r3
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	83bb      	strh	r3, [r7, #28]
 80015e2:	e078      	b.n	80016d6 <_ili_draw_string_main+0x14a>
		}

		else if (*str == '\t')
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d10d      	bne.n	8001608 <_ili_draw_string_main+0x7c>
		{
			x_temp += 4 * (font->chars[0].image->height + y_padding);	//Skip 4 spaces (width = width of space)
 80015ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	88db      	ldrh	r3, [r3, #6]
 80015f4:	461a      	mov	r2, r3
 80015f6:	7d7b      	ldrb	r3, [r7, #21]
 80015f8:	4413      	add	r3, r2
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b29a      	uxth	r2, r3
 8001600:	8bfb      	ldrh	r3, [r7, #30]
 8001602:	4413      	add	r3, r2
 8001604:	83fb      	strh	r3, [r7, #30]
 8001606:	e066      	b.n	80016d6 <_ili_draw_string_main+0x14a>
		}
		else
		{
			for (uint8_t i = 0; i < font->length; i++)
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]
 800160c:	e014      	b.n	8001638 <_ili_draw_string_main+0xac>
			{
				if (font->chars[i].code == *str)
 800160e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4293      	cmp	r3, r2
 8001620:	d107      	bne.n	8001632 <_ili_draw_string_main+0xa6>
				{
					img = font->chars[i].image;
 8001622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
					break;
 8001630:	e007      	b.n	8001642 <_ili_draw_string_main+0xb6>
			for (uint8_t i = 0; i < font->length; i++)
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	3301      	adds	r3, #1
 8001636:	75fb      	strb	r3, [r7, #23]
 8001638:	7dfa      	ldrb	r2, [r7, #23]
 800163a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	dbe5      	blt.n	800160e <_ili_draw_string_main+0x82>
				}
			}
			// No glyph (img) found, so return from this function
			if (img == NULL)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d04f      	beq.n	80016e8 <_ili_draw_string_main+0x15c>
			{
				return;
			}

			width = img->width;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	889b      	ldrh	r3, [r3, #4]
 800164c:	827b      	strh	r3, [r7, #18]
			height = img->height;
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	88db      	ldrh	r3, [r3, #6]
 8001652:	823b      	strh	r3, [r7, #16]

			if(y_temp + (height + y_padding) > ili_tftheight - 1)	//not enough space available at the bottom
 8001654:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <_ili_draw_string_main+0x168>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	8bba      	ldrh	r2, [r7, #28]
 800165c:	8a39      	ldrh	r1, [r7, #16]
 800165e:	7d7b      	ldrb	r3, [r7, #21]
 8001660:	440b      	add	r3, r1
 8001662:	4413      	add	r3, r2
 8001664:	4298      	cmp	r0, r3
 8001666:	dd41      	ble.n	80016ec <_ili_draw_string_main+0x160>
				return;
			if (x_temp + (width + x_padding) > ili_tftwidth - 1)	//not enough space available at the right side
 8001668:	4b23      	ldr	r3, [pc, #140]	@ (80016f8 <_ili_draw_string_main+0x16c>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	8bfa      	ldrh	r2, [r7, #30]
 8001670:	8a79      	ldrh	r1, [r7, #18]
 8001672:	7dbb      	ldrb	r3, [r7, #22]
 8001674:	440b      	add	r3, r1
 8001676:	4413      	add	r3, r2
 8001678:	4298      	cmp	r0, r3
 800167a:	dc09      	bgt.n	8001690 <_ili_draw_string_main+0x104>
			{
				x_temp = x;					//go to first col
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	83fb      	strh	r3, [r7, #30]
				y_temp += (height + y_padding);	//go to next row
 8001680:	7d7b      	ldrb	r3, [r7, #21]
 8001682:	b29a      	uxth	r2, r3
 8001684:	8a3b      	ldrh	r3, [r7, #16]
 8001686:	4413      	add	r3, r2
 8001688:	b29a      	uxth	r2, r3
 800168a:	8bbb      	ldrh	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	83bb      	strh	r3, [r7, #28]
			}


			if (is_bg)
 8001690:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00b      	beq.n	80016b0 <_ili_draw_string_main+0x124>
				_ili_render_glyph(x_temp, y_temp, fore_color, back_color, img, 1);
 8001698:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	8bb9      	ldrh	r1, [r7, #28]
 800169e:	8bf8      	ldrh	r0, [r7, #30]
 80016a0:	2301      	movs	r3, #1
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4623      	mov	r3, r4
 80016aa:	f7ff fef7 	bl	800149c <_ili_render_glyph>
 80016ae:	e00a      	b.n	80016c6 <_ili_draw_string_main+0x13a>
			else
				_ili_render_glyph(x_temp, y_temp, fore_color, back_color, img, 0);
 80016b0:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 80016b2:	88fa      	ldrh	r2, [r7, #6]
 80016b4:	8bb9      	ldrh	r1, [r7, #28]
 80016b6:	8bf8      	ldrh	r0, [r7, #30]
 80016b8:	2300      	movs	r3, #0
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4623      	mov	r3, r4
 80016c2:	f7ff feeb 	bl	800149c <_ili_render_glyph>
			x_temp += (width + x_padding);		//next char position
 80016c6:	7dbb      	ldrb	r3, [r7, #22]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	8a7b      	ldrh	r3, [r7, #18]
 80016cc:	4413      	add	r3, r2
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	8bfb      	ldrh	r3, [r7, #30]
 80016d2:	4413      	add	r3, r2
 80016d4:	83fb      	strh	r3, [r7, #30]
		}


		str++;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3301      	adds	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
	while (*str)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f af6d 	bne.w	80015c0 <_ili_draw_string_main+0x34>
 80016e6:	e002      	b.n	80016ee <_ili_draw_string_main+0x162>
				return;
 80016e8:	bf00      	nop
 80016ea:	e000      	b.n	80016ee <_ili_draw_string_main+0x162>
				return;
 80016ec:	bf00      	nop
	}
}
 80016ee:	3724      	adds	r7, #36	@ 0x24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	20000002 	.word	0x20000002
 80016f8:	20000000 	.word	0x20000000

080016fc <ili_draw_string>:
 * @param str pointer to the string to be drawn
 * @param color 16-bit RGB565 color of the string
 * @param font Pointer to the font of the string
 */
void ili_draw_string(uint16_t x, uint16_t y, char *str, uint16_t color, const tFont *font)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af04      	add	r7, sp, #16
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	461a      	mov	r2, r3
 8001706:	4603      	mov	r3, r0
 8001708:	81fb      	strh	r3, [r7, #14]
 800170a:	460b      	mov	r3, r1
 800170c:	81bb      	strh	r3, [r7, #12]
 800170e:	4613      	mov	r3, r2
 8001710:	80fb      	strh	r3, [r7, #6]
	_ili_draw_string_main(x, y, str, color, 0, font, 0);
 8001712:	88fa      	ldrh	r2, [r7, #6]
 8001714:	89b9      	ldrh	r1, [r7, #12]
 8001716:	89f8      	ldrh	r0, [r7, #14]
 8001718:	2300      	movs	r3, #0
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	2300      	movs	r3, #0
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f7ff ff30 	bl	800158c <_ili_draw_string_main>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <ili_draw_string_withbg>:
 * @param foe_color 16-bit RGB565 color of the string
 * @param back_color 16-bit RGB565 color of the string's background
 * @param font Pointer to the font of the string
 */
void ili_draw_string_withbg(uint16_t x, uint16_t y, char *str, uint16_t fore_color, uint16_t back_color, const tFont *font)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af04      	add	r7, sp, #16
 800173a:	60ba      	str	r2, [r7, #8]
 800173c:	461a      	mov	r2, r3
 800173e:	4603      	mov	r3, r0
 8001740:	81fb      	strh	r3, [r7, #14]
 8001742:	460b      	mov	r3, r1
 8001744:	81bb      	strh	r3, [r7, #12]
 8001746:	4613      	mov	r3, r2
 8001748:	80fb      	strh	r3, [r7, #6]
	_ili_draw_string_main(x, y, str, fore_color, back_color, font, 1);
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	89b9      	ldrh	r1, [r7, #12]
 800174e:	89f8      	ldrh	r0, [r7, #14]
 8001750:	2301      	movs	r3, #1
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	8b3b      	ldrh	r3, [r7, #24]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f7ff ff14 	bl	800158c <_ili_draw_string_main>
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ili_fill_color>:
 * Call ili_set_address_window() before calling this function.
 * @param color 16-bit RGB565 color value
 * @param len 32-bit number of pixels
 */
void ili_fill_color(uint16_t color, uint32_t len)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	80fb      	strh	r3, [r7, #6]
	/*
	* Here, macros are directly called (instead of inline functions) for performance increase
	*/
	uint16_t blocks = (uint16_t)(len / 64); // 64 pixels/block
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	81fb      	strh	r3, [r7, #14]
	uint8_t  pass_count;
	uint8_t color_high = color >> 8;
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	b29b      	uxth	r3, r3
 8001784:	733b      	strb	r3, [r7, #12]
	uint8_t color_low = color;
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	72fb      	strb	r3, [r7, #11]

	ILI_DC_DAT;
 800178a:	4b97      	ldr	r3, [pc, #604]	@ (80019e8 <ili_fill_color+0x27c>)
 800178c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001790:	611a      	str	r2, [r3, #16]
	// Write first pixel
	ILI_WRITE_8BIT(color_high); ILI_WRITE_8BIT(color_low);
 8001792:	7b3b      	ldrb	r3, [r7, #12]
 8001794:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001798:	4b93      	ldr	r3, [pc, #588]	@ (80019e8 <ili_fill_color+0x27c>)
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	4b92      	ldr	r3, [pc, #584]	@ (80019e8 <ili_fill_color+0x27c>)
 800179e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	4b90      	ldr	r3, [pc, #576]	@ (80019e8 <ili_fill_color+0x27c>)
 80017a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	7afb      	ldrb	r3, [r7, #11]
 80017ae:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80017b2:	4b8d      	ldr	r3, [pc, #564]	@ (80019e8 <ili_fill_color+0x27c>)
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	4b8c      	ldr	r3, [pc, #560]	@ (80019e8 <ili_fill_color+0x27c>)
 80017b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	4b8a      	ldr	r3, [pc, #552]	@ (80019e8 <ili_fill_color+0x27c>)
 80017c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017c4:	611a      	str	r2, [r3, #16]
	len--;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	603b      	str	r3, [r7, #0]

	// If higher byte and lower byte are identical,
	// just strobe the WR pin to send the previous data
	if(color_high == color_low)
 80017cc:	7b3a      	ldrb	r2, [r7, #12]
 80017ce:	7afb      	ldrb	r3, [r7, #11]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f040 80da 	bne.w	800198a <ili_fill_color+0x21e>
	{
		while(blocks--)
 80017d6:	e047      	b.n	8001868 <ili_fill_color+0xfc>
		{
			// pass count = number of blocks / pixels per pass = 64 / 4
			pass_count = 16;
 80017d8:	2310      	movs	r3, #16
 80017da:	737b      	strb	r3, [r7, #13]
			while(pass_count--)
 80017dc:	e03f      	b.n	800185e <ili_fill_color+0xf2>
			{
				ILI_WR_STROBE; ILI_WR_STROBE; ILI_WR_STROBE; ILI_WR_STROBE; // 2
 80017de:	4b82      	ldr	r3, [pc, #520]	@ (80019e8 <ili_fill_color+0x27c>)
 80017e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	4b80      	ldr	r3, [pc, #512]	@ (80019e8 <ili_fill_color+0x27c>)
 80017e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	4b7e      	ldr	r3, [pc, #504]	@ (80019e8 <ili_fill_color+0x27c>)
 80017f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	4b7c      	ldr	r3, [pc, #496]	@ (80019e8 <ili_fill_color+0x27c>)
 80017f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	4b7a      	ldr	r3, [pc, #488]	@ (80019e8 <ili_fill_color+0x27c>)
 8001800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	4b78      	ldr	r3, [pc, #480]	@ (80019e8 <ili_fill_color+0x27c>)
 8001808:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	4b76      	ldr	r3, [pc, #472]	@ (80019e8 <ili_fill_color+0x27c>)
 8001810:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001814:	615a      	str	r2, [r3, #20]
 8001816:	4b74      	ldr	r3, [pc, #464]	@ (80019e8 <ili_fill_color+0x27c>)
 8001818:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800181c:	611a      	str	r2, [r3, #16]
				ILI_WR_STROBE; ILI_WR_STROBE; ILI_WR_STROBE; ILI_WR_STROBE; // 4
 800181e:	4b72      	ldr	r3, [pc, #456]	@ (80019e8 <ili_fill_color+0x27c>)
 8001820:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001824:	615a      	str	r2, [r3, #20]
 8001826:	4b70      	ldr	r3, [pc, #448]	@ (80019e8 <ili_fill_color+0x27c>)
 8001828:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800182c:	611a      	str	r2, [r3, #16]
 800182e:	4b6e      	ldr	r3, [pc, #440]	@ (80019e8 <ili_fill_color+0x27c>)
 8001830:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001834:	615a      	str	r2, [r3, #20]
 8001836:	4b6c      	ldr	r3, [pc, #432]	@ (80019e8 <ili_fill_color+0x27c>)
 8001838:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	4b6a      	ldr	r3, [pc, #424]	@ (80019e8 <ili_fill_color+0x27c>)
 8001840:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	4b68      	ldr	r3, [pc, #416]	@ (80019e8 <ili_fill_color+0x27c>)
 8001848:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	4b66      	ldr	r3, [pc, #408]	@ (80019e8 <ili_fill_color+0x27c>)
 8001850:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	4b64      	ldr	r3, [pc, #400]	@ (80019e8 <ili_fill_color+0x27c>)
 8001858:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800185c:	611a      	str	r2, [r3, #16]
			while(pass_count--)
 800185e:	7b7b      	ldrb	r3, [r7, #13]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	737a      	strb	r2, [r7, #13]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ba      	bne.n	80017de <ili_fill_color+0x72>
		while(blocks--)
 8001868:	89fb      	ldrh	r3, [r7, #14]
 800186a:	1e5a      	subs	r2, r3, #1
 800186c:	81fa      	strh	r2, [r7, #14]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1b2      	bne.n	80017d8 <ili_fill_color+0x6c>
			}
		}
		// Fill any remaining pixels (1 to 64)
		pass_count = len & 63;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800187a:	737b      	strb	r3, [r7, #13]
		while (pass_count--)
 800187c:	e00f      	b.n	800189e <ili_fill_color+0x132>
		{
			ILI_WR_STROBE; ILI_WR_STROBE;
 800187e:	4b5a      	ldr	r3, [pc, #360]	@ (80019e8 <ili_fill_color+0x27c>)
 8001880:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	4b58      	ldr	r3, [pc, #352]	@ (80019e8 <ili_fill_color+0x27c>)
 8001888:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	4b56      	ldr	r3, [pc, #344]	@ (80019e8 <ili_fill_color+0x27c>)
 8001890:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	4b54      	ldr	r3, [pc, #336]	@ (80019e8 <ili_fill_color+0x27c>)
 8001898:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800189c:	611a      	str	r2, [r3, #16]
		while (pass_count--)
 800189e:	7b7b      	ldrb	r3, [r7, #13]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	737a      	strb	r2, [r7, #13]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ea      	bne.n	800187e <ili_fill_color+0x112>
		{
			// write here the remaining data
			ILI_WRITE_8BIT(color_high); ILI_WRITE_8BIT(color_low);
		}
	}
}
 80018a8:	e099      	b.n	80019de <ili_fill_color+0x272>
			pass_count = 16;
 80018aa:	2310      	movs	r3, #16
 80018ac:	737b      	strb	r3, [r7, #13]
			while(pass_count--)
 80018ae:	e067      	b.n	8001980 <ili_fill_color+0x214>
				ILI_WRITE_8BIT(color_high); ILI_WRITE_8BIT(color_low); 	ILI_WRITE_8BIT(color_high); ILI_WRITE_8BIT(color_low); //2
 80018b0:	7b3b      	ldrb	r3, [r7, #12]
 80018b2:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80018b6:	4b4c      	ldr	r3, [pc, #304]	@ (80019e8 <ili_fill_color+0x27c>)
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	4b4b      	ldr	r3, [pc, #300]	@ (80019e8 <ili_fill_color+0x27c>)
 80018bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	4b49      	ldr	r3, [pc, #292]	@ (80019e8 <ili_fill_color+0x27c>)
 80018c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	7afb      	ldrb	r3, [r7, #11]
 80018cc:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80018d0:	4b45      	ldr	r3, [pc, #276]	@ (80019e8 <ili_fill_color+0x27c>)
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	4b44      	ldr	r3, [pc, #272]	@ (80019e8 <ili_fill_color+0x27c>)
 80018d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	4b42      	ldr	r3, [pc, #264]	@ (80019e8 <ili_fill_color+0x27c>)
 80018de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	7b3b      	ldrb	r3, [r7, #12]
 80018e6:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80018ea:	4b3f      	ldr	r3, [pc, #252]	@ (80019e8 <ili_fill_color+0x27c>)
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	4b3e      	ldr	r3, [pc, #248]	@ (80019e8 <ili_fill_color+0x27c>)
 80018f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f4:	615a      	str	r2, [r3, #20]
 80018f6:	4b3c      	ldr	r3, [pc, #240]	@ (80019e8 <ili_fill_color+0x27c>)
 80018f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001904:	4b38      	ldr	r3, [pc, #224]	@ (80019e8 <ili_fill_color+0x27c>)
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <ili_fill_color+0x27c>)
 800190a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <ili_fill_color+0x27c>)
 8001912:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001916:	611a      	str	r2, [r3, #16]
				ILI_WRITE_8BIT(color_high); ILI_WRITE_8BIT(color_low); 	ILI_WRITE_8BIT(color_high); ILI_WRITE_8BIT(color_low); //4
 8001918:	7b3b      	ldrb	r3, [r7, #12]
 800191a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800191e:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <ili_fill_color+0x27c>)
 8001920:	611a      	str	r2, [r3, #16]
 8001922:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <ili_fill_color+0x27c>)
 8001924:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <ili_fill_color+0x27c>)
 800192c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	7afb      	ldrb	r3, [r7, #11]
 8001934:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <ili_fill_color+0x27c>)
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <ili_fill_color+0x27c>)
 800193e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <ili_fill_color+0x27c>)
 8001946:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001952:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <ili_fill_color+0x27c>)
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <ili_fill_color+0x27c>)
 8001958:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800195c:	615a      	str	r2, [r3, #20]
 800195e:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <ili_fill_color+0x27c>)
 8001960:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	7afb      	ldrb	r3, [r7, #11]
 8001968:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <ili_fill_color+0x27c>)
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <ili_fill_color+0x27c>)
 8001972:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <ili_fill_color+0x27c>)
 800197a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800197e:	611a      	str	r2, [r3, #16]
			while(pass_count--)
 8001980:	7b7b      	ldrb	r3, [r7, #13]
 8001982:	1e5a      	subs	r2, r3, #1
 8001984:	737a      	strb	r2, [r7, #13]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d192      	bne.n	80018b0 <ili_fill_color+0x144>
		while(blocks--)
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	81fa      	strh	r2, [r7, #14]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d18a      	bne.n	80018aa <ili_fill_color+0x13e>
		pass_count = len & 63;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800199c:	737b      	strb	r3, [r7, #13]
		while (pass_count--)
 800199e:	e019      	b.n	80019d4 <ili_fill_color+0x268>
			ILI_WRITE_8BIT(color_high); ILI_WRITE_8BIT(color_low);
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
 80019a2:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <ili_fill_color+0x27c>)
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <ili_fill_color+0x27c>)
 80019ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019b0:	615a      	str	r2, [r3, #20]
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <ili_fill_color+0x27c>)
 80019b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <ili_fill_color+0x27c>)
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <ili_fill_color+0x27c>)
 80019c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <ili_fill_color+0x27c>)
 80019ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019d2:	611a      	str	r2, [r3, #16]
		while (pass_count--)
 80019d4:	7b7b      	ldrb	r3, [r7, #13]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	737a      	strb	r2, [r7, #13]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1e0      	bne.n	80019a0 <ili_fill_color+0x234>
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40010c00 	.word	0x40010c00

080019ec <ili_fill_rect>:
 * @param w Width of rectangle
 * @param h Height of rectangle
 * @param color 16-bit RGB565 color
 */
void ili_fill_rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4604      	mov	r4, r0
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4623      	mov	r3, r4
 80019fc:	80fb      	strh	r3, [r7, #6]
 80019fe:	4603      	mov	r3, r0
 8001a00:	80bb      	strh	r3, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	807b      	strh	r3, [r7, #2]
 8001a06:	4613      	mov	r3, r2
 8001a08:	803b      	strh	r3, [r7, #0]
	if (x >= ili_tftwidth || y >= ili_tftheight || w == 0 || h == 0)
 8001a0a:	4b23      	ldr	r3, [pc, #140]	@ (8001a98 <ili_fill_rect+0xac>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	88fa      	ldrh	r2, [r7, #6]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d23d      	bcs.n	8001a90 <ili_fill_rect+0xa4>
 8001a14:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <ili_fill_rect+0xb0>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	88ba      	ldrh	r2, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d238      	bcs.n	8001a90 <ili_fill_rect+0xa4>
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d035      	beq.n	8001a90 <ili_fill_rect+0xa4>
 8001a24:	883b      	ldrh	r3, [r7, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d032      	beq.n	8001a90 <ili_fill_rect+0xa4>
		return;
	if (x + w - 1 >= ili_tftwidth)
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a19      	ldr	r2, [pc, #100]	@ (8001a98 <ili_fill_rect+0xac>)
 8001a32:	8812      	ldrh	r2, [r2, #0]
 8001a34:	4293      	cmp	r3, r2
 8001a36:	dd04      	ble.n	8001a42 <ili_fill_rect+0x56>
		w = ili_tftwidth - x;
 8001a38:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <ili_fill_rect+0xac>)
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	807b      	strh	r3, [r7, #2]
	if (y + h - 1 >= ili_tftheight)
 8001a42:	88ba      	ldrh	r2, [r7, #4]
 8001a44:	883b      	ldrh	r3, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <ili_fill_rect+0xb0>)
 8001a4a:	8812      	ldrh	r2, [r2, #0]
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	dd04      	ble.n	8001a5a <ili_fill_rect+0x6e>
		h = ili_tftheight - y;
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <ili_fill_rect+0xb0>)
 8001a52:	881a      	ldrh	r2, [r3, #0]
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	803b      	strh	r3, [r7, #0]

	ili_set_address_window(x, y, x + w - 1, y + h - 1);
 8001a5a:	88fa      	ldrh	r2, [r7, #6]
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29c      	uxth	r4, r3
 8001a66:	88ba      	ldrh	r2, [r7, #4]
 8001a68:	883b      	ldrh	r3, [r7, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	88b9      	ldrh	r1, [r7, #4]
 8001a74:	88f8      	ldrh	r0, [r7, #6]
 8001a76:	4622      	mov	r2, r4
 8001a78:	f7ff fc3e 	bl	80012f8 <ili_set_address_window>
	ili_fill_color(color, (uint32_t)w * (uint32_t)h);
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	883a      	ldrh	r2, [r7, #0]
 8001a80:	fb03 f202 	mul.w	r2, r3, r2
 8001a84:	8b3b      	ldrh	r3, [r7, #24]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fe6f 	bl	800176c <ili_fill_color>
 8001a8e:	e000      	b.n	8001a92 <ili_fill_rect+0xa6>
		return;
 8001a90:	bf00      	nop
}
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000002 	.word	0x20000002

08001aa0 <ili_fill_rect_fast>:

/*
 * Same as `ili_fill_rect()` but does not do bound checking, so it's slightly faster
 */
void ili_fill_rect_fast(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	80fb      	strh	r3, [r7, #6]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80bb      	strh	r3, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	807b      	strh	r3, [r7, #2]
 8001aba:	4613      	mov	r3, r2
 8001abc:	803b      	strh	r3, [r7, #0]
	ili_set_address_window(x1, y1, x1 + w - 1, y1 + h - 1);
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29c      	uxth	r4, r3
 8001aca:	88ba      	ldrh	r2, [r7, #4]
 8001acc:	883b      	ldrh	r3, [r7, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	88b9      	ldrh	r1, [r7, #4]
 8001ad8:	88f8      	ldrh	r0, [r7, #6]
 8001ada:	4622      	mov	r2, r4
 8001adc:	f7ff fc0c 	bl	80012f8 <ili_set_address_window>
	ili_fill_color(color, (uint32_t)w * (uint32_t)h);
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	883a      	ldrh	r2, [r7, #0]
 8001ae4:	fb03 f202 	mul.w	r2, r3, r2
 8001ae8:	8b3b      	ldrh	r3, [r7, #24]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fe3d 	bl	800176c <ili_fill_color>
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd90      	pop	{r4, r7, pc}
	...

08001afc <ili_fill_screen>:
/**
 * Fill the entire display (screen) with `color`
 * @param color 16-bit RGB565 color
 */
void ili_fill_screen(uint16_t color)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
	ili_set_address_window(0, 0, ili_tftwidth - 1, ili_tftheight - 1);
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <ili_fill_screen+0x44>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <ili_fill_screen+0x48>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2100      	movs	r1, #0
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff fbed 	bl	80012f8 <ili_set_address_window>
	ili_fill_color(color, (uint32_t)ili_tftwidth * (uint32_t)ili_tftheight);
 8001b1e:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <ili_fill_screen+0x44>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <ili_fill_screen+0x48>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	fb03 f202 	mul.w	r2, r3, r2
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe1b 	bl	800176c <ili_fill_color>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000002 	.word	0x20000002

08001b48 <ili_draw_rectangle>:

/**
 * Draw a rectangle
*/
void ili_draw_rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	80fb      	strh	r3, [r7, #6]
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80bb      	strh	r3, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	807b      	strh	r3, [r7, #2]
 8001b62:	4613      	mov	r3, r2
 8001b64:	803b      	strh	r3, [r7, #0]
	// Perform bound checking
	if (x >= ili_tftwidth || y >= ili_tftheight || w == 0 || h == 0)
 8001b66:	4b33      	ldr	r3, [pc, #204]	@ (8001c34 <ili_draw_rectangle+0xec>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d25d      	bcs.n	8001c2c <ili_draw_rectangle+0xe4>
 8001b70:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <ili_draw_rectangle+0xf0>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	88ba      	ldrh	r2, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d258      	bcs.n	8001c2c <ili_draw_rectangle+0xe4>
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d055      	beq.n	8001c2c <ili_draw_rectangle+0xe4>
 8001b80:	883b      	ldrh	r3, [r7, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d052      	beq.n	8001c2c <ili_draw_rectangle+0xe4>
		return;
	if (x + w - 1 >= ili_tftwidth)
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a29      	ldr	r2, [pc, #164]	@ (8001c34 <ili_draw_rectangle+0xec>)
 8001b8e:	8812      	ldrh	r2, [r2, #0]
 8001b90:	4293      	cmp	r3, r2
 8001b92:	dd04      	ble.n	8001b9e <ili_draw_rectangle+0x56>
		w = ili_tftwidth - x;
 8001b94:	4b27      	ldr	r3, [pc, #156]	@ (8001c34 <ili_draw_rectangle+0xec>)
 8001b96:	881a      	ldrh	r2, [r3, #0]
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	807b      	strh	r3, [r7, #2]
	if (y + h - 1 >= ili_tftheight)
 8001b9e:	88ba      	ldrh	r2, [r7, #4]
 8001ba0:	883b      	ldrh	r3, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a24      	ldr	r2, [pc, #144]	@ (8001c38 <ili_draw_rectangle+0xf0>)
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	dd04      	ble.n	8001bb6 <ili_draw_rectangle+0x6e>
		h = ili_tftheight - y;
 8001bac:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <ili_draw_rectangle+0xf0>)
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	88bb      	ldrh	r3, [r7, #4]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	803b      	strh	r3, [r7, #0]

	_ili_draw_fast_h_line(x, y, x+w-1, 1, color);
 8001bb6:	88fa      	ldrh	r2, [r7, #6]
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	88b9      	ldrh	r1, [r7, #4]
 8001bc4:	88f8      	ldrh	r0, [r7, #6]
 8001bc6:	8b3b      	ldrh	r3, [r7, #24]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f000 f836 	bl	8001c3c <_ili_draw_fast_h_line>
	_ili_draw_fast_h_line(x, y+h, x+w-1, 1, color);
 8001bd0:	88ba      	ldrh	r2, [r7, #4]
 8001bd2:	883b      	ldrh	r3, [r7, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b299      	uxth	r1, r3
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	88f8      	ldrh	r0, [r7, #6]
 8001be6:	8b3b      	ldrh	r3, [r7, #24]
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2301      	movs	r3, #1
 8001bec:	f000 f826 	bl	8001c3c <_ili_draw_fast_h_line>
	_ili_draw_fast_v_line(x, y, y+h-1, 1, color);
 8001bf0:	88ba      	ldrh	r2, [r7, #4]
 8001bf2:	883b      	ldrh	r3, [r7, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	88b9      	ldrh	r1, [r7, #4]
 8001bfe:	88f8      	ldrh	r0, [r7, #6]
 8001c00:	8b3b      	ldrh	r3, [r7, #24]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2301      	movs	r3, #1
 8001c06:	f000 f858 	bl	8001cba <_ili_draw_fast_v_line>
	_ili_draw_fast_v_line(x+w, y, y+h-1, 1, color);
 8001c0a:	88fa      	ldrh	r2, [r7, #6]
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	4413      	add	r3, r2
 8001c10:	b298      	uxth	r0, r3
 8001c12:	88ba      	ldrh	r2, [r7, #4]
 8001c14:	883b      	ldrh	r3, [r7, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	88b9      	ldrh	r1, [r7, #4]
 8001c20:	8b3b      	ldrh	r3, [r7, #24]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2301      	movs	r3, #1
 8001c26:	f000 f848 	bl	8001cba <_ili_draw_fast_v_line>
 8001c2a:	e000      	b.n	8001c2e <ili_draw_rectangle+0xe6>
		return;
 8001c2c:	bf00      	nop


}
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd90      	pop	{r4, r7, pc}
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000002 	.word	0x20000002

08001c3c <_ili_draw_fast_h_line>:
/*
 * Called by ili_draw_line().
 * User need not call it
 */
void _ili_draw_fast_h_line(uint16_t x0, uint16_t y0, uint16_t x1, uint8_t width, uint16_t color)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	807b      	strh	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	707b      	strb	r3, [r7, #1]
	/*
	* Draw a horizontal line very fast
	*/
	if (x0 < x1)
 8001c5a:	88fa      	ldrh	r2, [r7, #6]
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d20c      	bcs.n	8001c7c <_ili_draw_fast_h_line+0x40>
		ili_set_address_window(x0, y0, x1, y0+width-1);	//as it's horizontal line, y1=y0.. must be.
 8001c62:	787b      	ldrb	r3, [r7, #1]
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	88bb      	ldrh	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	887a      	ldrh	r2, [r7, #2]
 8001c72:	88b9      	ldrh	r1, [r7, #4]
 8001c74:	88f8      	ldrh	r0, [r7, #6]
 8001c76:	f7ff fb3f 	bl	80012f8 <ili_set_address_window>
 8001c7a:	e00b      	b.n	8001c94 <_ili_draw_fast_h_line+0x58>
	else
		ili_set_address_window(x1, y0, x0, y0+width-1);	
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	88fa      	ldrh	r2, [r7, #6]
 8001c8c:	88b9      	ldrh	r1, [r7, #4]
 8001c8e:	8878      	ldrh	r0, [r7, #2]
 8001c90:	f7ff fb32 	bl	80012f8 <ili_set_address_window>
	ili_fill_color(color, (uint32_t)width * (uint32_t)abs(x1 - x0 + 1));
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	8879      	ldrh	r1, [r7, #2]
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	1a8a      	subs	r2, r1, r2
 8001c9c:	3201      	adds	r2, #1
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	bfb8      	it	lt
 8001ca2:	4252      	neglt	r2, r2
 8001ca4:	fb03 f202 	mul.w	r2, r3, r2
 8001ca8:	8b3b      	ldrh	r3, [r7, #24]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fd5d 	bl	800176c <ili_fill_color>
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}

08001cba <_ili_draw_fast_v_line>:
/*
 * Called by ili_draw_line().
 * User need not call it
 */
void _ili_draw_fast_v_line(uint16_t x0, uint16_t y0, uint16_t y1, uint8_t width, uint16_t color)
{
 8001cba:	b590      	push	{r4, r7, lr}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	80fb      	strh	r3, [r7, #6]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	80bb      	strh	r3, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
	/*
	* Draw a vertical line very fast
	*/
	if (y0 < y1)
 8001cd8:	88ba      	ldrh	r2, [r7, #4]
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d20c      	bcs.n	8001cfa <_ili_draw_fast_v_line+0x40>
		ili_set_address_window(x0, y0, x0+width-1, y1);	//as it's vertical line, x1=x0.. must be.
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	887b      	ldrh	r3, [r7, #2]
 8001cf0:	88b9      	ldrh	r1, [r7, #4]
 8001cf2:	88f8      	ldrh	r0, [r7, #6]
 8001cf4:	f7ff fb00 	bl	80012f8 <ili_set_address_window>
 8001cf8:	e00b      	b.n	8001d12 <_ili_draw_fast_v_line+0x58>
	else
		ili_set_address_window(x0, y1, x0+width-1, y0);	
 8001cfa:	787b      	ldrb	r3, [r7, #1]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	4413      	add	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	88bb      	ldrh	r3, [r7, #4]
 8001d0a:	8879      	ldrh	r1, [r7, #2]
 8001d0c:	88f8      	ldrh	r0, [r7, #6]
 8001d0e:	f7ff faf3 	bl	80012f8 <ili_set_address_window>
	
	
	ili_fill_color(color, (uint32_t)width * (uint32_t)abs(y1 - y0 + 1));
 8001d12:	787b      	ldrb	r3, [r7, #1]
 8001d14:	8879      	ldrh	r1, [r7, #2]
 8001d16:	88ba      	ldrh	r2, [r7, #4]
 8001d18:	1a8a      	subs	r2, r1, r2
 8001d1a:	3201      	adds	r2, #1
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	bfb8      	it	lt
 8001d20:	4252      	neglt	r2, r2
 8001d22:	fb03 f202 	mul.w	r2, r3, r2
 8001d26:	8b3b      	ldrh	r3, [r7, #24]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fd1e 	bl	800176c <ili_fill_color>
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd90      	pop	{r4, r7, pc}

08001d38 <ili_draw_pixel>:
 * Draw a pixel at a given position with `color`
 * @param x Start col address
 * @param y Start row address
 */
void ili_draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
 8001d42:	460b      	mov	r3, r1
 8001d44:	80bb      	strh	r3, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	807b      	strh	r3, [r7, #2]
	/*
	* Why?: This function is mainly added in the driver so that  ui libraries can use it.
	* example: LittlevGL requires user to supply a function that can draw pixel
	*/

	ili_set_address_window(x, y, x, y);
 8001d4a:	88bb      	ldrh	r3, [r7, #4]
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	88b9      	ldrh	r1, [r7, #4]
 8001d50:	88f8      	ldrh	r0, [r7, #6]
 8001d52:	f7ff fad1 	bl	80012f8 <ili_set_address_window>
	ILI_DC_DAT;
 8001d56:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <ili_draw_pixel+0x6c>)
 8001d58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d5c:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)(color >> 8));
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <ili_draw_pixel+0x6c>)
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <ili_draw_pixel+0x6c>)
 8001d70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <ili_draw_pixel+0x6c>)
 8001d78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d7c:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)color);
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <ili_draw_pixel+0x6c>)
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <ili_draw_pixel+0x6c>)
 8001d8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d90:	615a      	str	r2, [r3, #20]
 8001d92:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <ili_draw_pixel+0x6c>)
 8001d94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d98:	611a      	str	r2, [r3, #16]
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40010c00 	.word	0x40010c00

08001da8 <ili_rotate_display>:
/**
 * Rotate the display clockwise or anti-clockwie set by `rotation`
 * @param rotation Type of rotation. Supported values 0, 1, 2, 3
 */
void ili_rotate_display(uint8_t rotation)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
	* 					1 : Potrait 1
	* 					2 : Landscape 2
	* 					3 : Potrait 2
	*/

    uint16_t new_height = 320;
 8001db2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001db6:	82fb      	strh	r3, [r7, #22]
    uint16_t new_width = 240;
 8001db8:	23f0      	movs	r3, #240	@ 0xf0
 8001dba:	82bb      	strh	r3, [r7, #20]
	switch (rotation)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	f200 80c8 	bhi.w	8001f54 <ili_rotate_display+0x1ac>
 8001dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dcc <ili_rotate_display+0x24>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001e3b 	.word	0x08001e3b
 8001dd4:	08001e99 	.word	0x08001e99
 8001dd8:	08001ef7 	.word	0x08001ef7
 8001ddc:	2336      	movs	r3, #54	@ 0x36
 8001dde:	74bb      	strb	r3, [r7, #18]
	ILI_DC_CMD;
 8001de0:	4b5f      	ldr	r3, [pc, #380]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001de2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001de6:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8001de8:	7cbb      	ldrb	r3, [r7, #18]
 8001dea:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001dee:	4b5c      	ldr	r3, [pc, #368]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001df0:	611a      	str	r2, [r3, #16]
 8001df2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001df4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	4b59      	ldr	r3, [pc, #356]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001dfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e00:	611a      	str	r2, [r3, #16]
}
 8001e02:	bf00      	nop
 8001e04:	2348      	movs	r3, #72	@ 0x48
 8001e06:	74fb      	strb	r3, [r7, #19]
 * User need not call it
 */
__attribute__((always_inline)) static inline  void _ili_write_data_8bit(uint8_t dat)
{
	//CS_ACTIVE;
	ILI_DC_DAT;
 8001e08:	4b55      	ldr	r3, [pc, #340]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e0a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e0e:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8001e10:	7cfb      	ldrb	r3, [r7, #19]
 8001e12:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001e16:	4b52      	ldr	r3, [pc, #328]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	4b51      	ldr	r3, [pc, #324]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e20:	615a      	str	r2, [r3, #20]
 8001e22:	4b4f      	ldr	r3, [pc, #316]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e28:	611a      	str	r2, [r3, #16]
}
 8001e2a:	bf00      	nop
	{
		case 0:
			_ili_write_command_8bit(ILI_MADCTL);		//Memory Access Control
			_ili_write_data_8bit(0x48);	 			//MX: 1, MY: 0, MV: 0	(Landscape 1. Default)
			ili_tftheight = new_height;
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f64 <ili_rotate_display+0x1bc>)
 8001e2e:	8afb      	ldrh	r3, [r7, #22]
 8001e30:	8013      	strh	r3, [r2, #0]
			ili_tftwidth = new_width;
 8001e32:	4a4d      	ldr	r2, [pc, #308]	@ (8001f68 <ili_rotate_display+0x1c0>)
 8001e34:	8abb      	ldrh	r3, [r7, #20]
 8001e36:	8013      	strh	r3, [r2, #0]
			break;
 8001e38:	e08c      	b.n	8001f54 <ili_rotate_display+0x1ac>
 8001e3a:	2336      	movs	r3, #54	@ 0x36
 8001e3c:	743b      	strb	r3, [r7, #16]
	ILI_DC_CMD;
 8001e3e:	4b48      	ldr	r3, [pc, #288]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e40:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e44:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8001e46:	7c3b      	ldrb	r3, [r7, #16]
 8001e48:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001e4c:	4b44      	ldr	r3, [pc, #272]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e4e:	611a      	str	r2, [r3, #16]
 8001e50:	4b43      	ldr	r3, [pc, #268]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e56:	615a      	str	r2, [r3, #20]
 8001e58:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e5e:	611a      	str	r2, [r3, #16]
}
 8001e60:	bf00      	nop
 8001e62:	2328      	movs	r3, #40	@ 0x28
 8001e64:	747b      	strb	r3, [r7, #17]
	ILI_DC_DAT;
 8001e66:	4b3e      	ldr	r3, [pc, #248]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e6c:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8001e6e:	7c7b      	ldrb	r3, [r7, #17]
 8001e70:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001e74:	4b3a      	ldr	r3, [pc, #232]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e76:	611a      	str	r2, [r3, #16]
 8001e78:	4b39      	ldr	r3, [pc, #228]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e86:	611a      	str	r2, [r3, #16]
}
 8001e88:	bf00      	nop
		case 1:
			_ili_write_command_8bit(ILI_MADCTL);		//Memory Access Control
			_ili_write_data_8bit(0x28);				//MX: 0, MY: 0, MV: 1	(Potrait 1)
			ili_tftheight = new_width;
 8001e8a:	4a36      	ldr	r2, [pc, #216]	@ (8001f64 <ili_rotate_display+0x1bc>)
 8001e8c:	8abb      	ldrh	r3, [r7, #20]
 8001e8e:	8013      	strh	r3, [r2, #0]
			ili_tftwidth = new_height;
 8001e90:	4a35      	ldr	r2, [pc, #212]	@ (8001f68 <ili_rotate_display+0x1c0>)
 8001e92:	8afb      	ldrh	r3, [r7, #22]
 8001e94:	8013      	strh	r3, [r2, #0]
			break;
 8001e96:	e05d      	b.n	8001f54 <ili_rotate_display+0x1ac>
 8001e98:	2336      	movs	r3, #54	@ 0x36
 8001e9a:	73bb      	strb	r3, [r7, #14]
	ILI_DC_CMD;
 8001e9c:	4b30      	ldr	r3, [pc, #192]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001e9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ea2:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001eb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eb4:	615a      	str	r2, [r3, #20]
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001eb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ebc:	611a      	str	r2, [r3, #16]
}
 8001ebe:	bf00      	nop
 8001ec0:	2388      	movs	r3, #136	@ 0x88
 8001ec2:	73fb      	strb	r3, [r7, #15]
	ILI_DC_DAT;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001ec6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001eca:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001ed2:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001ed4:	611a      	str	r2, [r3, #16]
 8001ed6:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001ed8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001edc:	615a      	str	r2, [r3, #20]
 8001ede:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001ee0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee4:	611a      	str	r2, [r3, #16]
}
 8001ee6:	bf00      	nop
		case 2:
			_ili_write_command_8bit(ILI_MADCTL);		//Memory Access Control
			_ili_write_data_8bit(0x88);				//MX: 0, MY: 1, MV: 0	(Landscape 2)
			ili_tftheight = new_height;
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <ili_rotate_display+0x1bc>)
 8001eea:	8afb      	ldrh	r3, [r7, #22]
 8001eec:	8013      	strh	r3, [r2, #0]
			ili_tftwidth = new_width;
 8001eee:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <ili_rotate_display+0x1c0>)
 8001ef0:	8abb      	ldrh	r3, [r7, #20]
 8001ef2:	8013      	strh	r3, [r2, #0]
			break;
 8001ef4:	e02e      	b.n	8001f54 <ili_rotate_display+0x1ac>
 8001ef6:	2336      	movs	r3, #54	@ 0x36
 8001ef8:	733b      	strb	r3, [r7, #12]
	ILI_DC_CMD;
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001efc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f00:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8001f02:	7b3b      	ldrb	r3, [r7, #12]
 8001f04:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001f0a:	611a      	str	r2, [r3, #16]
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001f0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001f16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f1a:	611a      	str	r2, [r3, #16]
}
 8001f1c:	bf00      	nop
 8001f1e:	23e8      	movs	r3, #232	@ 0xe8
 8001f20:	737b      	strb	r3, [r7, #13]
	ILI_DC_DAT;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001f24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f28:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8001f2a:	7b7b      	ldrb	r3, [r7, #13]
 8001f2c:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001f36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f3a:	615a      	str	r2, [r3, #20]
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <ili_rotate_display+0x1b8>)
 8001f3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f42:	611a      	str	r2, [r3, #16]
}
 8001f44:	bf00      	nop
		case 3:
			_ili_write_command_8bit(ILI_MADCTL);		//Memory Access Control
			_ili_write_data_8bit(0xE8);				//MX: 1, MY: 1, MV: 1	(Potrait 2)
			ili_tftheight = new_width;
 8001f46:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <ili_rotate_display+0x1bc>)
 8001f48:	8abb      	ldrh	r3, [r7, #20]
 8001f4a:	8013      	strh	r3, [r2, #0]
			ili_tftwidth = new_height;
 8001f4c:	4a06      	ldr	r2, [pc, #24]	@ (8001f68 <ili_rotate_display+0x1c0>)
 8001f4e:	8afb      	ldrh	r3, [r7, #22]
 8001f50:	8013      	strh	r3, [r2, #0]
			break;
 8001f52:	bf00      	nop
	}
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010c00 	.word	0x40010c00
 8001f64:	20000002 	.word	0x20000002
 8001f68:	20000000 	.word	0x20000000

08001f6c <ili_init>:

/**
 * Initialize the display driver
 */
void ili_init()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	@ 0x30
 8001f70:	af00      	add	r7, sp, #0
	// Configure gpio output dir and mode
	ILI_CONFIG_GPIO();
 8001f72:	463b      	mov	r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	23ff      	movs	r3, #255	@ 0xff
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	2301      	movs	r3, #1
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	463b      	mov	r3, r7
 8001f90:	4619      	mov	r1, r3
 8001f92:	48b1      	ldr	r0, [pc, #708]	@ (8002258 <ili_init+0x2ec>)
 8001f94:	f003 fcb8 	bl	8005908 <HAL_GPIO_Init>
 8001f98:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	463b      	mov	r3, r7
 8001fac:	4619      	mov	r1, r3
 8001fae:	48aa      	ldr	r0, [pc, #680]	@ (8002258 <ili_init+0x2ec>)
 8001fb0:	f003 fcaa 	bl	8005908 <HAL_GPIO_Init>

	ILI_RD_IDLE;
 8001fb4:	4ba8      	ldr	r3, [pc, #672]	@ (8002258 <ili_init+0x2ec>)
 8001fb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fba:	611a      	str	r2, [r3, #16]
	ILI_WR_IDLE;
 8001fbc:	4ba6      	ldr	r3, [pc, #664]	@ (8002258 <ili_init+0x2ec>)
 8001fbe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fc2:	611a      	str	r2, [r3, #16]
	ILI_CS_ACTIVE;
 8001fc4:	4ba4      	ldr	r3, [pc, #656]	@ (8002258 <ili_init+0x2ec>)
 8001fc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fca:	615a      	str	r2, [r3, #20]

	ILI_RST_IDLE;
 8001fcc:	4ba2      	ldr	r3, [pc, #648]	@ (8002258 <ili_init+0x2ec>)
 8001fce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fd2:	611a      	str	r2, [r3, #16]
	ILI_RST_ACTIVE;
 8001fd4:	4ba0      	ldr	r3, [pc, #640]	@ (8002258 <ili_init+0x2ec>)
 8001fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fda:	615a      	str	r2, [r3, #20]
	ILI_RST_IDLE;
 8001fdc:	4b9e      	ldr	r3, [pc, #632]	@ (8002258 <ili_init+0x2ec>)
 8001fde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fe2:	611a      	str	r2, [r3, #16]

	HAL_Delay(10);
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f002 fcf5 	bl	80049d4 <HAL_Delay>
 8001fea:	2301      	movs	r3, #1
 8001fec:	74fb      	strb	r3, [r7, #19]
	ILI_DC_DAT;
 8001fee:	4b9a      	ldr	r3, [pc, #616]	@ (8002258 <ili_init+0x2ec>)
 8001ff0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ff4:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001ffc:	4b96      	ldr	r3, [pc, #600]	@ (8002258 <ili_init+0x2ec>)
 8001ffe:	611a      	str	r2, [r3, #16]
 8002000:	4b95      	ldr	r3, [pc, #596]	@ (8002258 <ili_init+0x2ec>)
 8002002:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002006:	615a      	str	r2, [r3, #20]
 8002008:	4b93      	ldr	r3, [pc, #588]	@ (8002258 <ili_init+0x2ec>)
 800200a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800200e:	611a      	str	r2, [r3, #16]
}
 8002010:	bf00      	nop
	// Approx 10ms delay at 128MHz clock
	//for (uint32_t i = 0; i < 2000000; i++)
	//	__asm__("nop");

	_ili_write_data_8bit(ILI_SWRESET);
	HAL_Delay(10);
 8002012:	200a      	movs	r0, #10
 8002014:	f002 fcde 	bl	80049d4 <HAL_Delay>
 8002018:	2328      	movs	r3, #40	@ 0x28
 800201a:	753b      	strb	r3, [r7, #20]
	ILI_DC_DAT;
 800201c:	4b8e      	ldr	r3, [pc, #568]	@ (8002258 <ili_init+0x2ec>)
 800201e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002022:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8002024:	7d3b      	ldrb	r3, [r7, #20]
 8002026:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800202a:	4b8b      	ldr	r3, [pc, #556]	@ (8002258 <ili_init+0x2ec>)
 800202c:	611a      	str	r2, [r3, #16]
 800202e:	4b8a      	ldr	r3, [pc, #552]	@ (8002258 <ili_init+0x2ec>)
 8002030:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002034:	615a      	str	r2, [r3, #20]
 8002036:	4b88      	ldr	r3, [pc, #544]	@ (8002258 <ili_init+0x2ec>)
 8002038:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800203c:	611a      	str	r2, [r3, #16]
}
 800203e:	bf00      	nop
 8002040:	23c0      	movs	r3, #192	@ 0xc0
 8002042:	757b      	strb	r3, [r7, #21]
	ILI_DC_CMD;
 8002044:	4b84      	ldr	r3, [pc, #528]	@ (8002258 <ili_init+0x2ec>)
 8002046:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800204a:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 800204c:	7d7b      	ldrb	r3, [r7, #21]
 800204e:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8002052:	4b81      	ldr	r3, [pc, #516]	@ (8002258 <ili_init+0x2ec>)
 8002054:	611a      	str	r2, [r3, #16]
 8002056:	4b80      	ldr	r3, [pc, #512]	@ (8002258 <ili_init+0x2ec>)
 8002058:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	4b7e      	ldr	r3, [pc, #504]	@ (8002258 <ili_init+0x2ec>)
 8002060:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002064:	611a      	str	r2, [r3, #16]
}
 8002066:	bf00      	nop
 8002068:	2323      	movs	r3, #35	@ 0x23
 800206a:	75bb      	strb	r3, [r7, #22]
	ILI_DC_DAT;
 800206c:	4b7a      	ldr	r3, [pc, #488]	@ (8002258 <ili_init+0x2ec>)
 800206e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002072:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8002074:	7dbb      	ldrb	r3, [r7, #22]
 8002076:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800207a:	4b77      	ldr	r3, [pc, #476]	@ (8002258 <ili_init+0x2ec>)
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	4b76      	ldr	r3, [pc, #472]	@ (8002258 <ili_init+0x2ec>)
 8002080:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	4b74      	ldr	r3, [pc, #464]	@ (8002258 <ili_init+0x2ec>)
 8002088:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800208c:	611a      	str	r2, [r3, #16]
}
 800208e:	bf00      	nop
 8002090:	23c1      	movs	r3, #193	@ 0xc1
 8002092:	75fb      	strb	r3, [r7, #23]
	ILI_DC_CMD;
 8002094:	4b70      	ldr	r3, [pc, #448]	@ (8002258 <ili_init+0x2ec>)
 8002096:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800209a:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80020a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002258 <ili_init+0x2ec>)
 80020a4:	611a      	str	r2, [r3, #16]
 80020a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002258 <ili_init+0x2ec>)
 80020a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002258 <ili_init+0x2ec>)
 80020b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020b4:	611a      	str	r2, [r3, #16]
}
 80020b6:	bf00      	nop
 80020b8:	2310      	movs	r3, #16
 80020ba:	763b      	strb	r3, [r7, #24]
	ILI_DC_DAT;
 80020bc:	4b66      	ldr	r3, [pc, #408]	@ (8002258 <ili_init+0x2ec>)
 80020be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020c2:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 80020c4:	7e3b      	ldrb	r3, [r7, #24]
 80020c6:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80020ca:	4b63      	ldr	r3, [pc, #396]	@ (8002258 <ili_init+0x2ec>)
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	4b62      	ldr	r3, [pc, #392]	@ (8002258 <ili_init+0x2ec>)
 80020d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020d4:	615a      	str	r2, [r3, #20]
 80020d6:	4b60      	ldr	r3, [pc, #384]	@ (8002258 <ili_init+0x2ec>)
 80020d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020dc:	611a      	str	r2, [r3, #16]
}
 80020de:	bf00      	nop
 80020e0:	23c5      	movs	r3, #197	@ 0xc5
 80020e2:	767b      	strb	r3, [r7, #25]
	ILI_DC_CMD;
 80020e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002258 <ili_init+0x2ec>)
 80020e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020ea:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 80020ec:	7e7b      	ldrb	r3, [r7, #25]
 80020ee:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80020f2:	4b59      	ldr	r3, [pc, #356]	@ (8002258 <ili_init+0x2ec>)
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <ili_init+0x2ec>)
 80020f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	4b56      	ldr	r3, [pc, #344]	@ (8002258 <ili_init+0x2ec>)
 8002100:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002104:	611a      	str	r2, [r3, #16]
}
 8002106:	bf00      	nop
 8002108:	f642 332b 	movw	r3, #11051	@ 0x2b2b
 800210c:	837b      	strh	r3, [r7, #26]
 * User need not call it
 */
__attribute__((always_inline)) static inline void _ili_write_data_16bit(uint16_t dat)
{
	//CS_ACTIVE;
	ILI_DC_DAT;
 800210e:	4b52      	ldr	r3, [pc, #328]	@ (8002258 <ili_init+0x2ec>)
 8002110:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002114:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)(dat >> 8));
 8002116:	8b7b      	ldrh	r3, [r7, #26]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	b29b      	uxth	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8002122:	4b4d      	ldr	r3, [pc, #308]	@ (8002258 <ili_init+0x2ec>)
 8002124:	611a      	str	r2, [r3, #16]
 8002126:	4b4c      	ldr	r3, [pc, #304]	@ (8002258 <ili_init+0x2ec>)
 8002128:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800212c:	615a      	str	r2, [r3, #20]
 800212e:	4b4a      	ldr	r3, [pc, #296]	@ (8002258 <ili_init+0x2ec>)
 8002130:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002134:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)dat);
 8002136:	8b7b      	ldrh	r3, [r7, #26]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800213e:	4b46      	ldr	r3, [pc, #280]	@ (8002258 <ili_init+0x2ec>)
 8002140:	611a      	str	r2, [r3, #16]
 8002142:	4b45      	ldr	r3, [pc, #276]	@ (8002258 <ili_init+0x2ec>)
 8002144:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002148:	615a      	str	r2, [r3, #20]
 800214a:	4b43      	ldr	r3, [pc, #268]	@ (8002258 <ili_init+0x2ec>)
 800214c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002150:	611a      	str	r2, [r3, #16]
}
 8002152:	bf00      	nop
 8002154:	23c7      	movs	r3, #199	@ 0xc7
 8002156:	777b      	strb	r3, [r7, #29]
	ILI_DC_CMD;
 8002158:	4b3f      	ldr	r3, [pc, #252]	@ (8002258 <ili_init+0x2ec>)
 800215a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800215e:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8002160:	7f7b      	ldrb	r3, [r7, #29]
 8002162:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8002166:	4b3c      	ldr	r3, [pc, #240]	@ (8002258 <ili_init+0x2ec>)
 8002168:	611a      	str	r2, [r3, #16]
 800216a:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <ili_init+0x2ec>)
 800216c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002170:	615a      	str	r2, [r3, #20]
 8002172:	4b39      	ldr	r3, [pc, #228]	@ (8002258 <ili_init+0x2ec>)
 8002174:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002178:	611a      	str	r2, [r3, #16]
}
 800217a:	bf00      	nop
 800217c:	23c0      	movs	r3, #192	@ 0xc0
 800217e:	77bb      	strb	r3, [r7, #30]
	ILI_DC_DAT;
 8002180:	4b35      	ldr	r3, [pc, #212]	@ (8002258 <ili_init+0x2ec>)
 8002182:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002186:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8002188:	7fbb      	ldrb	r3, [r7, #30]
 800218a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800218e:	4b32      	ldr	r3, [pc, #200]	@ (8002258 <ili_init+0x2ec>)
 8002190:	611a      	str	r2, [r3, #16]
 8002192:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <ili_init+0x2ec>)
 8002194:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002198:	615a      	str	r2, [r3, #20]
 800219a:	4b2f      	ldr	r3, [pc, #188]	@ (8002258 <ili_init+0x2ec>)
 800219c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021a0:	611a      	str	r2, [r3, #16]
}
 80021a2:	bf00      	nop
 80021a4:	2336      	movs	r3, #54	@ 0x36
 80021a6:	77fb      	strb	r3, [r7, #31]
	ILI_DC_CMD;
 80021a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <ili_init+0x2ec>)
 80021aa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021ae:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80021b6:	4b28      	ldr	r3, [pc, #160]	@ (8002258 <ili_init+0x2ec>)
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <ili_init+0x2ec>)
 80021bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021c0:	615a      	str	r2, [r3, #20]
 80021c2:	4b25      	ldr	r3, [pc, #148]	@ (8002258 <ili_init+0x2ec>)
 80021c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021c8:	611a      	str	r2, [r3, #16]
}
 80021ca:	bf00      	nop
 80021cc:	2388      	movs	r3, #136	@ 0x88
 80021ce:	f887 3020 	strb.w	r3, [r7, #32]
	ILI_DC_DAT;
 80021d2:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <ili_init+0x2ec>)
 80021d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021d8:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 80021da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021de:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80021e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <ili_init+0x2ec>)
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <ili_init+0x2ec>)
 80021e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021ec:	615a      	str	r2, [r3, #20]
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <ili_init+0x2ec>)
 80021f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021f4:	611a      	str	r2, [r3, #16]
}
 80021f6:	bf00      	nop
 80021f8:	233a      	movs	r3, #58	@ 0x3a
 80021fa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	ILI_DC_CMD;
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <ili_init+0x2ec>)
 8002200:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002204:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8002206:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800220a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800220e:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <ili_init+0x2ec>)
 8002210:	611a      	str	r2, [r3, #16]
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <ili_init+0x2ec>)
 8002214:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002218:	615a      	str	r2, [r3, #20]
 800221a:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <ili_init+0x2ec>)
 800221c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002220:	611a      	str	r2, [r3, #16]
}
 8002222:	bf00      	nop
 8002224:	2355      	movs	r3, #85	@ 0x55
 8002226:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	ILI_DC_DAT;
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <ili_init+0x2ec>)
 800222c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002230:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8002232:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002236:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800223a:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <ili_init+0x2ec>)
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <ili_init+0x2ec>)
 8002240:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002244:	615a      	str	r2, [r3, #20]
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <ili_init+0x2ec>)
 8002248:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800224c:	611a      	str	r2, [r3, #16]
}
 800224e:	bf00      	nop
 8002250:	23b1      	movs	r3, #177	@ 0xb1
 8002252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002256:	e001      	b.n	800225c <ili_init+0x2f0>
 8002258:	40010c00 	.word	0x40010c00
	ILI_DC_CMD;
 800225c:	4b7d      	ldr	r3, [pc, #500]	@ (8002454 <ili_init+0x4e8>)
 800225e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002262:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8002264:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002268:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800226c:	4b79      	ldr	r3, [pc, #484]	@ (8002454 <ili_init+0x4e8>)
 800226e:	611a      	str	r2, [r3, #16]
 8002270:	4b78      	ldr	r3, [pc, #480]	@ (8002454 <ili_init+0x4e8>)
 8002272:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002276:	615a      	str	r2, [r3, #20]
 8002278:	4b76      	ldr	r3, [pc, #472]	@ (8002454 <ili_init+0x4e8>)
 800227a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800227e:	611a      	str	r2, [r3, #16]
}
 8002280:	bf00      	nop
 8002282:	231b      	movs	r3, #27
 8002284:	84bb      	strh	r3, [r7, #36]	@ 0x24
	ILI_DC_DAT;
 8002286:	4b73      	ldr	r3, [pc, #460]	@ (8002454 <ili_init+0x4e8>)
 8002288:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800228c:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)(dat >> 8));
 800228e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	b29b      	uxth	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800229a:	4b6e      	ldr	r3, [pc, #440]	@ (8002454 <ili_init+0x4e8>)
 800229c:	611a      	str	r2, [r3, #16]
 800229e:	4b6d      	ldr	r3, [pc, #436]	@ (8002454 <ili_init+0x4e8>)
 80022a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022a4:	615a      	str	r2, [r3, #20]
 80022a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002454 <ili_init+0x4e8>)
 80022a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022ac:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)dat);
 80022ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80022b6:	4b67      	ldr	r3, [pc, #412]	@ (8002454 <ili_init+0x4e8>)
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	4b66      	ldr	r3, [pc, #408]	@ (8002454 <ili_init+0x4e8>)
 80022bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022c0:	615a      	str	r2, [r3, #20]
 80022c2:	4b64      	ldr	r3, [pc, #400]	@ (8002454 <ili_init+0x4e8>)
 80022c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022c8:	611a      	str	r2, [r3, #16]
}
 80022ca:	bf00      	nop
 80022cc:	23b7      	movs	r3, #183	@ 0xb7
 80022ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	ILI_DC_CMD;
 80022d2:	4b60      	ldr	r3, [pc, #384]	@ (8002454 <ili_init+0x4e8>)
 80022d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022d8:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 80022da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022de:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80022e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002454 <ili_init+0x4e8>)
 80022e4:	611a      	str	r2, [r3, #16]
 80022e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002454 <ili_init+0x4e8>)
 80022e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022ec:	615a      	str	r2, [r3, #20]
 80022ee:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <ili_init+0x4e8>)
 80022f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022f4:	611a      	str	r2, [r3, #16]
}
 80022f6:	bf00      	nop
 80022f8:	2307      	movs	r3, #7
 80022fa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	ILI_DC_DAT;
 80022fe:	4b55      	ldr	r3, [pc, #340]	@ (8002454 <ili_init+0x4e8>)
 8002300:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002304:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT(dat);
 8002306:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800230a:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800230e:	4b51      	ldr	r3, [pc, #324]	@ (8002454 <ili_init+0x4e8>)
 8002310:	611a      	str	r2, [r3, #16]
 8002312:	4b50      	ldr	r3, [pc, #320]	@ (8002454 <ili_init+0x4e8>)
 8002314:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002318:	615a      	str	r2, [r3, #20]
 800231a:	4b4e      	ldr	r3, [pc, #312]	@ (8002454 <ili_init+0x4e8>)
 800231c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002320:	611a      	str	r2, [r3, #16]
}
 8002322:	bf00      	nop
 8002324:	23b6      	movs	r3, #182	@ 0xb6
 8002326:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	ILI_DC_CMD;
 800232a:	4b4a      	ldr	r3, [pc, #296]	@ (8002454 <ili_init+0x4e8>)
 800232c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002330:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8002332:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002336:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800233a:	4b46      	ldr	r3, [pc, #280]	@ (8002454 <ili_init+0x4e8>)
 800233c:	611a      	str	r2, [r3, #16]
 800233e:	4b45      	ldr	r3, [pc, #276]	@ (8002454 <ili_init+0x4e8>)
 8002340:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002344:	615a      	str	r2, [r3, #20]
 8002346:	4b43      	ldr	r3, [pc, #268]	@ (8002454 <ili_init+0x4e8>)
 8002348:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800234c:	611a      	str	r2, [r3, #16]
}
 800234e:	bf00      	nop
 8002350:	f640 2382 	movw	r3, #2690	@ 0xa82
 8002354:	857b      	strh	r3, [r7, #42]	@ 0x2a
	ILI_DC_DAT;
 8002356:	4b3f      	ldr	r3, [pc, #252]	@ (8002454 <ili_init+0x4e8>)
 8002358:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800235c:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)(dat >> 8));
 800235e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	b29b      	uxth	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 800236a:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <ili_init+0x4e8>)
 800236c:	611a      	str	r2, [r3, #16]
 800236e:	4b39      	ldr	r3, [pc, #228]	@ (8002454 <ili_init+0x4e8>)
 8002370:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002374:	615a      	str	r2, [r3, #20]
 8002376:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <ili_init+0x4e8>)
 8002378:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800237c:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)dat);
 800237e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8002386:	4b33      	ldr	r3, [pc, #204]	@ (8002454 <ili_init+0x4e8>)
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	4b32      	ldr	r3, [pc, #200]	@ (8002454 <ili_init+0x4e8>)
 800238c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002390:	615a      	str	r2, [r3, #20]
 8002392:	4b30      	ldr	r3, [pc, #192]	@ (8002454 <ili_init+0x4e8>)
 8002394:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002398:	611a      	str	r2, [r3, #16]
}
 800239a:	bf00      	nop
 800239c:	f44f 531c 	mov.w	r3, #9984	@ 0x2700
 80023a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	ILI_DC_DAT;
 80023a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002454 <ili_init+0x4e8>)
 80023a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023a8:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)(dat >> 8));
 80023aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80023b6:	4b27      	ldr	r3, [pc, #156]	@ (8002454 <ili_init+0x4e8>)
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	4b26      	ldr	r3, [pc, #152]	@ (8002454 <ili_init+0x4e8>)
 80023bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023c0:	615a      	str	r2, [r3, #20]
 80023c2:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <ili_init+0x4e8>)
 80023c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023c8:	611a      	str	r2, [r3, #16]
	ILI_WRITE_8BIT((uint8_t)dat);
 80023ca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80023d2:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <ili_init+0x4e8>)
 80023d4:	611a      	str	r2, [r3, #16]
 80023d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <ili_init+0x4e8>)
 80023d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023dc:	615a      	str	r2, [r3, #20]
 80023de:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <ili_init+0x4e8>)
 80023e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023e4:	611a      	str	r2, [r3, #16]
}
 80023e6:	bf00      	nop
 80023e8:	2311      	movs	r3, #17
 80023ea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	ILI_DC_CMD;
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <ili_init+0x4e8>)
 80023f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023f4:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 80023f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023fa:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <ili_init+0x4e8>)
 8002400:	611a      	str	r2, [r3, #16]
 8002402:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <ili_init+0x4e8>)
 8002404:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002408:	615a      	str	r2, [r3, #20]
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <ili_init+0x4e8>)
 800240c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002410:	611a      	str	r2, [r3, #16]
}
 8002412:	bf00      	nop
	_ili_write_data_8bit(0x31);
	_ili_write_data_8bit(0x36);
	_ili_write_data_8bit(0x0F);
*/
	_ili_write_command_8bit(ILI_SLPOUT);    //Exit Sleep
	HAL_Delay(50);
 8002414:	2032      	movs	r0, #50	@ 0x32
 8002416:	f002 fadd 	bl	80049d4 <HAL_Delay>
 800241a:	2329      	movs	r3, #41	@ 0x29
 800241c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	ILI_DC_CMD;
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <ili_init+0x4e8>)
 8002422:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002426:	615a      	str	r2, [r3, #20]
	ILI_WRITE_8BIT(cmd);
 8002428:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800242c:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8002430:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <ili_init+0x4e8>)
 8002432:	611a      	str	r2, [r3, #16]
 8002434:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <ili_init+0x4e8>)
 8002436:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800243a:	615a      	str	r2, [r3, #20]
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <ili_init+0x4e8>)
 800243e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002442:	611a      	str	r2, [r3, #16]
}
 8002444:	bf00      	nop
	//_ili_write_data_8bit(0x80);
	//delay 150ms if display output is inaccurate

	_ili_write_command_8bit(ILI_DISPON);    //Display on
	HAL_Delay(100);
 8002446:	2064      	movs	r0, #100	@ 0x64
 8002448:	f002 fac4 	bl	80049d4 <HAL_Delay>
	//_ili_write_data_8bit(0x80);
	//_ili_write_data_8bit(0x00);
	//delay 150ms if display output is inaccurate
	//ILI_CS_IDLE;
}
 800244c:	bf00      	nop
 800244e:	3730      	adds	r7, #48	@ 0x30
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40010c00 	.word	0x40010c00

08002458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800245c:	f002 fa58 	bl	8004910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002460:	f000 f968 	bl	8002734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002464:	f7fe feae 	bl	80011c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002468:	f7fe fe8e 	bl	8001188 <MX_DMA_Init>
  MX_ADC1_Init();
 800246c:	f7fe fdba 	bl	8000fe4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002470:	f002 f98e 	bl	8004790 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */

  ili_init();
 8002474:	f7ff fd7a 	bl	8001f6c <ili_init>
  ili_rotate_display(1);
 8002478:	2001      	movs	r0, #1
 800247a:	f7ff fc95 	bl	8001da8 <ili_rotate_display>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800247e:	4884      	ldr	r0, [pc, #528]	@ (8002690 <main+0x238>)
 8002480:	f002 fe98 	bl	80051b4 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002484:	213c      	movs	r1, #60	@ 0x3c
 8002486:	4883      	ldr	r0, [pc, #524]	@ (8002694 <main+0x23c>)
 8002488:	f004 f9fc 	bl	8006884 <HAL_TIM_Encoder_Start_IT>

  dvm_set.byte = 0b01001111;
 800248c:	4b82      	ldr	r3, [pc, #520]	@ (8002698 <main+0x240>)
 800248e:	224f      	movs	r2, #79	@ 0x4f
 8002490:	701a      	strb	r2, [r3, #0]
  r_count = 0;
 8002492:	4b82      	ldr	r3, [pc, #520]	@ (800269c <main+0x244>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
  dvm_count = 0;
 8002498:	4b81      	ldr	r3, [pc, #516]	@ (80026a0 <main+0x248>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
  limite_l = 0;
 800249e:	4b81      	ldr	r3, [pc, #516]	@ (80026a4 <main+0x24c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	801a      	strh	r2, [r3, #0]
  limite_h = 0;
 80024a4:	4b80      	ldr	r3, [pc, #512]	@ (80026a8 <main+0x250>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	801a      	strh	r2, [r3, #0]
  redraw = false;
 80024aa:	4b80      	ldr	r3, [pc, #512]	@ (80026ac <main+0x254>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
  box_sel = 0;
 80024b0:	4b7f      	ldr	r3, [pc, #508]	@ (80026b0 <main+0x258>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
  _box_sel = 0;
 80024b6:	4b7f      	ldr	r3, [pc, #508]	@ (80026b4 <main+0x25c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
  sbox_sel = 0;
 80024bc:	4b7e      	ldr	r3, [pc, #504]	@ (80026b8 <main+0x260>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
  _sbox_sel = 0;
 80024c2:	4b7e      	ldr	r3, [pc, #504]	@ (80026bc <main+0x264>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
  ItemSelec = false;
 80024c8:	4b7d      	ldr	r3, [pc, #500]	@ (80026c0 <main+0x268>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
  set_sel = 0;
 80024ce:	4b7d      	ldr	r3, [pc, #500]	@ (80026c4 <main+0x26c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
  _set_sel = 0;
 80024d4:	4b7c      	ldr	r3, [pc, #496]	@ (80026c8 <main+0x270>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
  rastro = 1;
 80024da:	4b7c      	ldr	r3, [pc, #496]	@ (80026cc <main+0x274>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
  MPS = 2; // Modo cantidad de Muestras por segundo: 0= 1, 1 = 3, 2 = 5, 3 = 10
 80024e0:	4b7b      	ldr	r3, [pc, #492]	@ (80026d0 <main+0x278>)
 80024e2:	2202      	movs	r2, #2
 80024e4:	701a      	strb	r2, [r3, #0]
  ms_count = ms_count_set[MPS];
 80024e6:	4b7a      	ldr	r3, [pc, #488]	@ (80026d0 <main+0x278>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b79      	ldr	r3, [pc, #484]	@ (80026d4 <main+0x27c>)
 80024ee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80024f2:	4b79      	ldr	r3, [pc, #484]	@ (80026d8 <main+0x280>)
 80024f4:	801a      	strh	r2, [r3, #0]
  msTick = 0;
 80024f6:	4b79      	ldr	r3, [pc, #484]	@ (80026dc <main+0x284>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	801a      	strh	r2, [r3, #0]
  ms_count_ok = false;
 80024fc:	4b78      	ldr	r3, [pc, #480]	@ (80026e0 <main+0x288>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
  lapso= 0; //Longitud de registro: 0 = 40, 1 = 80, 2 = 160
 8002502:	4b78      	ldr	r3, [pc, #480]	@ (80026e4 <main+0x28c>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
  media_set = 0; //Muestra media: 0 = 3, 1 = 4, 2 = 5
 8002508:	4b77      	ldr	r3, [pc, #476]	@ (80026e8 <main+0x290>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
  submenu = false;
 800250e:	4b77      	ldr	r3, [pc, #476]	@ (80026ec <main+0x294>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
  item_set = false;
 8002514:	4b76      	ldr	r3, [pc, #472]	@ (80026f0 <main+0x298>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
  key_delay_count = 0;
 800251a:	4b76      	ldr	r3, [pc, #472]	@ (80026f4 <main+0x29c>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
  key_delay_ok = true;
 8002520:	4b75      	ldr	r3, [pc, #468]	@ (80026f8 <main+0x2a0>)
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
  Run = false;
 8002526:	4b75      	ldr	r3, [pc, #468]	@ (80026fc <main+0x2a4>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
  Beep_On = false;
 800252c:	4b74      	ldr	r3, [pc, #464]	@ (8002700 <main+0x2a8>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
  tim_count = 0;
 8002532:	4b74      	ldr	r3, [pc, #464]	@ (8002704 <main+0x2ac>)
 8002534:	2200      	movs	r2, #0
 8002536:	801a      	strh	r2, [r3, #0]
  _tim_count = 0;
 8002538:	4b73      	ldr	r3, [pc, #460]	@ (8002708 <main+0x2b0>)
 800253a:	2200      	movs	r2, #0
 800253c:	801a      	strh	r2, [r3, #0]

  DrawBoxes();
 800253e:	f000 fa45 	bl	80029cc <DrawBoxes>
  DrawGrilla();
 8002542:	f000 fb21 	bl	8002b88 <DrawGrilla>
  DrawRangoGrilla();
 8002546:	f000 fca7 	bl	8002e98 <DrawRangoGrilla>
  DrawConfig();
 800254a:	f000 fbff 	bl	8002d4c <DrawConfig>
  SwapBox(box_sel, 1);
 800254e:	4b58      	ldr	r3, [pc, #352]	@ (80026b0 <main+0x258>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2101      	movs	r1, #1
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fae5 	bl	8002b24 <SwapBox>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	if(key_eval_ok)
 800255a:	4b6c      	ldr	r3, [pc, #432]	@ (800270c <main+0x2b4>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d020      	beq.n	80025a4 <main+0x14c>
	{
		if(Start_Pres)
 8002562:	4b6b      	ldr	r3, [pc, #428]	@ (8002710 <main+0x2b8>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <main+0x128>
		{
			Start_Pres_Ok = ((GPIOA->IDR & START_Pin) >> 8) == 0;
 800256a:	4b6a      	ldr	r3, [pc, #424]	@ (8002714 <main+0x2bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2da      	uxtb	r2, r3
 800257c:	4b66      	ldr	r3, [pc, #408]	@ (8002718 <main+0x2c0>)
 800257e:	701a      	strb	r2, [r3, #0]
		}

		if(Btn_Pres)
 8002580:	4b66      	ldr	r3, [pc, #408]	@ (800271c <main+0x2c4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <main+0x146>
		{
			Btn_Pres_Ok = ((GPIOA->IDR & BOTON_Pin) >> 5) == 0;
 8002588:	4b62      	ldr	r3, [pc, #392]	@ (8002714 <main+0x2bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b61      	ldr	r3, [pc, #388]	@ (8002720 <main+0x2c8>)
 800259c:	701a      	strb	r2, [r3, #0]
		}
		key_eval_ok = false;
 800259e:	4b5b      	ldr	r3, [pc, #364]	@ (800270c <main+0x2b4>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
	}

	if (Start_Pres_Ok)
 80025a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002718 <main+0x2c0>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d024      	beq.n	80025f6 <main+0x19e>
	{
		Run = !Run;
 80025ac:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <main+0x2a4>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f083 0301 	eor.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <main+0x2a4>)
 80025c8:	701a      	strb	r2, [r3, #0]
		Beep_On = true;
 80025ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <main+0x2a8>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
		if (Run)
 80025d0:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <main+0x2a4>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <main+0x18a>
		{
			GPIOC->BRR = LED_Pin;
 80025d8:	4b52      	ldr	r3, [pc, #328]	@ (8002724 <main+0x2cc>)
 80025da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025de:	615a      	str	r2, [r3, #20]
 80025e0:	e003      	b.n	80025ea <main+0x192>
			//GPIOA->BRR = LED_START_Pin;
		}
		else
		{
			GPIOC->BSRR = LED_Pin;
 80025e2:	4b50      	ldr	r3, [pc, #320]	@ (8002724 <main+0x2cc>)
 80025e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e8:	611a      	str	r2, [r3, #16]
			//GPIOA->BSRR = LED_START_Pin;
		}
		Start_Pres = false;
 80025ea:	4b49      	ldr	r3, [pc, #292]	@ (8002710 <main+0x2b8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
		Start_Pres_Ok = false;
 80025f0:	4b49      	ldr	r3, [pc, #292]	@ (8002718 <main+0x2c0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
	}

	if (Btn_Pres_Ok || Enc_Inc || Enc_Dec)
 80025f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002720 <main+0x2c8>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d107      	bne.n	800260e <main+0x1b6>
 80025fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002728 <main+0x2d0>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <main+0x1b6>
 8002606:	4b49      	ldr	r3, [pc, #292]	@ (800272c <main+0x2d4>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01e      	beq.n	800264c <main+0x1f4>
	{
		Beep_On = true;
 800260e:	4b3c      	ldr	r3, [pc, #240]	@ (8002700 <main+0x2a8>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
		if (!submenu && !item_set) EncoderMenu();
 8002614:	4b35      	ldr	r3, [pc, #212]	@ (80026ec <main+0x294>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <main+0x1dc>
 8002622:	4b33      	ldr	r3, [pc, #204]	@ (80026f0 <main+0x298>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	f083 0301 	eor.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <main+0x1dc>
 8002630:	f001 fb08 	bl	8003c44 <EncoderMenu>
	 	if (submenu) EncoderSubMenu();
 8002634:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <main+0x294>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <main+0x1e8>
 800263c:	f001 fc1a 	bl	8003e74 <EncoderSubMenu>
	 	if (item_set) EncoderItemSet();
 8002640:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <main+0x298>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <main+0x1f4>
 8002648:	f001 fca0 	bl	8003f8c <EncoderItemSet>
	}

	if (Run)
 800264c:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <main+0x2a4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d082      	beq.n	800255a <main+0x102>
	{
		if ((dvm_set.byte & 0x0F) && (ms_count_ok))
 8002654:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <main+0x240>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <main+0x214>
 8002660:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <main+0x288>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <main+0x214>
	 	{
			Conversiones();
 8002668:	f001 fe16 	bl	8004298 <Conversiones>
	 	}
	 	if (r_count > total_conv[lapso])
 800266c:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <main+0x28c>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b2f      	ldr	r3, [pc, #188]	@ (8002730 <main+0x2d8>)
 8002674:	5c9a      	ldrb	r2, [r3, r2]
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <main+0x244>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	f4bf af6d 	bcs.w	800255a <main+0x102>
	 	{
	 		r_count = 0;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <main+0x244>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
	 		DrawGrilla();
 8002686:	f000 fa7f 	bl	8002b88 <DrawGrilla>
	 		DrawTrazosBack();
 800268a:	f000 ffeb 	bl	8003664 <DrawTrazosBack>
	if(key_eval_ok)
 800268e:	e764      	b.n	800255a <main+0x102>
 8002690:	20000224 	.word	0x20000224
 8002694:	20000630 	.word	0x20000630
 8002698:	20000298 	.word	0x20000298
 800269c:	200005f8 	.word	0x200005f8
 80026a0:	200005f9 	.word	0x200005f9
 80026a4:	20000604 	.word	0x20000604
 80026a8:	20000606 	.word	0x20000606
 80026ac:	20000628 	.word	0x20000628
 80026b0:	200005f0 	.word	0x200005f0
 80026b4:	200005f1 	.word	0x200005f1
 80026b8:	200005f2 	.word	0x200005f2
 80026bc:	200005f3 	.word	0x200005f3
 80026c0:	2000061a 	.word	0x2000061a
 80026c4:	200005f6 	.word	0x200005f6
 80026c8:	200005f7 	.word	0x200005f7
 80026cc:	20000622 	.word	0x20000622
 80026d0:	200005fc 	.word	0x200005fc
 80026d4:	2000001c 	.word	0x2000001c
 80026d8:	20000608 	.word	0x20000608
 80026dc:	2000060a 	.word	0x2000060a
 80026e0:	20000625 	.word	0x20000625
 80026e4:	200005fd 	.word	0x200005fd
 80026e8:	20000601 	.word	0x20000601
 80026ec:	20000623 	.word	0x20000623
 80026f0:	20000624 	.word	0x20000624
 80026f4:	200005fe 	.word	0x200005fe
 80026f8:	20000626 	.word	0x20000626
 80026fc:	20000620 	.word	0x20000620
 8002700:	20000621 	.word	0x20000621
 8002704:	20000614 	.word	0x20000614
 8002708:	20000616 	.word	0x20000616
 800270c:	20000627 	.word	0x20000627
 8002710:	2000061e 	.word	0x2000061e
 8002714:	40010800 	.word	0x40010800
 8002718:	2000061f 	.word	0x2000061f
 800271c:	2000061c 	.word	0x2000061c
 8002720:	2000061d 	.word	0x2000061d
 8002724:	40011000 	.word	0x40011000
 8002728:	20000618 	.word	0x20000618
 800272c:	20000619 	.word	0x20000619
 8002730:	20000004 	.word	0x20000004

08002734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b094      	sub	sp, #80	@ 0x50
 8002738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800273e:	2228      	movs	r2, #40	@ 0x28
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f005 f8f9 	bl	800793a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002764:	2301      	movs	r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002772:	2301      	movs	r3, #1
 8002774:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002776:	2302      	movs	r3, #2
 8002778:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800277a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800277e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002780:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800278a:	4618      	mov	r0, r3
 800278c:	f003 fa70 	bl	8005c70 <HAL_RCC_OscConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002796:	f001 feab 	bl	80044f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800279a:	230f      	movs	r3, #15
 800279c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2102      	movs	r1, #2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fcdc 	bl	8006174 <HAL_RCC_ClockConfig>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80027c2:	f001 fe95 	bl	80044f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027c6:	2302      	movs	r3, #2
 80027c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80027ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 fe48 	bl	8006468 <HAL_RCCEx_PeriphCLKConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80027de:	f001 fe87 	bl	80044f0 <Error_Handler>
  }
}
 80027e2:	bf00      	nop
 80027e4:	3750      	adds	r7, #80	@ 0x50
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BOTON_Pin) //Botón pulsado
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d113      	bne.n	8002824 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if(key_delay_ok)
 80027fc:	4b17      	ldr	r3, [pc, #92]	@ (800285c <HAL_GPIO_EXTI_Callback+0x70>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d026      	beq.n	8002852 <HAL_GPIO_EXTI_Callback+0x66>
		{
			key_delay_count = 0;
 8002804:	4b16      	ldr	r3, [pc, #88]	@ (8002860 <HAL_GPIO_EXTI_Callback+0x74>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
			key_eval_count = 0;
 800280a:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <HAL_GPIO_EXTI_Callback+0x78>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
			key_delay_ok = false;;
 8002810:	4b12      	ldr	r3, [pc, #72]	@ (800285c <HAL_GPIO_EXTI_Callback+0x70>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
			key_eval_ok = false;
 8002816:	4b14      	ldr	r3, [pc, #80]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
			Btn_Pres = true;
 800281c:	4b13      	ldr	r3, [pc, #76]	@ (800286c <HAL_GPIO_EXTI_Callback+0x80>)
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
			key_delay_ok = false;;
			key_eval_ok = false;
			Start_Pres = true;
		}
	}
}
 8002822:	e016      	b.n	8002852 <HAL_GPIO_EXTI_Callback+0x66>
	else if (GPIO_Pin == START_Pin) //Botón pulsado
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800282a:	d112      	bne.n	8002852 <HAL_GPIO_EXTI_Callback+0x66>
		if(key_delay_ok)
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <HAL_GPIO_EXTI_Callback+0x70>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00e      	beq.n	8002852 <HAL_GPIO_EXTI_Callback+0x66>
			key_delay_count = 0;
 8002834:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <HAL_GPIO_EXTI_Callback+0x74>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
			key_eval_count = 0;
 800283a:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <HAL_GPIO_EXTI_Callback+0x78>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
			key_delay_ok = false;;
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_GPIO_EXTI_Callback+0x70>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
			key_eval_ok = false;
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
			Start_Pres = true;
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <HAL_GPIO_EXTI_Callback+0x84>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20000626 	.word	0x20000626
 8002860:	200005fe 	.word	0x200005fe
 8002864:	200005ff 	.word	0x200005ff
 8002868:	20000627 	.word	0x20000627
 800286c:	2000061c 	.word	0x2000061c
 8002870:	2000061e 	.word	0x2000061e

08002874 <EncoderEvent>:

void EncoderEvent(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
	int32_t tmp;
	tmp = __HAL_TIM_GET_COUNTER(&htim3);
 800287a:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <EncoderEvent+0x60>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	607b      	str	r3, [r7, #4]
	tim_count = (int16_t)tmp/4;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	b21b      	sxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	da00      	bge.n	800288c <EncoderEvent+0x18>
 800288a:	3303      	adds	r3, #3
 800288c:	109b      	asrs	r3, r3, #2
 800288e:	b21a      	sxth	r2, r3
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <EncoderEvent+0x64>)
 8002892:	801a      	strh	r2, [r3, #0]
	if (tim_count < _tim_count) Enc_Dec = true;
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <EncoderEvent+0x64>)
 8002896:	f9b3 2000 	ldrsh.w	r2, [r3]
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <EncoderEvent+0x68>)
 800289c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	da02      	bge.n	80028aa <EncoderEvent+0x36>
 80028a4:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <EncoderEvent+0x6c>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
	if (tim_count > _tim_count) Enc_Inc = true;
 80028aa:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <EncoderEvent+0x64>)
 80028ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <EncoderEvent+0x68>)
 80028b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	dd02      	ble.n	80028c0 <EncoderEvent+0x4c>
 80028ba:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <EncoderEvent+0x70>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
	_tim_count = tim_count;
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <EncoderEvent+0x64>)
 80028c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028c6:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <EncoderEvent+0x68>)
 80028c8:	801a      	strh	r2, [r3, #0]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000630 	.word	0x20000630
 80028d8:	20000614 	.word	0x20000614
 80028dc:	20000616 	.word	0x20000616
 80028e0:	20000619 	.word	0x20000619
 80028e4:	20000618 	.word	0x20000618

080028e8 <SysTick_Counter>:


void SysTick_Counter(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	msTick++;
 80028ec:	4b2c      	ldr	r3, [pc, #176]	@ (80029a0 <SysTick_Counter+0xb8>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <SysTick_Counter+0xb8>)
 80028f6:	801a      	strh	r2, [r3, #0]
	key_delay_count++;
 80028f8:	4b2a      	ldr	r3, [pc, #168]	@ (80029a4 <SysTick_Counter+0xbc>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b28      	ldr	r3, [pc, #160]	@ (80029a4 <SysTick_Counter+0xbc>)
 8002902:	701a      	strb	r2, [r3, #0]
	key_eval_count++;
 8002904:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <SysTick_Counter+0xc0>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b26      	ldr	r3, [pc, #152]	@ (80029a8 <SysTick_Counter+0xc0>)
 800290e:	701a      	strb	r2, [r3, #0]
	if (msTick >= ms_count)
 8002910:	4b23      	ldr	r3, [pc, #140]	@ (80029a0 <SysTick_Counter+0xb8>)
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	4b25      	ldr	r3, [pc, #148]	@ (80029ac <SysTick_Counter+0xc4>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d305      	bcc.n	8002928 <SysTick_Counter+0x40>
	{
		ms_count_ok = true;
 800291c:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <SysTick_Counter+0xc8>)
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
		msTick = 0;
 8002922:	4b1f      	ldr	r3, [pc, #124]	@ (80029a0 <SysTick_Counter+0xb8>)
 8002924:	2200      	movs	r2, #0
 8002926:	801a      	strh	r2, [r3, #0]
	}
	if (key_delay_count >= 100) //Período en mSeg. mínimo entre pulsaciones
 8002928:	4b1e      	ldr	r3, [pc, #120]	@ (80029a4 <SysTick_Counter+0xbc>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b63      	cmp	r3, #99	@ 0x63
 800292e:	d905      	bls.n	800293c <SysTick_Counter+0x54>
	{
		key_delay_ok = true;
 8002930:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <SysTick_Counter+0xcc>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
		key_delay_count = 0;
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <SysTick_Counter+0xbc>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
	}
	if(key_eval_count >= 60) //Período en mSeg. hasta validar pulsación
 800293c:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <SysTick_Counter+0xc0>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b3b      	cmp	r3, #59	@ 0x3b
 8002942:	d905      	bls.n	8002950 <SysTick_Counter+0x68>
	{
		key_eval_ok = true;
 8002944:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <SysTick_Counter+0xd0>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
		key_eval_count = 0;
 800294a:	4b17      	ldr	r3, [pc, #92]	@ (80029a8 <SysTick_Counter+0xc0>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
	}
	if(Beep_On)
 8002950:	4b1a      	ldr	r3, [pc, #104]	@ (80029bc <SysTick_Counter+0xd4>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d018      	beq.n	800298a <SysTick_Counter+0xa2>
	{
		beep_count++;
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <SysTick_Counter+0xd8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <SysTick_Counter+0xd8>)
 8002962:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR^=BEEP_Pin;
 8002964:	4b17      	ldr	r3, [pc, #92]	@ (80029c4 <SysTick_Counter+0xdc>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a16      	ldr	r2, [pc, #88]	@ (80029c4 <SysTick_Counter+0xdc>)
 800296a:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 800296e:	60d3      	str	r3, [r2, #12]
		if(beep_count > beep_corto)
 8002970:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <SysTick_Counter+0xd8>)
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <SysTick_Counter+0xe0>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d90c      	bls.n	8002996 <SysTick_Counter+0xae>
		{
			Beep_On = false;
 800297c:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <SysTick_Counter+0xd4>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
			beep_count = 0;
 8002982:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <SysTick_Counter+0xd8>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		GPIOA->ODR &= ~BEEP_Pin;
	}
}
 8002988:	e005      	b.n	8002996 <SysTick_Counter+0xae>
		GPIOA->ODR &= ~BEEP_Pin;
 800298a:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <SysTick_Counter+0xdc>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a0d      	ldr	r2, [pc, #52]	@ (80029c4 <SysTick_Counter+0xdc>)
 8002990:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002994:	60d3      	str	r3, [r2, #12]
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	2000060a 	.word	0x2000060a
 80029a4:	200005fe 	.word	0x200005fe
 80029a8:	200005ff 	.word	0x200005ff
 80029ac:	20000608 	.word	0x20000608
 80029b0:	20000625 	.word	0x20000625
 80029b4:	20000626 	.word	0x20000626
 80029b8:	20000627 	.word	0x20000627
 80029bc:	20000621 	.word	0x20000621
 80029c0:	20000600 	.word	0x20000600
 80029c4:	40010800 	.word	0x40010800
 80029c8:	20000013 	.word	0x20000013

080029cc <DrawBoxes>:

// Dibuja las cajas (boxes) y muestra las etiquetas
void DrawBoxes(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af02      	add	r7, sp, #8
	uint16_t x_pos = 0, y_pos = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	80fb      	strh	r3, [r7, #6]
 80029d6:	2300      	movs	r3, #0
 80029d8:	807b      	strh	r3, [r7, #2]
	ili_fill_screen(ILI_BLACK);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7ff f88e 	bl	8001afc <ili_fill_screen>
	ili_draw_rectangle(0, 0, 196, 150, ILI_ORANGE);
 80029e0:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	2396      	movs	r3, #150	@ 0x96
 80029e8:	22c4      	movs	r2, #196	@ 0xc4
 80029ea:	2100      	movs	r1, #0
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7ff f8ab 	bl	8001b48 <ili_draw_rectangle>

	for (uint8_t canal = 0; canal < 4; canal++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	717b      	strb	r3, [r7, #5]
 80029f6:	e032      	b.n	8002a5e <DrawBoxes+0x92>
	{
		y_pos = 38 * canal;
 80029f8:	797b      	ldrb	r3, [r7, #5]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	00d2      	lsls	r2, r2, #3
 8002a00:	441a      	add	r2, r3
 8002a02:	0052      	lsls	r2, r2, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	807b      	strh	r3, [r7, #2]
		ili_draw_rectangle(198, y_pos, 121, 36, ILI_ORANGE);
 8002a0a:	8879      	ldrh	r1, [r7, #2]
 8002a0c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	2324      	movs	r3, #36	@ 0x24
 8002a14:	2279      	movs	r2, #121	@ 0x79
 8002a16:	20c6      	movs	r0, #198	@ 0xc6
 8002a18:	f7ff f896 	bl	8001b48 <ili_draw_rectangle>
		y_pos +=  3;
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	3303      	adds	r3, #3
 8002a20:	807b      	strh	r3, [r7, #2]
		ili_fill_rect_fast(201, y_pos, 4, 30, ch_color[canal]); //marca color de canal
 8002a22:	797b      	ldrb	r3, [r7, #5]
 8002a24:	4a39      	ldr	r2, [pc, #228]	@ (8002b0c <DrawBoxes+0x140>)
 8002a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a2a:	8879      	ldrh	r1, [r7, #2]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	231e      	movs	r3, #30
 8002a30:	2204      	movs	r2, #4
 8002a32:	20c9      	movs	r0, #201	@ 0xc9
 8002a34:	f7ff f834 	bl	8001aa0 <ili_fill_rect_fast>
		y_pos +=  3;
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	3303      	adds	r3, #3
 8002a3c:	807b      	strh	r3, [r7, #2]
		ili_draw_string_withbg(230, y_pos, " ACTIVO", ch_color[canal], ILI_BLACK, &font_fixedsys_mono_16);
 8002a3e:	797b      	ldrb	r3, [r7, #5]
 8002a40:	4a32      	ldr	r2, [pc, #200]	@ (8002b0c <DrawBoxes+0x140>)
 8002a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a46:	8879      	ldrh	r1, [r7, #2]
 8002a48:	4a31      	ldr	r2, [pc, #196]	@ (8002b10 <DrawBoxes+0x144>)
 8002a4a:	9201      	str	r2, [sp, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	9200      	str	r2, [sp, #0]
 8002a50:	4a30      	ldr	r2, [pc, #192]	@ (8002b14 <DrawBoxes+0x148>)
 8002a52:	20e6      	movs	r0, #230	@ 0xe6
 8002a54:	f7fe fe6e 	bl	8001734 <ili_draw_string_withbg>
	for (uint8_t canal = 0; canal < 4; canal++)
 8002a58:	797b      	ldrb	r3, [r7, #5]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	717b      	strb	r3, [r7, #5]
 8002a5e:	797b      	ldrb	r3, [r7, #5]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d9c9      	bls.n	80029f8 <DrawBoxes+0x2c>
	}

	ili_draw_rectangle(198, 152, 121, 88, ILI_ORANGE);
 8002a64:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2358      	movs	r3, #88	@ 0x58
 8002a6c:	2279      	movs	r2, #121	@ 0x79
 8002a6e:	2198      	movs	r1, #152	@ 0x98
 8002a70:	20c6      	movs	r0, #198	@ 0xc6
 8002a72:	f7ff f869 	bl	8001b48 <ili_draw_rectangle>
	for(uint8_t item = 0; item < 5; item++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	713b      	strb	r3, [r7, #4]
 8002a7a:	e007      	b.n	8002a8c <DrawBoxes+0xc0>
	{
		SwapItem(item, normal);
 8002a7c:	793b      	ldrb	r3, [r7, #4]
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fc31 	bl	80032e8 <SwapItem>
	for(uint8_t item = 0; item < 5; item++)
 8002a86:	793b      	ldrb	r3, [r7, #4]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	713b      	strb	r3, [r7, #4]
 8002a8c:	793b      	ldrb	r3, [r7, #4]
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d9f4      	bls.n	8002a7c <DrawBoxes+0xb0>
	}

	do
	{
		ili_fill_rect(x_pos, 152, 65, 18, ILI_ORANGE);
 8002a92:	88f8      	ldrh	r0, [r7, #6]
 8002a94:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2312      	movs	r3, #18
 8002a9c:	2241      	movs	r2, #65	@ 0x41
 8002a9e:	2198      	movs	r1, #152	@ 0x98
 8002aa0:	f7fe ffa4 	bl	80019ec <ili_fill_rect>
		x_pos += 66;
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	3342      	adds	r3, #66	@ 0x42
 8002aa8:	80fb      	strh	r3, [r7, #6]
	}
	while(x_pos < 133);
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	2b84      	cmp	r3, #132	@ 0x84
 8002aae:	d9f0      	bls.n	8002a92 <DrawBoxes+0xc6>

	_ili_draw_fast_v_line(65, 170, 239, 1, ILI_ORANGE);
 8002ab0:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	22ef      	movs	r2, #239	@ 0xef
 8002aba:	21aa      	movs	r1, #170	@ 0xaa
 8002abc:	2041      	movs	r0, #65	@ 0x41
 8002abe:	f7ff f8fc 	bl	8001cba <_ili_draw_fast_v_line>
	_ili_draw_fast_v_line(131, 170, 239, 1, ILI_ORANGE);
 8002ac2:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	22ef      	movs	r2, #239	@ 0xef
 8002acc:	21aa      	movs	r1, #170	@ 0xaa
 8002ace:	2083      	movs	r0, #131	@ 0x83
 8002ad0:	f7ff f8f3 	bl	8001cba <_ili_draw_fast_v_line>

	ili_draw_string(15, 151, "MIN V", ILI_BLACK, &font_fixedsys_mono_16);
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <DrawBoxes+0x144>)
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	4a0f      	ldr	r2, [pc, #60]	@ (8002b18 <DrawBoxes+0x14c>)
 8002adc:	2197      	movs	r1, #151	@ 0x97
 8002ade:	200f      	movs	r0, #15
 8002ae0:	f7fe fe0c 	bl	80016fc <ili_draw_string>
	ili_draw_string(82, 151, "RMS V", ILI_BLACK, &font_fixedsys_mono_16);
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <DrawBoxes+0x144>)
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	4a0c      	ldr	r2, [pc, #48]	@ (8002b1c <DrawBoxes+0x150>)
 8002aec:	2197      	movs	r1, #151	@ 0x97
 8002aee:	2052      	movs	r0, #82	@ 0x52
 8002af0:	f7fe fe04 	bl	80016fc <ili_draw_string>
	ili_draw_string(147,151, "MAX V", ILI_BLACK, &font_fixedsys_mono_16);
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <DrawBoxes+0x144>)
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2300      	movs	r3, #0
 8002afa:	4a09      	ldr	r2, [pc, #36]	@ (8002b20 <DrawBoxes+0x154>)
 8002afc:	2197      	movs	r1, #151	@ 0x97
 8002afe:	2093      	movs	r0, #147	@ 0x93
 8002b00:	f7fe fdfc 	bl	80016fc <ili_draw_string>
	//_ili_draw_fast_h_line(0, 172, 196, 1, ILI_ORANGE);
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000024 	.word	0x20000024
 8002b10:	0800a95c 	.word	0x0800a95c
 8002b14:	08009b00 	.word	0x08009b00
 8002b18:	08009b08 	.word	0x08009b08
 8002b1c:	08009b10 	.word	0x08009b10
 8002b20:	08009b18 	.word	0x08009b18

08002b24 <SwapBox>:


void SwapBox(uint8_t box, _Bool set)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	460a      	mov	r2, r1
 8002b2e:	71fb      	strb	r3, [r7, #7]
 8002b30:	4613      	mov	r3, r2
 8002b32:	71bb      	strb	r3, [r7, #6]
	uint16_t color, y_pos;
	if (set)
 8002b34:	79bb      	ldrb	r3, [r7, #6]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <SwapBox+0x1c>
	{
		color = ILI_BLUE;
 8002b3a:	231f      	movs	r3, #31
 8002b3c:	81fb      	strh	r3, [r7, #14]
 8002b3e:	e002      	b.n	8002b46 <SwapBox+0x22>
	}
	else
	{
		color = ILI_ORANGE;
 8002b40:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002b44:	81fb      	strh	r3, [r7, #14]
	}
	if (box < 4)
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d811      	bhi.n	8002b70 <SwapBox+0x4c>
	{
		y_pos = 38 * box;
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	00d2      	lsls	r2, r2, #3
 8002b54:	441a      	add	r2, r3
 8002b56:	0052      	lsls	r2, r2, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	81bb      	strh	r3, [r7, #12]
		ili_draw_rectangle(198, y_pos, 121, 36, color);
 8002b5e:	89b9      	ldrh	r1, [r7, #12]
 8002b60:	89fb      	ldrh	r3, [r7, #14]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2324      	movs	r3, #36	@ 0x24
 8002b66:	2279      	movs	r2, #121	@ 0x79
 8002b68:	20c6      	movs	r0, #198	@ 0xc6
 8002b6a:	f7fe ffed 	bl	8001b48 <ili_draw_rectangle>
	else
	{
		ili_draw_rectangle(198, 152, 121, 88, color);
	}

}
 8002b6e:	e007      	b.n	8002b80 <SwapBox+0x5c>
		ili_draw_rectangle(198, 152, 121, 88, color);
 8002b70:	89fb      	ldrh	r3, [r7, #14]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2358      	movs	r3, #88	@ 0x58
 8002b76:	2279      	movs	r2, #121	@ 0x79
 8002b78:	2198      	movs	r1, #152	@ 0x98
 8002b7a:	20c6      	movs	r0, #198	@ 0xc6
 8002b7c:	f7fe ffe4 	bl	8001b48 <ili_draw_rectangle>
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <DrawGrilla>:


// Dibuja la grilla de 7x7
void DrawGrilla(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af02      	add	r7, sp, #8
	uint16_t x_pos, y_pos;

	ili_fill_rect_fast(30, 2, 165, 148, ILI_BLACK);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2394      	movs	r3, #148	@ 0x94
 8002b94:	22a5      	movs	r2, #165	@ 0xa5
 8002b96:	2102      	movs	r1, #2
 8002b98:	201e      	movs	r0, #30
 8002b9a:	f7fe ff81 	bl	8001aa0 <ili_fill_rect_fast>
	for (uint16_t linea=0; linea < 9; linea++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	80fb      	strh	r3, [r7, #6]
 8002ba2:	e027      	b.n	8002bf4 <DrawGrilla+0x6c>
	{
		y_pos = 19 + (linea * 20);
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3313      	adds	r3, #19
 8002bb2:	80bb      	strh	r3, [r7, #4]
		x_pos = 32 + (linea * 20);
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3320      	adds	r3, #32
 8002bc2:	807b      	strh	r3, [r7, #2]
		if (linea < 7 ) _ili_draw_fast_h_line(30, y_pos, 195, 1, ILI_OLIVE);
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d808      	bhi.n	8002bdc <DrawGrilla+0x54>
 8002bca:	88b9      	ldrh	r1, [r7, #4]
 8002bcc:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	22c3      	movs	r2, #195	@ 0xc3
 8002bd6:	201e      	movs	r0, #30
 8002bd8:	f7ff f830 	bl	8001c3c <_ili_draw_fast_h_line>
		//_ili_draw_fast_h_line(37, y_pos, 193, 1, ILI_OLIVE);
		_ili_draw_fast_v_line(x_pos, 3, 148, 1, ILI_OLIVE);
 8002bdc:	8878      	ldrh	r0, [r7, #2]
 8002bde:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2301      	movs	r3, #1
 8002be6:	2294      	movs	r2, #148	@ 0x94
 8002be8:	2103      	movs	r1, #3
 8002bea:	f7ff f866 	bl	8001cba <_ili_draw_fast_v_line>
	for (uint16_t linea=0; linea < 9; linea++)
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	80fb      	strh	r3, [r7, #6]
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d9d4      	bls.n	8002ba4 <DrawGrilla+0x1c>
	}
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <DrawSelSet>:


void DrawSelSet(uint8_t item, uint8_t set)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	460a      	mov	r2, r1
 8002c0e:	71fb      	strb	r3, [r7, #7]
 8002c10:	4613      	mov	r3, r2
 8002c12:	71bb      	strb	r3, [r7, #6]
	switch(item)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d825      	bhi.n	8002c66 <DrawSelSet+0x62>
 8002c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c20 <DrawSelSet+0x1c>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c35 	.word	0x08002c35
 8002c24:	08002c3f 	.word	0x08002c3f
 8002c28:	08002c49 	.word	0x08002c49
 8002c2c:	08002c53 	.word	0x08002c53
 8002c30:	08002c5d 	.word	0x08002c5d
	{
		case 0: DrawEscalaSet(set); break;
 8002c34:	79bb      	ldrb	r3, [r7, #6]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fa0a 	bl	8003050 <DrawEscalaSet>
 8002c3c:	e013      	b.n	8002c66 <DrawSelSet+0x62>
		case 1: DrawMPS_Set(set); break;
 8002c3e:	79bb      	ldrb	r3, [r7, #6]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fa49 	bl	80030d8 <DrawMPS_Set>
 8002c46:	e00e      	b.n	8002c66 <DrawSelSet+0x62>
		case 2: DrawLapsoSet(set); break;
 8002c48:	79bb      	ldrb	r3, [r7, #6]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fa98 	bl	8003180 <DrawLapsoSet>
 8002c50:	e009      	b.n	8002c66 <DrawSelSet+0x62>
		case 3: DrawMediaSet(set); break;
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fad7 	bl	8003208 <DrawMediaSet>
 8002c5a:	e004      	b.n	8002c66 <DrawSelSet+0x62>
		case 4: DrawRastroSet(set); break;
 8002c5c:	79bb      	ldrb	r3, [r7, #6]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fb16 	bl	8003290 <DrawRastroSet>
 8002c64:	bf00      	nop
	}
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop

08002c70 <UpdateSet>:


void UpdateSet(uint8_t item, uint8_t set)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	460a      	mov	r2, r1
 8002c7a:	71fb      	strb	r3, [r7, #7]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71bb      	strb	r3, [r7, #6]
	r_count = 0;
 8002c80:	4b29      	ldr	r3, [pc, #164]	@ (8002d28 <UpdateSet+0xb8>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
	DrawGrilla();
 8002c86:	f7ff ff7f 	bl	8002b88 <DrawGrilla>
	DrawSelSet(item, set);
 8002c8a:	79ba      	ldrb	r2, [r7, #6]
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ffb7 	bl	8002c04 <DrawSelSet>
	switch(item)
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d841      	bhi.n	8002d20 <UpdateSet+0xb0>
 8002c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <UpdateSet+0x34>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cb9 	.word	0x08002cb9
 8002ca8:	08002cd7 	.word	0x08002cd7
 8002cac:	08002cf1 	.word	0x08002cf1
 8002cb0:	08002d03 	.word	0x08002d03
 8002cb4:	08002d0b 	.word	0x08002d0b
	{
		case 0: dvm_set.flag.escala = set; r_count = 0; DrawRangoGrilla(); break;
 8002cb8:	79bb      	ldrb	r3, [r7, #6]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	b2d9      	uxtb	r1, r3
 8002cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d2c <UpdateSet+0xbc>)
 8002cc2:	7813      	ldrb	r3, [r2, #0]
 8002cc4:	f361 1305 	bfi	r3, r1, #4, #2
 8002cc8:	7013      	strb	r3, [r2, #0]
 8002cca:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <UpdateSet+0xb8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	f000 f8e2 	bl	8002e98 <DrawRangoGrilla>
 8002cd4:	e024      	b.n	8002d20 <UpdateSet+0xb0>
		case 1: MPS = set; ms_count = ms_count_set[set]; msTick = 0; break;
 8002cd6:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <UpdateSet+0xc0>)
 8002cd8:	79bb      	ldrb	r3, [r7, #6]
 8002cda:	7013      	strb	r3, [r2, #0]
 8002cdc:	79bb      	ldrb	r3, [r7, #6]
 8002cde:	4a15      	ldr	r2, [pc, #84]	@ (8002d34 <UpdateSet+0xc4>)
 8002ce0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002ce4:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <UpdateSet+0xc8>)
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	4b14      	ldr	r3, [pc, #80]	@ (8002d3c <UpdateSet+0xcc>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	801a      	strh	r2, [r3, #0]
 8002cee:	e017      	b.n	8002d20 <UpdateSet+0xb0>
		case 2: lapso = set; DrawGrilla(); r_count = 0; break;
 8002cf0:	4a13      	ldr	r2, [pc, #76]	@ (8002d40 <UpdateSet+0xd0>)
 8002cf2:	79bb      	ldrb	r3, [r7, #6]
 8002cf4:	7013      	strb	r3, [r2, #0]
 8002cf6:	f7ff ff47 	bl	8002b88 <DrawGrilla>
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <UpdateSet+0xb8>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e00e      	b.n	8002d20 <UpdateSet+0xb0>
		case 3: media_set = set; break;
 8002d02:	4a10      	ldr	r2, [pc, #64]	@ (8002d44 <UpdateSet+0xd4>)
 8002d04:	79bb      	ldrb	r3, [r7, #6]
 8002d06:	7013      	strb	r3, [r2, #0]
 8002d08:	e00a      	b.n	8002d20 <UpdateSet+0xb0>
		case 4: rastro = (set != 0); DrawTrazosBack(); break;
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <UpdateSet+0xd8>)
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	f000 fca3 	bl	8003664 <DrawTrazosBack>
 8002d1e:	bf00      	nop
	}
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200005f8 	.word	0x200005f8
 8002d2c:	20000298 	.word	0x20000298
 8002d30:	200005fc 	.word	0x200005fc
 8002d34:	2000001c 	.word	0x2000001c
 8002d38:	20000608 	.word	0x20000608
 8002d3c:	2000060a 	.word	0x2000060a
 8002d40:	200005fd 	.word	0x200005fd
 8002d44:	20000601 	.word	0x20000601
 8002d48:	20000622 	.word	0x20000622

08002d4c <DrawConfig>:


// Muestra la configuración (Escala, Rango)
void DrawConfig(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	//DrawEscalaSet(dvm_set.flag.escala);
	DrawMPS_Set(MPS);
 8002d50:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <DrawConfig+0x30>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f9bf 	bl	80030d8 <DrawMPS_Set>
	DrawLapsoSet(lapso);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <DrawConfig+0x34>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fa0e 	bl	8003180 <DrawLapsoSet>
	DrawMediaSet(media_set);
 8002d64:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <DrawConfig+0x38>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fa4d 	bl	8003208 <DrawMediaSet>
	DrawRastroSet(rastro); //Huella, Fantasma
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <DrawConfig+0x3c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fa8c 	bl	8003290 <DrawRastroSet>
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200005fc 	.word	0x200005fc
 8002d80:	200005fd 	.word	0x200005fd
 8002d84:	20000601 	.word	0x20000601
 8002d88:	20000622 	.word	0x20000622

08002d8c <SetLimites>:


void SetLimites(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
	uint8_t _rango_l, _rango_h;

	_rango_l = rango_l;
 8002d92:	4b3c      	ldr	r3, [pc, #240]	@ (8002e84 <SetLimites+0xf8>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	71fb      	strb	r3, [r7, #7]
	_rango_h = rango_h;
 8002d98:	4b3b      	ldr	r3, [pc, #236]	@ (8002e88 <SetLimites+0xfc>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	71bb      	strb	r3, [r7, #6]

	if(limite_h < 1925) rango_h = 0; //si es menor que 1.6V
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e8c <SetLimites+0x100>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	f240 7284 	movw	r2, #1924	@ 0x784
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <SetLimites+0x24>
 8002daa:	4b37      	ldr	r3, [pc, #220]	@ (8002e88 <SetLimites+0xfc>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
	if(limite_h > 1924) rango_h = 1; //si es mayor que 1.6V
 8002db0:	4b36      	ldr	r3, [pc, #216]	@ (8002e8c <SetLimites+0x100>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f240 7284 	movw	r2, #1924	@ 0x784
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d902      	bls.n	8002dc2 <SetLimites+0x36>
 8002dbc:	4b32      	ldr	r3, [pc, #200]	@ (8002e88 <SetLimites+0xfc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
	if(limite_h > 3103) rango_h = 2; //si es mayor que 2.5V
 8002dc2:	4b32      	ldr	r3, [pc, #200]	@ (8002e8c <SetLimites+0x100>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	f5b3 6f42 	cmp.w	r3, #3104	@ 0xc20
 8002dca:	d302      	bcc.n	8002dd2 <SetLimites+0x46>
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002e88 <SetLimites+0xfc>)
 8002dce:	2202      	movs	r2, #2
 8002dd0:	701a      	strb	r2, [r3, #0]

	if(limite_l > 1861) rango_l = 2; //si es mayor que 1.5
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e90 <SetLimites+0x104>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	f240 7245 	movw	r2, #1861	@ 0x745
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d902      	bls.n	8002de4 <SetLimites+0x58>
 8002dde:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <SetLimites+0xf8>)
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
	if(limite_l < 1862) rango_l = 1; //si es menor que 1.5V
 8002de4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <SetLimites+0x104>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f240 7245 	movw	r2, #1861	@ 0x745
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d802      	bhi.n	8002df6 <SetLimites+0x6a>
 8002df0:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <SetLimites+0xf8>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
	if(limite_l < 1241) rango_l = 0; //si es menor que 1.0V
 8002df6:	4b26      	ldr	r3, [pc, #152]	@ (8002e90 <SetLimites+0x104>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	f5b3 6f9b 	cmp.w	r3, #1240	@ 0x4d8
 8002dfe:	d802      	bhi.n	8002e06 <SetLimites+0x7a>
 8002e00:	4b20      	ldr	r3, [pc, #128]	@ (8002e84 <SetLimites+0xf8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]

	if ((rango_l == 0) && (rango_h == 1)) rango_h = 2; //0-2.5 (no!) => 0-3.0
 8002e06:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <SetLimites+0xf8>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <SetLimites+0x90>
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <SetLimites+0xfc>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <SetLimites+0x90>
 8002e16:	4b1c      	ldr	r3, [pc, #112]	@ (8002e88 <SetLimites+0xfc>)
 8002e18:	2202      	movs	r2, #2
 8002e1a:	701a      	strb	r2, [r3, #0]
	if ((rango_l == 1) && (rango_h == 0)) rango_h = 1; //1-1.5 (no!) => 1-2.5
 8002e1c:	4b19      	ldr	r3, [pc, #100]	@ (8002e84 <SetLimites+0xf8>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <SetLimites+0xa6>
 8002e24:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <SetLimites+0xfc>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <SetLimites+0xa6>
 8002e2c:	4b16      	ldr	r3, [pc, #88]	@ (8002e88 <SetLimites+0xfc>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
	if ((rango_l == 1) && (rango_h == 2)) rango_l = 0; //1-3.0 (no!) => 0-3.0
 8002e32:	4b14      	ldr	r3, [pc, #80]	@ (8002e84 <SetLimites+0xf8>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d106      	bne.n	8002e48 <SetLimites+0xbc>
 8002e3a:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <SetLimites+0xfc>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d102      	bne.n	8002e48 <SetLimites+0xbc>
 8002e42:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <SetLimites+0xf8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
	if ((rango_l == 2) && (rango_h < 2))  rango_l = 1; //1.5-1.5(no!), 1.5-2.5 (no!) => 1.0-2.5
 8002e48:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <SetLimites+0xf8>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d106      	bne.n	8002e5e <SetLimites+0xd2>
 8002e50:	4b0d      	ldr	r3, [pc, #52]	@ (8002e88 <SetLimites+0xfc>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d802      	bhi.n	8002e5e <SetLimites+0xd2>
 8002e58:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <SetLimites+0xf8>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]

	if ((rango_l < _rango_l) || (rango_h > _rango_h)) redraw = true;
 8002e5e:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <SetLimites+0xf8>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	79fa      	ldrb	r2, [r7, #7]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d804      	bhi.n	8002e72 <SetLimites+0xe6>
 8002e68:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <SetLimites+0xfc>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	79ba      	ldrb	r2, [r7, #6]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d202      	bcs.n	8002e78 <SetLimites+0xec>
 8002e72:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <SetLimites+0x108>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000602 	.word	0x20000602
 8002e88:	20000017 	.word	0x20000017
 8002e8c:	20000606 	.word	0x20000606
 8002e90:	20000604 	.word	0x20000604
 8002e94:	20000628 	.word	0x20000628

08002e98 <DrawRangoGrilla>:


// Muestra la escala seleccionada según rango a la izq de la Grilla
void DrawRangoGrilla(void) // escala-> 0= x1, 1 = x10, 2 = x100
{                     // rengo-> 0=1.5v, 1=3v, 2=4.5v, 3=6v
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
	//float step;
	char filtro[10];
	uint8_t xfactor, y_pos, valor_v, y_min, y_dif;

	y_min = rango_l_set[rango_l];
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003018 <DrawRangoGrilla+0x180>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b5d      	ldr	r3, [pc, #372]	@ (800301c <DrawRangoGrilla+0x184>)
 8002ea6:	5c9b      	ldrb	r3, [r3, r2]
 8002ea8:	74fb      	strb	r3, [r7, #19]
	y_dif = rango_h_set[rango_h] - y_min;
 8002eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8003020 <DrawRangoGrilla+0x188>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8003024 <DrawRangoGrilla+0x18c>)
 8002eb2:	5c9a      	ldrb	r2, [r3, r2]
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	74bb      	strb	r3, [r7, #18]
	ili_fill_rect_fast(3, 3, 26, 147, ILI_BLACK);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2393      	movs	r3, #147	@ 0x93
 8002ec0:	221a      	movs	r2, #26
 8002ec2:	2103      	movs	r1, #3
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f7fe fdeb 	bl	8001aa0 <ili_fill_rect_fast>
	strcpy(filtro, "%");
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	2225      	movs	r2, #37	@ 0x25
 8002ece:	801a      	strh	r2, [r3, #0]
	switch(dvm_set.flag.escala)
 8002ed0:	4b55      	ldr	r3, [pc, #340]	@ (8003028 <DrawRangoGrilla+0x190>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d024      	beq.n	8002f28 <DrawRangoGrilla+0x90>
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	dc30      	bgt.n	8002f44 <DrawRangoGrilla+0xac>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <DrawRangoGrilla+0x54>
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d010      	beq.n	8002f0c <DrawRangoGrilla+0x74>
 8002eea:	e02b      	b.n	8002f44 <DrawRangoGrilla+0xac>
	{
		case 0: strcat(filtro, ".2"); xfactor = 1; break;
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd f92e 	bl	8000150 <strlen>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	4413      	add	r3, r2
 8002efc:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <DrawRangoGrilla+0x194>)
 8002efe:	8811      	ldrh	r1, [r2, #0]
 8002f00:	7892      	ldrb	r2, [r2, #2]
 8002f02:	8019      	strh	r1, [r3, #0]
 8002f04:	709a      	strb	r2, [r3, #2]
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
 8002f0a:	e01b      	b.n	8002f44 <DrawRangoGrilla+0xac>
		case 1: strcat(filtro, "4.1"); xfactor = 10; break;
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd f91e 	bl	8000150 <strlen>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a44      	ldr	r2, [pc, #272]	@ (8003030 <DrawRangoGrilla+0x198>)
 8002f1e:	6810      	ldr	r0, [r2, #0]
 8002f20:	6018      	str	r0, [r3, #0]
 8002f22:	230a      	movs	r3, #10
 8002f24:	75fb      	strb	r3, [r7, #23]
 8002f26:	e00d      	b.n	8002f44 <DrawRangoGrilla+0xac>
		case 2: strcat(filtro, "3.0"); xfactor = 100; break;
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd f910 	bl	8000150 <strlen>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	4a3e      	ldr	r2, [pc, #248]	@ (8003034 <DrawRangoGrilla+0x19c>)
 8002f3a:	6810      	ldr	r0, [r2, #0]
 8002f3c:	6018      	str	r0, [r3, #0]
 8002f3e:	2364      	movs	r3, #100	@ 0x64
 8002f40:	75fb      	strb	r3, [r7, #23]
 8002f42:	bf00      	nop
	}
	strcat(filtro, "f");
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd f902 	bl	8000150 <strlen>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	4413      	add	r3, r2
 8002f54:	4938      	ldr	r1, [pc, #224]	@ (8003038 <DrawRangoGrilla+0x1a0>)
 8002f56:	461a      	mov	r2, r3
 8002f58:	460b      	mov	r3, r1
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	8013      	strh	r3, [r2, #0]
	for (uint16_t cont =0; cont < 7; cont++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	82bb      	strh	r3, [r7, #20]
 8002f62:	e050      	b.n	8003006 <DrawRangoGrilla+0x16e>
	{
		y_pos = 10 + (cont * 20);
 8002f64:	8abb      	ldrh	r3, [r7, #20]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	330a      	adds	r3, #10
 8002f74:	747b      	strb	r3, [r7, #17]
		valor_v = 6 - cont;
 8002f76:	8abb      	ldrh	r3, [r7, #20]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f1c3 0306 	rsb	r3, r3, #6
 8002f7e:	743b      	strb	r3, [r7, #16]
		fpv = (float) (xfactor * y_min) /10;
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	7cfa      	ldrb	r2, [r7, #19]
 8002f84:	fb02 f303 	mul.w	r3, r2, r3
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fe87 	bl	8000c9c <__aeabi_i2f>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	492a      	ldr	r1, [pc, #168]	@ (800303c <DrawRangoGrilla+0x1a4>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd ff8a 	bl	8000eac <__aeabi_fdiv>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b28      	ldr	r3, [pc, #160]	@ (8003040 <DrawRangoGrilla+0x1a8>)
 8002f9e:	601a      	str	r2, [r3, #0]
		fpv += (float)(xfactor * valor_v * y_dif ) / 60;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	7c3a      	ldrb	r2, [r7, #16]
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	7cba      	ldrb	r2, [r7, #18]
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fe74 	bl	8000c9c <__aeabi_i2f>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4923      	ldr	r1, [pc, #140]	@ (8003044 <DrawRangoGrilla+0x1ac>)
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd ff77 	bl	8000eac <__aeabi_fdiv>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <DrawRangoGrilla+0x1a8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7fd fdb3 	bl	8000b34 <__addsf3>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <DrawRangoGrilla+0x1a8>)
 8002fd4:	601a      	str	r2, [r3, #0]
		sprintf(texto, filtro, fpv);
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003040 <DrawRangoGrilla+0x1a8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fa24 	bl	8000428 <__aeabi_f2d>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	1d39      	adds	r1, r7, #4
 8002fe6:	4818      	ldr	r0, [pc, #96]	@ (8003048 <DrawRangoGrilla+0x1b0>)
 8002fe8:	f004 fc42 	bl	8007870 <siprintf>
		ili_draw_string(3, y_pos, texto, ILI_ORANGE, &verdana_11);
 8002fec:	7c7b      	ldrb	r3, [r7, #17]
 8002fee:	b299      	uxth	r1, r3
 8002ff0:	4b16      	ldr	r3, [pc, #88]	@ (800304c <DrawRangoGrilla+0x1b4>)
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002ff8:	4a13      	ldr	r2, [pc, #76]	@ (8003048 <DrawRangoGrilla+0x1b0>)
 8002ffa:	2003      	movs	r0, #3
 8002ffc:	f7fe fb7e 	bl	80016fc <ili_draw_string>
	for (uint16_t cont =0; cont < 7; cont++)
 8003000:	8abb      	ldrh	r3, [r7, #20]
 8003002:	3301      	adds	r3, #1
 8003004:	82bb      	strh	r3, [r7, #20]
 8003006:	8abb      	ldrh	r3, [r7, #20]
 8003008:	2b06      	cmp	r3, #6
 800300a:	d9ab      	bls.n	8002f64 <DrawRangoGrilla+0xcc>
	}
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000602 	.word	0x20000602
 800301c:	20000018 	.word	0x20000018
 8003020:	20000017 	.word	0x20000017
 8003024:	20000014 	.word	0x20000014
 8003028:	20000298 	.word	0x20000298
 800302c:	08009b20 	.word	0x08009b20
 8003030:	08009b24 	.word	0x08009b24
 8003034:	08009b28 	.word	0x08009b28
 8003038:	08009b2c 	.word	0x08009b2c
 800303c:	41200000 	.word	0x41200000
 8003040:	200005ec 	.word	0x200005ec
 8003044:	42700000 	.word	0x42700000
 8003048:	200005dc 	.word	0x200005dc
 800304c:	0800ace8 	.word	0x0800ace8

08003050 <DrawEscalaSet>:


void DrawEscalaSet(uint8_t escala)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af02      	add	r7, sp, #8
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
	char txt[6];
	switch(escala)
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d018      	beq.n	8003092 <DrawEscalaSet+0x42>
 8003060:	2b02      	cmp	r3, #2
 8003062:	dc1f      	bgt.n	80030a4 <DrawEscalaSet+0x54>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <DrawEscalaSet+0x1e>
 8003068:	2b01      	cmp	r3, #1
 800306a:	d009      	beq.n	8003080 <DrawEscalaSet+0x30>
 800306c:	e01a      	b.n	80030a4 <DrawEscalaSet+0x54>
	{
		case 0: strcpy(txt, " X1 "); break;
 800306e:	f107 0308 	add.w	r3, r7, #8
 8003072:	4a15      	ldr	r2, [pc, #84]	@ (80030c8 <DrawEscalaSet+0x78>)
 8003074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003078:	6018      	str	r0, [r3, #0]
 800307a:	3304      	adds	r3, #4
 800307c:	7019      	strb	r1, [r3, #0]
 800307e:	e011      	b.n	80030a4 <DrawEscalaSet+0x54>
		case 1: strcpy(txt, " X10"); break;
 8003080:	f107 0308 	add.w	r3, r7, #8
 8003084:	4a11      	ldr	r2, [pc, #68]	@ (80030cc <DrawEscalaSet+0x7c>)
 8003086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800308a:	6018      	str	r0, [r3, #0]
 800308c:	3304      	adds	r3, #4
 800308e:	7019      	strb	r1, [r3, #0]
 8003090:	e008      	b.n	80030a4 <DrawEscalaSet+0x54>
		case 2: strcpy(txt, "X100"); break;
 8003092:	f107 0308 	add.w	r3, r7, #8
 8003096:	4a0e      	ldr	r2, [pc, #56]	@ (80030d0 <DrawEscalaSet+0x80>)
 8003098:	e892 0003 	ldmia.w	r2, {r0, r1}
 800309c:	6018      	str	r0, [r3, #0]
 800309e:	3304      	adds	r3, #4
 80030a0:	7019      	strb	r1, [r3, #0]
 80030a2:	bf00      	nop
	}
	ili_draw_string_withbg(275, 153, txt, ILI_WHITE  , ILI_BLACK, &font_fixedsys_mono_16);
 80030a4:	f107 0208 	add.w	r2, r7, #8
 80030a8:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <DrawEscalaSet+0x84>)
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2300      	movs	r3, #0
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030b4:	2199      	movs	r1, #153	@ 0x99
 80030b6:	f240 1013 	movw	r0, #275	@ 0x113
 80030ba:	f7fe fb3b 	bl	8001734 <ili_draw_string_withbg>
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	08009b30 	.word	0x08009b30
 80030cc:	08009b38 	.word	0x08009b38
 80030d0:	08009b40 	.word	0x08009b40
 80030d4:	0800a95c 	.word	0x0800a95c

080030d8 <DrawMPS_Set>:


void DrawMPS_Set(uint8_t mps)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
	char txt[8];
	switch(mps)
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d82f      	bhi.n	8003148 <DrawMPS_Set+0x70>
 80030e8:	a201      	add	r2, pc, #4	@ (adr r2, 80030f0 <DrawMPS_Set+0x18>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	08003113 	.word	0x08003113
 80030f8:	08003125 	.word	0x08003125
 80030fc:	08003137 	.word	0x08003137
	{
		case 0: strcpy(txt, " 1P/s"); break;
 8003100:	f107 0308 	add.w	r3, r7, #8
 8003104:	4a19      	ldr	r2, [pc, #100]	@ (800316c <DrawMPS_Set+0x94>)
 8003106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800310a:	6018      	str	r0, [r3, #0]
 800310c:	3304      	adds	r3, #4
 800310e:	8019      	strh	r1, [r3, #0]
 8003110:	e01a      	b.n	8003148 <DrawMPS_Set+0x70>
		case 1: strcpy(txt, " 3P/s"); break;
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	4a16      	ldr	r2, [pc, #88]	@ (8003170 <DrawMPS_Set+0x98>)
 8003118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800311c:	6018      	str	r0, [r3, #0]
 800311e:	3304      	adds	r3, #4
 8003120:	8019      	strh	r1, [r3, #0]
 8003122:	e011      	b.n	8003148 <DrawMPS_Set+0x70>
		case 2: strcpy(txt, " 5P/s"); break;
 8003124:	f107 0308 	add.w	r3, r7, #8
 8003128:	4a12      	ldr	r2, [pc, #72]	@ (8003174 <DrawMPS_Set+0x9c>)
 800312a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800312e:	6018      	str	r0, [r3, #0]
 8003130:	3304      	adds	r3, #4
 8003132:	8019      	strh	r1, [r3, #0]
 8003134:	e008      	b.n	8003148 <DrawMPS_Set+0x70>
		case 3: strcpy(txt, "10P/s"); break;
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	4a0f      	ldr	r2, [pc, #60]	@ (8003178 <DrawMPS_Set+0xa0>)
 800313c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003140:	6018      	str	r0, [r3, #0]
 8003142:	3304      	adds	r3, #4
 8003144:	8019      	strh	r1, [r3, #0]
 8003146:	bf00      	nop
		//case 4: strcpy(txt, "20P/s"); break;
	}
	//ms_count = ms_count_set[mps];    // ################# ¡REVISAR!.. #################
	//msTick = 0;
	ili_draw_string_withbg(275, 170, txt, ILI_WHITE  , ILI_BLACK, &font_fixedsys_mono_16);
 8003148:	f107 0208 	add.w	r2, r7, #8
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <DrawMPS_Set+0xa4>)
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	2300      	movs	r3, #0
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003158:	21aa      	movs	r1, #170	@ 0xaa
 800315a:	f240 1013 	movw	r0, #275	@ 0x113
 800315e:	f7fe fae9 	bl	8001734 <ili_draw_string_withbg>
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	08009b48 	.word	0x08009b48
 8003170:	08009b50 	.word	0x08009b50
 8003174:	08009b58 	.word	0x08009b58
 8003178:	08009b60 	.word	0x08009b60
 800317c:	0800a95c 	.word	0x0800a95c

08003180 <DrawLapsoSet>:

void DrawLapsoSet(uint8_t registros)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af02      	add	r7, sp, #8
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
	char txt[8];
	switch(registros)
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d018      	beq.n	80031c2 <DrawLapsoSet+0x42>
 8003190:	2b02      	cmp	r3, #2
 8003192:	dc1f      	bgt.n	80031d4 <DrawLapsoSet+0x54>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <DrawLapsoSet+0x1e>
 8003198:	2b01      	cmp	r3, #1
 800319a:	d009      	beq.n	80031b0 <DrawLapsoSet+0x30>
 800319c:	e01a      	b.n	80031d4 <DrawLapsoSet+0x54>
	{
		case 0: strcpy(txt, " 40 R") ; break;
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	4a15      	ldr	r2, [pc, #84]	@ (80031f8 <DrawLapsoSet+0x78>)
 80031a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a8:	6018      	str	r0, [r3, #0]
 80031aa:	3304      	adds	r3, #4
 80031ac:	8019      	strh	r1, [r3, #0]
 80031ae:	e011      	b.n	80031d4 <DrawLapsoSet+0x54>
		case 1: strcpy(txt, " 80 R") ; break;
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	4a11      	ldr	r2, [pc, #68]	@ (80031fc <DrawLapsoSet+0x7c>)
 80031b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031ba:	6018      	str	r0, [r3, #0]
 80031bc:	3304      	adds	r3, #4
 80031be:	8019      	strh	r1, [r3, #0]
 80031c0:	e008      	b.n	80031d4 <DrawLapsoSet+0x54>
		case 2: strcpy(txt, "160 R") ; break;
 80031c2:	f107 0308 	add.w	r3, r7, #8
 80031c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003200 <DrawLapsoSet+0x80>)
 80031c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031cc:	6018      	str	r0, [r3, #0]
 80031ce:	3304      	adds	r3, #4
 80031d0:	8019      	strh	r1, [r3, #0]
 80031d2:	bf00      	nop
	}
	ili_draw_string_withbg(275, 186, txt, ILI_WHITE  , ILI_BLACK, &font_fixedsys_mono_16);
 80031d4:	f107 0208 	add.w	r2, r7, #8
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <DrawLapsoSet+0x84>)
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	2300      	movs	r3, #0
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031e4:	21ba      	movs	r1, #186	@ 0xba
 80031e6:	f240 1013 	movw	r0, #275	@ 0x113
 80031ea:	f7fe faa3 	bl	8001734 <ili_draw_string_withbg>
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	08009b68 	.word	0x08009b68
 80031fc:	08009b70 	.word	0x08009b70
 8003200:	08009b78 	.word	0x08009b78
 8003204:	0800a95c 	.word	0x0800a95c

08003208 <DrawMediaSet>:

void DrawMediaSet(uint8_t mediaset)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af02      	add	r7, sp, #8
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
	char txt[8];
	switch(mediaset)
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d018      	beq.n	800324a <DrawMediaSet+0x42>
 8003218:	2b02      	cmp	r3, #2
 800321a:	dc1f      	bgt.n	800325c <DrawMediaSet+0x54>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <DrawMediaSet+0x1e>
 8003220:	2b01      	cmp	r3, #1
 8003222:	d009      	beq.n	8003238 <DrawMediaSet+0x30>
 8003224:	e01a      	b.n	800325c <DrawMediaSet+0x54>
	{
		case 0: strcpy(txt, "3Lec.") ; break;
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	4a15      	ldr	r2, [pc, #84]	@ (8003280 <DrawMediaSet+0x78>)
 800322c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003230:	6018      	str	r0, [r3, #0]
 8003232:	3304      	adds	r3, #4
 8003234:	8019      	strh	r1, [r3, #0]
 8003236:	e011      	b.n	800325c <DrawMediaSet+0x54>
		case 1: strcpy(txt, "4Lec.") ; break;
 8003238:	f107 0308 	add.w	r3, r7, #8
 800323c:	4a11      	ldr	r2, [pc, #68]	@ (8003284 <DrawMediaSet+0x7c>)
 800323e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003242:	6018      	str	r0, [r3, #0]
 8003244:	3304      	adds	r3, #4
 8003246:	8019      	strh	r1, [r3, #0]
 8003248:	e008      	b.n	800325c <DrawMediaSet+0x54>
		case 2: strcpy(txt, "5Lec.") ; break;
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	4a0e      	ldr	r2, [pc, #56]	@ (8003288 <DrawMediaSet+0x80>)
 8003250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003254:	6018      	str	r0, [r3, #0]
 8003256:	3304      	adds	r3, #4
 8003258:	8019      	strh	r1, [r3, #0]
 800325a:	bf00      	nop
	}
	ili_draw_string_withbg(275, 202, txt, ILI_WHITE  , ILI_BLACK, &font_fixedsys_mono_16);
 800325c:	f107 0208 	add.w	r2, r7, #8
 8003260:	4b0a      	ldr	r3, [pc, #40]	@ (800328c <DrawMediaSet+0x84>)
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	2300      	movs	r3, #0
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800326c:	21ca      	movs	r1, #202	@ 0xca
 800326e:	f240 1013 	movw	r0, #275	@ 0x113
 8003272:	f7fe fa5f 	bl	8001734 <ili_draw_string_withbg>
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	08009b80 	.word	0x08009b80
 8003284:	08009b88 	.word	0x08009b88
 8003288:	08009b90 	.word	0x08009b90
 800328c:	0800a95c 	.word	0x0800a95c

08003290 <DrawRastroSet>:


void DrawRastroSet(uint8_t fantasma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af02      	add	r7, sp, #8
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
	char txt[5];
	switch(fantasma)
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <DrawRastroSet+0x16>
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d005      	beq.n	80032b0 <DrawRastroSet+0x20>
 80032a4:	e009      	b.n	80032ba <DrawRastroSet+0x2a>
	{
		case false: strcpy(txt, " NO") ; break;
 80032a6:	f107 0308 	add.w	r3, r7, #8
 80032aa:	4a0c      	ldr	r2, [pc, #48]	@ (80032dc <DrawRastroSet+0x4c>)
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e004      	b.n	80032ba <DrawRastroSet+0x2a>
		case  true: strcpy(txt, " SI") ; break;
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	4a0a      	ldr	r2, [pc, #40]	@ (80032e0 <DrawRastroSet+0x50>)
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	bf00      	nop
	}
	ili_draw_string_withbg(275, 218, txt, ILI_WHITE  , ILI_BLACK, &font_fixedsys_mono_16);
 80032ba:	f107 0208 	add.w	r2, r7, #8
 80032be:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <DrawRastroSet+0x54>)
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032ca:	21da      	movs	r1, #218	@ 0xda
 80032cc:	f240 1013 	movw	r0, #275	@ 0x113
 80032d0:	f7fe fa30 	bl	8001734 <ili_draw_string_withbg>
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	004f4e20 	.word	0x004f4e20
 80032e0:	00495320 	.word	0x00495320
 80032e4:	0800a95c 	.word	0x0800a95c

080032e8 <SwapItem>:


void SwapItem(uint8_t item, uint8_t status)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	4603      	mov	r3, r0
 80032f0:	460a      	mov	r2, r1
 80032f2:	71fb      	strb	r3, [r7, #7]
 80032f4:	4613      	mov	r3, r2
 80032f6:	71bb      	strb	r3, [r7, #6]
	uint8_t y_pos;
	uint16_t color;
	char txt[10];
	switch(status)
 80032f8:	79bb      	ldrb	r3, [r7, #6]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d00d      	beq.n	800331a <SwapItem+0x32>
 80032fe:	2b02      	cmp	r3, #2
 8003300:	dc0f      	bgt.n	8003322 <SwapItem+0x3a>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <SwapItem+0x24>
 8003306:	2b01      	cmp	r3, #1
 8003308:	d004      	beq.n	8003314 <SwapItem+0x2c>
 800330a:	e00a      	b.n	8003322 <SwapItem+0x3a>
	{
	   case normal: color = ILI_ORANGE; break;
 800330c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8003310:	82fb      	strh	r3, [r7, #22]
 8003312:	e006      	b.n	8003322 <SwapItem+0x3a>
	   case activo: color = ILI_BLUE; break;
 8003314:	231f      	movs	r3, #31
 8003316:	82fb      	strh	r3, [r7, #22]
 8003318:	e003      	b.n	8003322 <SwapItem+0x3a>
	   case   edit: color = ILI_CYAN; break;
 800331a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800331e:	82fb      	strh	r3, [r7, #22]
 8003320:	bf00      	nop
	}
	switch(item)
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d830      	bhi.n	800338a <SwapItem+0xa2>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <SwapItem+0x48>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003345 	.word	0x08003345
 8003334:	08003353 	.word	0x08003353
 8003338:	08003361 	.word	0x08003361
 800333c:	0800336f 	.word	0x0800336f
 8003340:	0800337d 	.word	0x0800337d
	{
		case 0: strcpy(txt, "  ESCALA"); break;
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4a1a      	ldr	r2, [pc, #104]	@ (80033b4 <SwapItem+0xcc>)
 800334a:	ca07      	ldmia	r2, {r0, r1, r2}
 800334c:	c303      	stmia	r3!, {r0, r1}
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e01b      	b.n	800338a <SwapItem+0xa2>
		case 1: strcpy(txt, "   RITMO"); break;
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <SwapItem+0xd0>)
 8003358:	ca07      	ldmia	r2, {r0, r1, r2}
 800335a:	c303      	stmia	r3!, {r0, r1}
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	e014      	b.n	800338a <SwapItem+0xa2>
		case 2: strcpy(txt, "LONGITUD"); break;
 8003360:	f107 0308 	add.w	r3, r7, #8
 8003364:	4a15      	ldr	r2, [pc, #84]	@ (80033bc <SwapItem+0xd4>)
 8003366:	ca07      	ldmia	r2, {r0, r1, r2}
 8003368:	c303      	stmia	r3!, {r0, r1}
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e00d      	b.n	800338a <SwapItem+0xa2>
		case 3: strcpy(txt, "PROMEDIO"); break;
 800336e:	f107 0308 	add.w	r3, r7, #8
 8003372:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <SwapItem+0xd8>)
 8003374:	ca07      	ldmia	r2, {r0, r1, r2}
 8003376:	c303      	stmia	r3!, {r0, r1}
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e006      	b.n	800338a <SwapItem+0xa2>
		case 4: strcpy(txt, "  RASTRO"); break;
 800337c:	f107 0308 	add.w	r3, r7, #8
 8003380:	4a10      	ldr	r2, [pc, #64]	@ (80033c4 <SwapItem+0xdc>)
 8003382:	ca07      	ldmia	r2, {r0, r1, r2}
 8003384:	c303      	stmia	r3!, {r0, r1}
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	bf00      	nop
	}
	y_pos = 153 + (item * 16);
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3b67      	subs	r3, #103	@ 0x67
 8003392:	757b      	strb	r3, [r7, #21]
	ili_draw_string_withbg(205, y_pos, txt, color , ILI_BLACK, &font_fixedsys_mono_16);
 8003394:	7d7b      	ldrb	r3, [r7, #21]
 8003396:	b299      	uxth	r1, r3
 8003398:	8afb      	ldrh	r3, [r7, #22]
 800339a:	f107 0208 	add.w	r2, r7, #8
 800339e:	480a      	ldr	r0, [pc, #40]	@ (80033c8 <SwapItem+0xe0>)
 80033a0:	9001      	str	r0, [sp, #4]
 80033a2:	2000      	movs	r0, #0
 80033a4:	9000      	str	r0, [sp, #0]
 80033a6:	20cd      	movs	r0, #205	@ 0xcd
 80033a8:	f7fe f9c4 	bl	8001734 <ili_draw_string_withbg>
}
 80033ac:	bf00      	nop
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	08009b98 	.word	0x08009b98
 80033b8:	08009ba4 	.word	0x08009ba4
 80033bc:	08009bb0 	.word	0x08009bb0
 80033c0:	08009bbc 	.word	0x08009bbc
 80033c4:	08009bc8 	.word	0x08009bc8
 80033c8:	0800a95c 	.word	0x0800a95c

080033cc <DrawPix>:



//Dibuja los pixeles correspondientes a los canales activos para el registro actual
void DrawPix(uint8_t registro)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tope = total_conv[lapso];
 80033d6:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <DrawPix+0x30>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <DrawPix+0x34>)
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	73fb      	strb	r3, [r7, #15]
	if (registro < tope)
 80033e2:	79fa      	ldrb	r2, [r7, #7]
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d204      	bcs.n	80033f4 <DrawPix+0x28>
	{
		DrawPixColor(registro, 0);
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f808 	bl	8003404 <DrawPixColor>
	}

}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200005fd 	.word	0x200005fd
 8003400:	20000004 	.word	0x20000004

08003404 <DrawPixColor>:


// Se le indica el registro, grupo de colo (dark si/no) e imprime los pixeles de canales
void DrawPixColor(uint8_t registro, _Bool dark)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	460a      	mov	r2, r1
 800340e:	71fb      	strb	r3, [r7, #7]
 8003410:	4613      	mov	r3, r2
 8003412:	71bb      	strb	r3, [r7, #6]
	uint8_t activo;

	for (uint8_t canal = 0; canal < 4; canal++)
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]
 8003418:	e02a      	b.n	8003470 <DrawPixColor+0x6c>
	{
		activo = dvm_set.byte & 0x0F;
 800341a:	4b19      	ldr	r3, [pc, #100]	@ (8003480 <DrawPixColor+0x7c>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	73bb      	strb	r3, [r7, #14]
		activo &= 0x01 << canal;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	2201      	movs	r2, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	b25a      	sxtb	r2, r3
 800342e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003432:	4013      	ands	r3, r2
 8003434:	b25b      	sxtb	r3, r3
 8003436:	73bb      	strb	r3, [r7, #14]
		if (activo)
 8003438:	7bbb      	ldrb	r3, [r7, #14]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d015      	beq.n	800346a <DrawPixColor+0x66>
		{
			if (dark)
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <DrawPixColor+0x54>
			{
				DrawPixCanal(registro, canal, ch_colorbk[canal]);
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	4a0f      	ldr	r2, [pc, #60]	@ (8003484 <DrawPixColor+0x80>)
 8003448:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800344c:	7bf9      	ldrb	r1, [r7, #15]
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f81b 	bl	800348c <DrawPixCanal>
 8003456:	e008      	b.n	800346a <DrawPixColor+0x66>
			}
			else
			{
				DrawPixCanal(registro, canal, ch_color[canal]);
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	4a0b      	ldr	r2, [pc, #44]	@ (8003488 <DrawPixColor+0x84>)
 800345c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003460:	7bf9      	ldrb	r1, [r7, #15]
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 f811 	bl	800348c <DrawPixCanal>
	for (uint8_t canal = 0; canal < 4; canal++)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	3301      	adds	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d9d1      	bls.n	800341a <DrawPixColor+0x16>
			}
		}
	}
}
 8003476:	bf00      	nop
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000298 	.word	0x20000298
 8003484:	2000002c 	.word	0x2000002c
 8003488:	20000024 	.word	0x20000024

0800348c <DrawPixCanal>:


// Dibuja un pixel o linea que une el valor anterior y el actual
void DrawPixCanal(uint8_t registro, uint8_t canal, uint16_t color)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af02      	add	r7, sp, #8
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
 8003496:	460b      	mov	r3, r1
 8003498:	71bb      	strb	r3, [r7, #6]
 800349a:	4613      	mov	r3, r2
 800349c:	80bb      	strh	r3, [r7, #4]
	uint8_t registro_, y_pixtmp, _y_pixtmp;
	uint8_t x_pix, y_pix, _y_pix, alto;
	uint16_t resta = 139;
 800349e:	238b      	movs	r3, #139	@ 0x8b
 80034a0:	827b      	strh	r3, [r7, #18]

	SetLimites();
 80034a2:	f7ff fc73 	bl	8002d8c <SetLimites>
	if (redraw)
 80034a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003610 <DrawPixCanal+0x184>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <DrawPixCanal+0x36>
	{
		redraw = false;
 80034ae:	4b58      	ldr	r3, [pc, #352]	@ (8003610 <DrawPixCanal+0x184>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
		DrawGrilla();
 80034b4:	f7ff fb68 	bl	8002b88 <DrawGrilla>
		DrawRangoGrilla();
 80034b8:	f7ff fcee 	bl	8002e98 <DrawRangoGrilla>
		RedrawPrevios();
 80034bc:	f000 f908 	bl	80036d0 <RedrawPrevios>
				ili_draw_pixel(x_pix + 2, y_pix, color);
				ili_draw_pixel(x_pix + 3, y_pix, color);
			}
		}
	}
}
 80034c0:	e0a1      	b.n	8003606 <DrawPixCanal+0x17a>
		x_pix = 32 + (registro * salto_pix[lapso]);
 80034c2:	4b54      	ldr	r3, [pc, #336]	@ (8003614 <DrawPixCanal+0x188>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b53      	ldr	r3, [pc, #332]	@ (8003618 <DrawPixCanal+0x18c>)
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	79fa      	ldrb	r2, [r7, #7]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3320      	adds	r3, #32
 80034d6:	747b      	strb	r3, [r7, #17]
		if(registro > 0)
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <DrawPixCanal+0x5a>
			registro_ = registro - 1;
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
 80034e4:	e006      	b.n	80034f4 <DrawPixCanal+0x68>
		else registro_ = total_conv[lapso] - 1;
 80034e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003614 <DrawPixCanal+0x188>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	4b4b      	ldr	r3, [pc, #300]	@ (800361c <DrawPixCanal+0x190>)
 80034ee:	5c9b      	ldrb	r3, [r3, r2]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	75fb      	strb	r3, [r7, #23]
		y_pixtmp = pix[registro][canal];
 80034f4:	79fa      	ldrb	r2, [r7, #7]
 80034f6:	79bb      	ldrb	r3, [r7, #6]
 80034f8:	4949      	ldr	r1, [pc, #292]	@ (8003620 <DrawPixCanal+0x194>)
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	440a      	add	r2, r1
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	75bb      	strb	r3, [r7, #22]
		_y_pixtmp = pix[registro_][canal];
 8003504:	7dfa      	ldrb	r2, [r7, #23]
 8003506:	79bb      	ldrb	r3, [r7, #6]
 8003508:	4945      	ldr	r1, [pc, #276]	@ (8003620 <DrawPixCanal+0x194>)
 800350a:	0092      	lsls	r2, r2, #2
 800350c:	440a      	add	r2, r1
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	757b      	strb	r3, [r7, #21]
		if((rango_h < 2) || (rango_l > 0))
 8003514:	4b43      	ldr	r3, [pc, #268]	@ (8003624 <DrawPixCanal+0x198>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d903      	bls.n	8003524 <DrawPixCanal+0x98>
 800351c:	4b42      	ldr	r3, [pc, #264]	@ (8003628 <DrawPixCanal+0x19c>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <DrawPixCanal+0xa4>
			y_pixtmp = y_pixtmp << 1;
 8003524:	7dbb      	ldrb	r3, [r7, #22]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	75bb      	strb	r3, [r7, #22]
			_y_pixtmp = _y_pixtmp << 1;
 800352a:	7d7b      	ldrb	r3, [r7, #21]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	757b      	strb	r3, [r7, #21]
		if(rango_l == 1) resta = 219;
 8003530:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <DrawPixCanal+0x19c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <DrawPixCanal+0xb0>
 8003538:	23db      	movs	r3, #219	@ 0xdb
 800353a:	827b      	strh	r3, [r7, #18]
		if(rango_l == 2) resta = 259;
 800353c:	4b3a      	ldr	r3, [pc, #232]	@ (8003628 <DrawPixCanal+0x19c>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d102      	bne.n	800354a <DrawPixCanal+0xbe>
 8003544:	f240 1303 	movw	r3, #259	@ 0x103
 8003548:	827b      	strh	r3, [r7, #18]
		y_pix = (uint8_t)(resta - y_pixtmp);
 800354a:	8a7b      	ldrh	r3, [r7, #18]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	7dbb      	ldrb	r3, [r7, #22]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	743b      	strb	r3, [r7, #16]
		_y_pix = (uint8_t)(resta - _y_pixtmp);
 8003554:	8a7b      	ldrh	r3, [r7, #18]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	7d7b      	ldrb	r3, [r7, #21]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	73fb      	strb	r3, [r7, #15]
		if (y_pix > _y_pix)
 800355e:	7c3a      	ldrb	r2, [r7, #16]
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	429a      	cmp	r2, r3
 8003564:	d904      	bls.n	8003570 <DrawPixCanal+0xe4>
			alto= _y_pix - y_pix;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	7c3b      	ldrb	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	73bb      	strb	r3, [r7, #14]
 800356e:	e003      	b.n	8003578 <DrawPixCanal+0xec>
			alto= y_pix - _y_pix;
 8003570:	7c3a      	ldrb	r2, [r7, #16]
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	73bb      	strb	r3, [r7, #14]
		alto= _y_pix - y_pix;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	7c3b      	ldrb	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	73bb      	strb	r3, [r7, #14]
		if ((y_pix < 150) && (_y_pix < 150))
 8003580:	7c3b      	ldrb	r3, [r7, #16]
 8003582:	2b95      	cmp	r3, #149	@ 0x95
 8003584:	d83f      	bhi.n	8003606 <DrawPixCanal+0x17a>
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	2b95      	cmp	r3, #149	@ 0x95
 800358a:	d83c      	bhi.n	8003606 <DrawPixCanal+0x17a>
			if (alto > 1)
 800358c:	7bbb      	ldrb	r3, [r7, #14]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d90b      	bls.n	80035aa <DrawPixCanal+0x11e>
				_ili_draw_fast_v_line(x_pix, y_pix, _y_pix, 1, color);
 8003592:	7c7b      	ldrb	r3, [r7, #17]
 8003594:	b298      	uxth	r0, r3
 8003596:	7c3b      	ldrb	r3, [r7, #16]
 8003598:	b299      	uxth	r1, r3
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	b29a      	uxth	r2, r3
 800359e:	88bb      	ldrh	r3, [r7, #4]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2301      	movs	r3, #1
 80035a4:	f7fe fb89 	bl	8001cba <_ili_draw_fast_v_line>
 80035a8:	e007      	b.n	80035ba <DrawPixCanal+0x12e>
				ili_draw_pixel(x_pix, y_pix, color);
 80035aa:	7c7b      	ldrb	r3, [r7, #17]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	7c3a      	ldrb	r2, [r7, #16]
 80035b0:	b291      	uxth	r1, r2
 80035b2:	88ba      	ldrh	r2, [r7, #4]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fbbf 	bl	8001d38 <ili_draw_pixel>
			if (lapso < 2) ili_draw_pixel(x_pix + 1, y_pix, color); 	//lapso = 1
 80035ba:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <DrawPixCanal+0x188>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d809      	bhi.n	80035d6 <DrawPixCanal+0x14a>
 80035c2:	7c7b      	ldrb	r3, [r7, #17]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	7c3a      	ldrb	r2, [r7, #16]
 80035cc:	b291      	uxth	r1, r2
 80035ce:	88ba      	ldrh	r2, [r7, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fbb1 	bl	8001d38 <ili_draw_pixel>
			if (lapso < 1)												//lapso = 0
 80035d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003614 <DrawPixCanal+0x188>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d113      	bne.n	8003606 <DrawPixCanal+0x17a>
				ili_draw_pixel(x_pix + 2, y_pix, color);
 80035de:	7c7b      	ldrb	r3, [r7, #17]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3302      	adds	r3, #2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	7c3a      	ldrb	r2, [r7, #16]
 80035e8:	b291      	uxth	r1, r2
 80035ea:	88ba      	ldrh	r2, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fba3 	bl	8001d38 <ili_draw_pixel>
				ili_draw_pixel(x_pix + 3, y_pix, color);
 80035f2:	7c7b      	ldrb	r3, [r7, #17]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3303      	adds	r3, #3
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	7c3a      	ldrb	r2, [r7, #16]
 80035fc:	b291      	uxth	r1, r2
 80035fe:	88ba      	ldrh	r2, [r7, #4]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe fb99 	bl	8001d38 <ili_draw_pixel>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000628 	.word	0x20000628
 8003614:	200005fd 	.word	0x200005fd
 8003618:	20000010 	.word	0x20000010
 800361c:	20000004 	.word	0x20000004
 8003620:	2000035c 	.word	0x2000035c
 8003624:	20000017 	.word	0x20000017
 8003628:	20000602 	.word	0x20000602

0800362c <DrawBGCanal>:



//Dibuja un rectangulo negro para borrar un canal
void DrawBGCanal(uint8_t canal)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af02      	add	r7, sp, #8
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
	uint16_t y_pos = 3 + (38 * canal);
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	b29b      	uxth	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	00d2      	lsls	r2, r2, #3
 800363e:	441a      	add	r2, r3
 8003640:	0052      	lsls	r2, r2, #1
 8003642:	4413      	add	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	b29b      	uxth	r3, r3
 8003648:	3303      	adds	r3, #3
 800364a:	81fb      	strh	r3, [r7, #14]
	ili_fill_rect_fast(206, y_pos, 110, 30, ILI_BLACK);
 800364c:	89f9      	ldrh	r1, [r7, #14]
 800364e:	2300      	movs	r3, #0
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	231e      	movs	r3, #30
 8003654:	226e      	movs	r2, #110	@ 0x6e
 8003656:	20ce      	movs	r0, #206	@ 0xce
 8003658:	f7fe fa22 	bl	8001aa0 <ili_fill_rect_fast>
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <DrawTrazosBack>:

//Dibuja las curvas correspondientes a los canales activos en modo oscuro (back)
void DrawTrazosBack(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
	SetLimites();
 8003668:	f7ff fb90 	bl	8002d8c <SetLimites>
	ReDrawTrazos();
 800366c:	f000 f802 	bl	8003674 <ReDrawTrazos>
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}

08003674 <ReDrawTrazos>:


void ReDrawTrazos(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
	uint8_t tope = total_conv[lapso];
 800367a:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <ReDrawTrazos+0x4c>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <ReDrawTrazos+0x50>)
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	71bb      	strb	r3, [r7, #6]
	DrawRangoGrilla();
 8003686:	f7ff fc07 	bl	8002e98 <DrawRangoGrilla>
	if (rastro)
 800368a:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <ReDrawTrazos+0x54>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <ReDrawTrazos+0x3c>
	{
		for (uint8_t registro = 0; registro < tope; registro++)
 8003692:	2300      	movs	r3, #0
 8003694:	71fb      	strb	r3, [r7, #7]
 8003696:	e007      	b.n	80036a8 <ReDrawTrazos+0x34>
		{
			DrawPixColor(registro, 1);
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2101      	movs	r1, #1
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff feb1 	bl	8003404 <DrawPixColor>
		for (uint8_t registro = 0; registro < tope; registro++)
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	3301      	adds	r3, #1
 80036a6:	71fb      	strb	r3, [r7, #7]
 80036a8:	79fa      	ldrb	r2, [r7, #7]
 80036aa:	79bb      	ldrb	r3, [r7, #6]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d3f3      	bcc.n	8003698 <ReDrawTrazos+0x24>
		}
	}
	r_count = 0;
 80036b0:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <ReDrawTrazos+0x58>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200005fd 	.word	0x200005fd
 80036c4:	20000004 	.word	0x20000004
 80036c8:	20000622 	.word	0x20000622
 80036cc:	200005f8 	.word	0x200005f8

080036d0 <RedrawPrevios>:


void RedrawPrevios(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
	for (uint8_t registro = 0; registro < (r_count + 1); registro++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	71fb      	strb	r3, [r7, #7]
 80036da:	e007      	b.n	80036ec <RedrawPrevios+0x1c>
	{
		DrawPixColor(registro, 0);
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fe8f 	bl	8003404 <DrawPixColor>
	for (uint8_t registro = 0; registro < (r_count + 1); registro++)
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	3301      	adds	r3, #1
 80036ea:	71fb      	strb	r3, [r7, #7]
 80036ec:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <RedrawPrevios+0x30>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	79fa      	ldrb	r2, [r7, #7]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d9f2      	bls.n	80036dc <RedrawPrevios+0xc>
	}
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	200005f8 	.word	0x200005f8
 8003704:	00000000 	.word	0x00000000

08003708 <DrawSTA>:

void DrawSTA(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af02      	add	r7, sp, #8
	uint8_t  y_pos, activo;
	//for (uint8_t canal = 0; canal < 4; canal++)
	for (uint8_t canal = 0; canal < 4; canal++)
 800370e:	2300      	movs	r3, #0
 8003710:	71fb      	strb	r3, [r7, #7]
 8003712:	e0d0      	b.n	80038b6 <DrawSTA+0x1ae>
	{
		activo = dvm_set.byte & 0x0F;
 8003714:	4b70      	ldr	r3, [pc, #448]	@ (80038d8 <DrawSTA+0x1d0>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	71bb      	strb	r3, [r7, #6]
		activo &= 0x01 << canal;
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	2201      	movs	r2, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	b25a      	sxtb	r2, r3
 8003728:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800372c:	4013      	ands	r3, r2
 800372e:	b25b      	sxtb	r3, r3
 8003730:	71bb      	strb	r3, [r7, #6]
		if (activo)
 8003732:	79bb      	ldrb	r3, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80bb 	beq.w	80038b0 <DrawSTA+0x1a8>
		{
			y_pos = 170 + (canal * 16);
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3b56      	subs	r3, #86	@ 0x56
 8003742:	717b      	strb	r3, [r7, #5]
			fpv = sta[canal].min_v * 3.3 /4095;
 8003744:	79fa      	ldrb	r2, [r7, #7]
 8003746:	4965      	ldr	r1, [pc, #404]	@ (80038dc <DrawSTA+0x1d4>)
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	440b      	add	r3, r1
 8003752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fc fe54 	bl	8000404 <__aeabi_i2d>
 800375c:	a35a      	add	r3, pc, #360	@ (adr r3, 80038c8 <DrawSTA+0x1c0>)
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	f7fc feb9 	bl	80004d8 <__aeabi_dmul>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	a358      	add	r3, pc, #352	@ (adr r3, 80038d0 <DrawSTA+0x1c8>)
 8003770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003774:	f7fc ffda 	bl	800072c <__aeabi_ddiv>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	f7fd f982 	bl	8000a88 <__aeabi_d2f>
 8003784:	4603      	mov	r3, r0
 8003786:	4a56      	ldr	r2, [pc, #344]	@ (80038e0 <DrawSTA+0x1d8>)
 8003788:	6013      	str	r3, [r2, #0]
			sprintf(texto, "%.3f", fpv);
 800378a:	4b55      	ldr	r3, [pc, #340]	@ (80038e0 <DrawSTA+0x1d8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc fe4a 	bl	8000428 <__aeabi_f2d>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4952      	ldr	r1, [pc, #328]	@ (80038e4 <DrawSTA+0x1dc>)
 800379a:	4853      	ldr	r0, [pc, #332]	@ (80038e8 <DrawSTA+0x1e0>)
 800379c:	f004 f868 	bl	8007870 <siprintf>
			ili_draw_string_withbg(13, y_pos, texto, ch_color[canal], ILI_BLACK, &verdana_14);
 80037a0:	797b      	ldrb	r3, [r7, #5]
 80037a2:	b299      	uxth	r1, r3
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	4a51      	ldr	r2, [pc, #324]	@ (80038ec <DrawSTA+0x1e4>)
 80037a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ac:	4a50      	ldr	r2, [pc, #320]	@ (80038f0 <DrawSTA+0x1e8>)
 80037ae:	9201      	str	r2, [sp, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	9200      	str	r2, [sp, #0]
 80037b4:	4a4c      	ldr	r2, [pc, #304]	@ (80038e8 <DrawSTA+0x1e0>)
 80037b6:	200d      	movs	r0, #13
 80037b8:	f7fd ffbc 	bl	8001734 <ili_draw_string_withbg>

			fpv = sta[canal].med_v * 3.3 /4095;
 80037bc:	79fa      	ldrb	r2, [r7, #7]
 80037be:	4947      	ldr	r1, [pc, #284]	@ (80038dc <DrawSTA+0x1d4>)
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	440b      	add	r3, r1
 80037ca:	3302      	adds	r3, #2
 80037cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fe17 	bl	8000404 <__aeabi_i2d>
 80037d6:	a33c      	add	r3, pc, #240	@ (adr r3, 80038c8 <DrawSTA+0x1c0>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f7fc fe7c 	bl	80004d8 <__aeabi_dmul>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	a339      	add	r3, pc, #228	@ (adr r3, 80038d0 <DrawSTA+0x1c8>)
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	f7fc ff9d 	bl	800072c <__aeabi_ddiv>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	f7fd f945 	bl	8000a88 <__aeabi_d2f>
 80037fe:	4603      	mov	r3, r0
 8003800:	4a37      	ldr	r2, [pc, #220]	@ (80038e0 <DrawSTA+0x1d8>)
 8003802:	6013      	str	r3, [r2, #0]
			sprintf(texto, "%.3f", fpv);
 8003804:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <DrawSTA+0x1d8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fe0d 	bl	8000428 <__aeabi_f2d>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4934      	ldr	r1, [pc, #208]	@ (80038e4 <DrawSTA+0x1dc>)
 8003814:	4834      	ldr	r0, [pc, #208]	@ (80038e8 <DrawSTA+0x1e0>)
 8003816:	f004 f82b 	bl	8007870 <siprintf>
			ili_draw_string_withbg(79, y_pos, texto, ch_color[canal], ILI_BLACK, &verdana_14);
 800381a:	797b      	ldrb	r3, [r7, #5]
 800381c:	b299      	uxth	r1, r3
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	4a32      	ldr	r2, [pc, #200]	@ (80038ec <DrawSTA+0x1e4>)
 8003822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003826:	4a32      	ldr	r2, [pc, #200]	@ (80038f0 <DrawSTA+0x1e8>)
 8003828:	9201      	str	r2, [sp, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	9200      	str	r2, [sp, #0]
 800382e:	4a2e      	ldr	r2, [pc, #184]	@ (80038e8 <DrawSTA+0x1e0>)
 8003830:	204f      	movs	r0, #79	@ 0x4f
 8003832:	f7fd ff7f 	bl	8001734 <ili_draw_string_withbg>

			fpv = sta[canal].max_v * 3.3 /4095;
 8003836:	79fa      	ldrb	r2, [r7, #7]
 8003838:	4928      	ldr	r1, [pc, #160]	@ (80038dc <DrawSTA+0x1d4>)
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	440b      	add	r3, r1
 8003844:	3304      	adds	r3, #4
 8003846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fdda 	bl	8000404 <__aeabi_i2d>
 8003850:	a31d      	add	r3, pc, #116	@ (adr r3, 80038c8 <DrawSTA+0x1c0>)
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f7fc fe3f 	bl	80004d8 <__aeabi_dmul>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	a31b      	add	r3, pc, #108	@ (adr r3, 80038d0 <DrawSTA+0x1c8>)
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f7fc ff60 	bl	800072c <__aeabi_ddiv>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	f7fd f908 	bl	8000a88 <__aeabi_d2f>
 8003878:	4603      	mov	r3, r0
 800387a:	4a19      	ldr	r2, [pc, #100]	@ (80038e0 <DrawSTA+0x1d8>)
 800387c:	6013      	str	r3, [r2, #0]
			sprintf(texto, "%.3f", fpv);
 800387e:	4b18      	ldr	r3, [pc, #96]	@ (80038e0 <DrawSTA+0x1d8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fdd0 	bl	8000428 <__aeabi_f2d>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4915      	ldr	r1, [pc, #84]	@ (80038e4 <DrawSTA+0x1dc>)
 800388e:	4816      	ldr	r0, [pc, #88]	@ (80038e8 <DrawSTA+0x1e0>)
 8003890:	f003 ffee 	bl	8007870 <siprintf>
			ili_draw_string_withbg(147, y_pos, texto, ch_color[canal], ILI_BLACK, &verdana_14);
 8003894:	797b      	ldrb	r3, [r7, #5]
 8003896:	b299      	uxth	r1, r3
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	4a14      	ldr	r2, [pc, #80]	@ (80038ec <DrawSTA+0x1e4>)
 800389c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038a0:	4a13      	ldr	r2, [pc, #76]	@ (80038f0 <DrawSTA+0x1e8>)
 80038a2:	9201      	str	r2, [sp, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	9200      	str	r2, [sp, #0]
 80038a8:	4a0f      	ldr	r2, [pc, #60]	@ (80038e8 <DrawSTA+0x1e0>)
 80038aa:	2093      	movs	r0, #147	@ 0x93
 80038ac:	f7fd ff42 	bl	8001734 <ili_draw_string_withbg>
	for (uint8_t canal = 0; canal < 4; canal++)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	3301      	adds	r3, #1
 80038b4:	71fb      	strb	r3, [r7, #7]
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	f67f af2b 	bls.w	8003714 <DrawSTA+0xc>
		}

	}
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	66666666 	.word	0x66666666
 80038cc:	400a6666 	.word	0x400a6666
 80038d0:	00000000 	.word	0x00000000
 80038d4:	40affe00 	.word	0x40affe00
 80038d8:	20000298 	.word	0x20000298
 80038dc:	20000344 	.word	0x20000344
 80038e0:	200005ec 	.word	0x200005ec
 80038e4:	08009bd4 	.word	0x08009bd4
 80038e8:	200005dc 	.word	0x200005dc
 80038ec:	20000024 	.word	0x20000024
 80038f0:	0800b1a0 	.word	0x0800b1a0

080038f4 <SetSTA>:


void SetSTA(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
	uint16_t min_tmp, med_tmp, max_tmp, old_tmp;

	for (uint8_t canal = 0; canal < 4; canal++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	73fb      	strb	r3, [r7, #15]
 80038fe:	e095      	b.n	8003a2c <SetSTA+0x138>
	{
		min_tmp = SetMinima(canal);
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f908 	bl	8003b18 <SetMinima>
 8003908:	4603      	mov	r3, r0
 800390a:	81bb      	strh	r3, [r7, #12]
		old_tmp = sta[canal].min_v;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	494c      	ldr	r1, [pc, #304]	@ (8003a40 <SetSTA+0x14c>)
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	440b      	add	r3, r1
 800391a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391e:	817b      	strh	r3, [r7, #10]
		if (old_tmp > 0)
 8003920:	897b      	ldrh	r3, [r7, #10]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d010      	beq.n	8003948 <SetSTA+0x54>
		{
			sta[canal].min_v = (min_tmp + old_tmp) / 2;
 8003926:	89ba      	ldrh	r2, [r7, #12]
 8003928:	897b      	ldrh	r3, [r7, #10]
 800392a:	4413      	add	r3, r2
 800392c:	0fda      	lsrs	r2, r3, #31
 800392e:	4413      	add	r3, r2
 8003930:	105b      	asrs	r3, r3, #1
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	b218      	sxth	r0, r3
 8003936:	4942      	ldr	r1, [pc, #264]	@ (8003a40 <SetSTA+0x14c>)
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	440b      	add	r3, r1
 8003942:	4602      	mov	r2, r0
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	e00a      	b.n	800395e <SetSTA+0x6a>
		}
		else sta[canal].min_v = min_tmp;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 800394e:	493c      	ldr	r1, [pc, #240]	@ (8003a40 <SetSTA+0x14c>)
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	440b      	add	r3, r1
 800395a:	4602      	mov	r2, r0
 800395c:	801a      	strh	r2, [r3, #0]

		med_tmp = SetPromedio(canal);
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f941 	bl	8003be8 <SetPromedio>
 8003966:	4603      	mov	r3, r0
 8003968:	813b      	strh	r3, [r7, #8]
		old_tmp = sta[canal].med_v;
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	4934      	ldr	r1, [pc, #208]	@ (8003a40 <SetSTA+0x14c>)
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	440b      	add	r3, r1
 8003978:	3302      	adds	r3, #2
 800397a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800397e:	817b      	strh	r3, [r7, #10]
		if (old_tmp > 0)
 8003980:	897b      	ldrh	r3, [r7, #10]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d011      	beq.n	80039aa <SetSTA+0xb6>
		{
			sta[canal].med_v = (med_tmp + old_tmp) / 2;
 8003986:	893a      	ldrh	r2, [r7, #8]
 8003988:	897b      	ldrh	r3, [r7, #10]
 800398a:	4413      	add	r3, r2
 800398c:	0fda      	lsrs	r2, r3, #31
 800398e:	4413      	add	r3, r2
 8003990:	105b      	asrs	r3, r3, #1
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	b218      	sxth	r0, r3
 8003996:	492a      	ldr	r1, [pc, #168]	@ (8003a40 <SetSTA+0x14c>)
 8003998:	4613      	mov	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4413      	add	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	440b      	add	r3, r1
 80039a2:	3302      	adds	r3, #2
 80039a4:	4602      	mov	r2, r0
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	e00b      	b.n	80039c2 <SetSTA+0xce>
		}
		else sta[canal].med_v = med_tmp;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80039b0:	4923      	ldr	r1, [pc, #140]	@ (8003a40 <SetSTA+0x14c>)
 80039b2:	4613      	mov	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	440b      	add	r3, r1
 80039bc:	3302      	adds	r3, #2
 80039be:	4602      	mov	r2, r0
 80039c0:	801a      	strh	r2, [r3, #0]

		max_tmp = SetMaxima(canal);
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f8df 	bl	8003b88 <SetMaxima>
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
		old_tmp = sta[canal].max_v;
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	491b      	ldr	r1, [pc, #108]	@ (8003a40 <SetSTA+0x14c>)
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	440b      	add	r3, r1
 80039dc:	3304      	adds	r3, #4
 80039de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e2:	817b      	strh	r3, [r7, #10]
		if (old_tmp > 0)
 80039e4:	897b      	ldrh	r3, [r7, #10]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d011      	beq.n	8003a0e <SetSTA+0x11a>
		{
			sta[canal].max_v =  (max_tmp + old_tmp) / 2;
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	897b      	ldrh	r3, [r7, #10]
 80039ee:	4413      	add	r3, r2
 80039f0:	0fda      	lsrs	r2, r3, #31
 80039f2:	4413      	add	r3, r2
 80039f4:	105b      	asrs	r3, r3, #1
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	b218      	sxth	r0, r3
 80039fa:	4911      	ldr	r1, [pc, #68]	@ (8003a40 <SetSTA+0x14c>)
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	440b      	add	r3, r1
 8003a06:	3304      	adds	r3, #4
 8003a08:	4602      	mov	r2, r0
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	e00b      	b.n	8003a26 <SetSTA+0x132>
		}
		else sta[canal].max_v = max_tmp;
 8003a0e:	7bfa      	ldrb	r2, [r7, #15]
 8003a10:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a14:	490a      	ldr	r1, [pc, #40]	@ (8003a40 <SetSTA+0x14c>)
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	440b      	add	r3, r1
 8003a20:	3304      	adds	r3, #4
 8003a22:	4602      	mov	r2, r0
 8003a24:	801a      	strh	r2, [r3, #0]
	for (uint8_t canal = 0; canal < 4; canal++)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	f67f af66 	bls.w	8003900 <SetSTA+0xc>
	}
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000344 	.word	0x20000344

08003a44 <DrawSTAStatus>:

void DrawSTAStatus(uint8_t canal, _Bool activo)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	71fb      	strb	r3, [r7, #7]
 8003a50:	4613      	mov	r3, r2
 8003a52:	71bb      	strb	r3, [r7, #6]
	char txt[10];
	if (activo)
 8003a54:	79bb      	ldrb	r3, [r7, #6]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <DrawSTAStatus+0x2e>
	{
		strcpy(txt, "      ");
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	4a28      	ldr	r2, [pc, #160]	@ (8003b00 <DrawSTAStatus+0xbc>)
 8003a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a64:	6018      	str	r0, [r3, #0]
 8003a66:	3304      	adds	r3, #4
 8003a68:	8019      	strh	r1, [r3, #0]
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	0c0a      	lsrs	r2, r1, #16
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	e007      	b.n	8003a82 <DrawSTAStatus+0x3e>
	}
	else
	{
		strcpy(txt, "-----");
 8003a72:	f107 030c 	add.w	r3, r7, #12
 8003a76:	4a23      	ldr	r2, [pc, #140]	@ (8003b04 <DrawSTAStatus+0xc0>)
 8003a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a7c:	6018      	str	r0, [r3, #0]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	8019      	strh	r1, [r3, #0]
	}
	v_pos = 170 + (16 * box_sel);
 8003a82:	4b21      	ldr	r3, [pc, #132]	@ (8003b08 <DrawSTAStatus+0xc4>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b56      	subs	r3, #86	@ 0x56
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b0c <DrawSTAStatus+0xc8>)
 8003a90:	701a      	strb	r2, [r3, #0]
	ili_draw_string_withbg(13, v_pos, txt, ch_color[canal], ILI_BLACK, &font_fixedsys_mono_16);
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <DrawSTAStatus+0xc8>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <DrawSTAStatus+0xcc>)
 8003a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aa0:	f107 020c 	add.w	r2, r7, #12
 8003aa4:	491b      	ldr	r1, [pc, #108]	@ (8003b14 <DrawSTAStatus+0xd0>)
 8003aa6:	9101      	str	r1, [sp, #4]
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	9100      	str	r1, [sp, #0]
 8003aac:	4601      	mov	r1, r0
 8003aae:	200d      	movs	r0, #13
 8003ab0:	f7fd fe40 	bl	8001734 <ili_draw_string_withbg>
	ili_draw_string_withbg(79, v_pos, txt, ch_color[canal], ILI_BLACK, &font_fixedsys_mono_16);
 8003ab4:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <DrawSTAStatus+0xc8>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	4a14      	ldr	r2, [pc, #80]	@ (8003b10 <DrawSTAStatus+0xcc>)
 8003abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac2:	f107 020c 	add.w	r2, r7, #12
 8003ac6:	4913      	ldr	r1, [pc, #76]	@ (8003b14 <DrawSTAStatus+0xd0>)
 8003ac8:	9101      	str	r1, [sp, #4]
 8003aca:	2100      	movs	r1, #0
 8003acc:	9100      	str	r1, [sp, #0]
 8003ace:	4601      	mov	r1, r0
 8003ad0:	204f      	movs	r0, #79	@ 0x4f
 8003ad2:	f7fd fe2f 	bl	8001734 <ili_draw_string_withbg>
	ili_draw_string_withbg(147, v_pos, txt, ch_color[canal], ILI_BLACK, &font_fixedsys_mono_16);
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <DrawSTAStatus+0xc8>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	4a0c      	ldr	r2, [pc, #48]	@ (8003b10 <DrawSTAStatus+0xcc>)
 8003ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ae4:	f107 020c 	add.w	r2, r7, #12
 8003ae8:	490a      	ldr	r1, [pc, #40]	@ (8003b14 <DrawSTAStatus+0xd0>)
 8003aea:	9101      	str	r1, [sp, #4]
 8003aec:	2100      	movs	r1, #0
 8003aee:	9100      	str	r1, [sp, #0]
 8003af0:	4601      	mov	r1, r0
 8003af2:	2093      	movs	r0, #147	@ 0x93
 8003af4:	f7fd fe1e 	bl	8001734 <ili_draw_string_withbg>
}
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	08009bdc 	.word	0x08009bdc
 8003b04:	08009be4 	.word	0x08009be4
 8003b08:	200005f0 	.word	0x200005f0
 8003b0c:	200005fb 	.word	0x200005fb
 8003b10:	20000024 	.word	0x20000024
 8003b14:	0800a95c 	.word	0x0800a95c

08003b18 <SetMinima>:

uint16_t SetMinima(uint8_t canal)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
	uint16_t dvm_temp = dvm[canal][0].muestra;
 8003b22:	79fa      	ldrb	r2, [r7, #7]
 8003b24:	4917      	ldr	r1, [pc, #92]	@ (8003b84 <SetMinima+0x6c>)
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	81fb      	strh	r3, [r7, #14]

	for (uint8_t r_dvm = 1; r_dvm < 9; r_dvm++)
 8003b34:	2301      	movs	r3, #1
 8003b36:	737b      	strb	r3, [r7, #13]
 8003b38:	e01a      	b.n	8003b70 <SetMinima+0x58>
	{
		if (dvm[canal][r_dvm].muestra < dvm_temp) dvm_temp = dvm[canal][r_dvm].muestra;
 8003b3a:	79fa      	ldrb	r2, [r7, #7]
 8003b3c:	7b79      	ldrb	r1, [r7, #13]
 8003b3e:	4811      	ldr	r0, [pc, #68]	@ (8003b84 <SetMinima+0x6c>)
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	440b      	add	r3, r1
 8003b4a:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8003b4e:	89fa      	ldrh	r2, [r7, #14]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d90a      	bls.n	8003b6a <SetMinima+0x52>
 8003b54:	79fa      	ldrb	r2, [r7, #7]
 8003b56:	7b79      	ldrb	r1, [r7, #13]
 8003b58:	480a      	ldr	r0, [pc, #40]	@ (8003b84 <SetMinima+0x6c>)
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	440b      	add	r3, r1
 8003b64:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8003b68:	81fb      	strh	r3, [r7, #14]
	for (uint8_t r_dvm = 1; r_dvm < 9; r_dvm++)
 8003b6a:	7b7b      	ldrb	r3, [r7, #13]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	737b      	strb	r3, [r7, #13]
 8003b70:	7b7b      	ldrb	r3, [r7, #13]
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d9e1      	bls.n	8003b3a <SetMinima+0x22>
	}
	return dvm_temp;
 8003b76:	89fb      	ldrh	r3, [r7, #14]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	200002a4 	.word	0x200002a4

08003b88 <SetMaxima>:


uint16_t SetMaxima(uint8_t canal)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
	uint16_t dvm_temp = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	81fb      	strh	r3, [r7, #14]

		for (uint8_t r_dvm = 0; r_dvm < 9; r_dvm++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	737b      	strb	r3, [r7, #13]
 8003b9a:	e01a      	b.n	8003bd2 <SetMaxima+0x4a>
		{
			if (dvm[canal][r_dvm].muestra > dvm_temp) dvm_temp = dvm[canal][r_dvm].muestra;
 8003b9c:	79fa      	ldrb	r2, [r7, #7]
 8003b9e:	7b79      	ldrb	r1, [r7, #13]
 8003ba0:	4810      	ldr	r0, [pc, #64]	@ (8003be4 <SetMaxima+0x5c>)
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	440b      	add	r3, r1
 8003bac:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8003bb0:	89fa      	ldrh	r2, [r7, #14]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d20a      	bcs.n	8003bcc <SetMaxima+0x44>
 8003bb6:	79fa      	ldrb	r2, [r7, #7]
 8003bb8:	7b79      	ldrb	r1, [r7, #13]
 8003bba:	480a      	ldr	r0, [pc, #40]	@ (8003be4 <SetMaxima+0x5c>)
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	440b      	add	r3, r1
 8003bc6:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8003bca:	81fb      	strh	r3, [r7, #14]
		for (uint8_t r_dvm = 0; r_dvm < 9; r_dvm++)
 8003bcc:	7b7b      	ldrb	r3, [r7, #13]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	737b      	strb	r3, [r7, #13]
 8003bd2:	7b7b      	ldrb	r3, [r7, #13]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d9e1      	bls.n	8003b9c <SetMaxima+0x14>
		}
		return dvm_temp;
 8003bd8:	89fb      	ldrh	r3, [r7, #14]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	200002a4 	.word	0x200002a4

08003be8 <SetPromedio>:


uint16_t SetPromedio(uint8_t canal)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
	uint16_t media;
	uint32_t suma = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
	for (uint8_t r_dvm = 0; r_dvm < 9; r_dvm++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	72fb      	strb	r3, [r7, #11]
 8003bfa:	e010      	b.n	8003c1e <SetPromedio+0x36>
	{
		suma += dvm[canal][r_dvm].muestra;
 8003bfc:	79fa      	ldrb	r2, [r7, #7]
 8003bfe:	7af9      	ldrb	r1, [r7, #11]
 8003c00:	480e      	ldr	r0, [pc, #56]	@ (8003c3c <SetPromedio+0x54>)
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8003c10:	461a      	mov	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
	for (uint8_t r_dvm = 0; r_dvm < 9; r_dvm++)
 8003c18:	7afb      	ldrb	r3, [r7, #11]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	72fb      	strb	r3, [r7, #11]
 8003c1e:	7afb      	ldrb	r3, [r7, #11]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d9eb      	bls.n	8003bfc <SetPromedio+0x14>
	}
	media = (uint16_t) (suma /9);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a06      	ldr	r2, [pc, #24]	@ (8003c40 <SetPromedio+0x58>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	813b      	strh	r3, [r7, #8]
	return media;
 8003c30:	893b      	ldrh	r3, [r7, #8]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	200002a4 	.word	0x200002a4
 8003c40:	38e38e39 	.word	0x38e38e39

08003c44 <EncoderMenu>:


void EncoderMenu(void) // Selecciona los marcos (box)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af02      	add	r7, sp, #8
	_Bool box_activo;
	if (Btn_Pres_Ok)
 8003c4a:	4b78      	ldr	r3, [pc, #480]	@ (8003e2c <EncoderMenu+0x1e8>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 808b 	beq.w	8003d6a <EncoderMenu+0x126>
	{
		Btn_Pres = false;
 8003c54:	4b76      	ldr	r3, [pc, #472]	@ (8003e30 <EncoderMenu+0x1ec>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
		if (box_sel < 4)
 8003c5a:	4b76      	ldr	r3, [pc, #472]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d877      	bhi.n	8003d52 <EncoderMenu+0x10e>
		{
			dvm_set.byte ^= 1 << box_sel; // Activa/Desactiva canal
 8003c62:	4b75      	ldr	r3, [pc, #468]	@ (8003e38 <EncoderMenu+0x1f4>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b25a      	sxtb	r2, r3
 8003c68:	4b72      	ldr	r3, [pc, #456]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	2301      	movs	r3, #1
 8003c70:	408b      	lsls	r3, r1
 8003c72:	b25b      	sxtb	r3, r3
 8003c74:	4053      	eors	r3, r2
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003e38 <EncoderMenu+0x1f4>)
 8003c7c:	701a      	strb	r2, [r3, #0]
			box_activo = dvm_set.byte & (1 << box_sel);
 8003c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8003e38 <EncoderMenu+0x1f4>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b6b      	ldr	r3, [pc, #428]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	408b      	lsls	r3, r1
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	71fb      	strb	r3, [r7, #7]
			if (!box_activo)
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	f083 0301 	eor.w	r3, r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <EncoderMenu+0x7a>
			{
				DrawBGCanal(box_sel);
 8003ca6:	4b63      	ldr	r3, [pc, #396]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fcbe 	bl	800362c <DrawBGCanal>
				DrawSTAStatus( box_sel, false);
 8003cb0:	4b60      	ldr	r3, [pc, #384]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fec4 	bl	8003a44 <DrawSTAStatus>
 8003cbc:	e02a      	b.n	8003d14 <EncoderMenu+0xd0>
			}
			else
			{
				if (!Run)
 8003cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8003e3c <EncoderMenu+0x1f8>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	f083 0301 	eor.w	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <EncoderMenu+0xd0>
				{
					v_pos = 6 + (38 * box_sel);
 8003ccc:	4b59      	ldr	r3, [pc, #356]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	00d2      	lsls	r2, r2, #3
 8003cd4:	441a      	add	r2, r3
 8003cd6:	0052      	lsls	r2, r2, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	3306      	adds	r3, #6
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4b57      	ldr	r3, [pc, #348]	@ (8003e40 <EncoderMenu+0x1fc>)
 8003ce4:	701a      	strb	r2, [r3, #0]
					ili_draw_string_withbg(230, v_pos, " ACTIVO", ch_color[box_sel], ILI_BLACK, &font_fixedsys_mono_16);
 8003ce6:	4b56      	ldr	r3, [pc, #344]	@ (8003e40 <EncoderMenu+0x1fc>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	4b51      	ldr	r3, [pc, #324]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4b54      	ldr	r3, [pc, #336]	@ (8003e44 <EncoderMenu+0x200>)
 8003cf4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003cf8:	4a53      	ldr	r2, [pc, #332]	@ (8003e48 <EncoderMenu+0x204>)
 8003cfa:	9201      	str	r2, [sp, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	9200      	str	r2, [sp, #0]
 8003d00:	4a52      	ldr	r2, [pc, #328]	@ (8003e4c <EncoderMenu+0x208>)
 8003d02:	20e6      	movs	r0, #230	@ 0xe6
 8003d04:	f7fd fd16 	bl	8001734 <ili_draw_string_withbg>
					DrawSTAStatus( box_sel, true);
 8003d08:	4b4a      	ldr	r3, [pc, #296]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fe98 	bl	8003a44 <DrawSTAStatus>
				}
			}


			if ((dvm_set.byte & 0x0F) == 0) //Si todos los canales estan inactivos
 8003d14:	4b48      	ldr	r3, [pc, #288]	@ (8003e38 <EncoderMenu+0x1f4>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d124      	bne.n	8003d6a <EncoderMenu+0x126>
			{
				r_count = 0;
 8003d20:	4b4b      	ldr	r3, [pc, #300]	@ (8003e50 <EncoderMenu+0x20c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
				sprintf(texto, "%3u", r_count);
 8003d26:	4b4a      	ldr	r3, [pc, #296]	@ (8003e50 <EncoderMenu+0x20c>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4949      	ldr	r1, [pc, #292]	@ (8003e54 <EncoderMenu+0x210>)
 8003d2e:	484a      	ldr	r0, [pc, #296]	@ (8003e58 <EncoderMenu+0x214>)
 8003d30:	f003 fd9e 	bl	8007870 <siprintf>
				ili_draw_string_withbg(266, 154, texto, ILI_WHITE  , ILI_BLACK, &font_fixedsys_mono_16);
 8003d34:	4b44      	ldr	r3, [pc, #272]	@ (8003e48 <EncoderMenu+0x204>)
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d40:	4a45      	ldr	r2, [pc, #276]	@ (8003e58 <EncoderMenu+0x214>)
 8003d42:	219a      	movs	r1, #154	@ 0x9a
 8003d44:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8003d48:	f7fd fcf4 	bl	8001734 <ili_draw_string_withbg>
				DrawGrilla();
 8003d4c:	f7fe ff1c 	bl	8002b88 <DrawGrilla>
 8003d50:	e00b      	b.n	8003d6a <EncoderMenu+0x126>
			}

		}
		else
		{
			submenu = true;
 8003d52:	4b42      	ldr	r3, [pc, #264]	@ (8003e5c <EncoderMenu+0x218>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
			item_sel = 0;
 8003d58:	4b41      	ldr	r3, [pc, #260]	@ (8003e60 <EncoderMenu+0x21c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
			SwapItem(item_sel, activo);
 8003d5e:	4b40      	ldr	r3, [pc, #256]	@ (8003e60 <EncoderMenu+0x21c>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fabf 	bl	80032e8 <SwapItem>
			//SwapBox(box_sel, false);
		}
	}

	if (!Btn_Pres_Ok)
 8003d6a:	4b30      	ldr	r3, [pc, #192]	@ (8003e2c <EncoderMenu+0x1e8>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	f083 0301 	eor.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03f      	beq.n	8003df8 <EncoderMenu+0x1b4>
	{
		if (Enc_Inc)
 8003d78:	4b3a      	ldr	r3, [pc, #232]	@ (8003e64 <EncoderMenu+0x220>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01b      	beq.n	8003db8 <EncoderMenu+0x174>
		{
			if (box_sel < 4) //Total 5 opciones (0 - 4)
 8003d80:	4b2c      	ldr	r3, [pc, #176]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d80a      	bhi.n	8003d9e <EncoderMenu+0x15a>
			{
				_box_sel = box_sel;
 8003d88:	4b2a      	ldr	r3, [pc, #168]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <EncoderMenu+0x224>)
 8003d8e:	701a      	strb	r2, [r3, #0]
				box_sel++;
 8003d90:	4b28      	ldr	r3, [pc, #160]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b26      	ldr	r3, [pc, #152]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e006      	b.n	8003dac <EncoderMenu+0x168>
			}
			else
			{
				_box_sel = box_sel;
 8003d9e:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	4b31      	ldr	r3, [pc, #196]	@ (8003e68 <EncoderMenu+0x224>)
 8003da4:	701a      	strb	r2, [r3, #0]
				box_sel = 0;
 8003da6:	4b23      	ldr	r3, [pc, #140]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
			}
			Enc_Inc = false;
 8003dac:	4b2d      	ldr	r3, [pc, #180]	@ (8003e64 <EncoderMenu+0x220>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
			Enc_Move = true;
 8003db2:	4b2e      	ldr	r3, [pc, #184]	@ (8003e6c <EncoderMenu+0x228>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
		}

		if (Enc_Dec)
 8003db8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e70 <EncoderMenu+0x22c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01b      	beq.n	8003df8 <EncoderMenu+0x1b4>
		{
			if (box_sel > 0)
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <EncoderMenu+0x19a>
			{
				_box_sel = box_sel;
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	4b26      	ldr	r3, [pc, #152]	@ (8003e68 <EncoderMenu+0x224>)
 8003dce:	701a      	strb	r2, [r3, #0]
				box_sel--;
 8003dd0:	4b18      	ldr	r3, [pc, #96]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	4b16      	ldr	r3, [pc, #88]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e006      	b.n	8003dec <EncoderMenu+0x1a8>
			}
			else
			{
				_box_sel = box_sel;
 8003dde:	4b15      	ldr	r3, [pc, #84]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <EncoderMenu+0x224>)
 8003de4:	701a      	strb	r2, [r3, #0]
				box_sel = 4;
 8003de6:	4b13      	ldr	r3, [pc, #76]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003de8:	2204      	movs	r2, #4
 8003dea:	701a      	strb	r2, [r3, #0]
			}
			Enc_Dec = false;
 8003dec:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <EncoderMenu+0x22c>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
			Enc_Move = true;
 8003df2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e6c <EncoderMenu+0x228>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
		}
	}
	Btn_Pres_Ok = false;
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <EncoderMenu+0x1e8>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]

	if (Enc_Move)
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003e6c <EncoderMenu+0x228>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00e      	beq.n	8003e24 <EncoderMenu+0x1e0>
	{
		SwapBox(box_sel, true);
 8003e06:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <EncoderMenu+0x1f0>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fe89 	bl	8002b24 <SwapBox>
		SwapBox(_box_sel, false);
 8003e12:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <EncoderMenu+0x224>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fe83 	bl	8002b24 <SwapBox>
		Enc_Move = false;
 8003e1e:	4b13      	ldr	r3, [pc, #76]	@ (8003e6c <EncoderMenu+0x228>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
	}
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	2000061d 	.word	0x2000061d
 8003e30:	2000061c 	.word	0x2000061c
 8003e34:	200005f0 	.word	0x200005f0
 8003e38:	20000298 	.word	0x20000298
 8003e3c:	20000620 	.word	0x20000620
 8003e40:	200005fb 	.word	0x200005fb
 8003e44:	20000024 	.word	0x20000024
 8003e48:	0800a95c 	.word	0x0800a95c
 8003e4c:	08009b00 	.word	0x08009b00
 8003e50:	200005f8 	.word	0x200005f8
 8003e54:	08009bec 	.word	0x08009bec
 8003e58:	200005dc 	.word	0x200005dc
 8003e5c:	20000623 	.word	0x20000623
 8003e60:	200005f4 	.word	0x200005f4
 8003e64:	20000618 	.word	0x20000618
 8003e68:	200005f1 	.word	0x200005f1
 8003e6c:	2000061b 	.word	0x2000061b
 8003e70:	20000619 	.word	0x20000619

08003e74 <EncoderSubMenu>:

void EncoderSubMenu(void) //Selecciona los items del menu Setting
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
	if (Btn_Pres_Ok)
 8003e78:	4b3a      	ldr	r3, [pc, #232]	@ (8003f64 <EncoderSubMenu+0xf0>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d011      	beq.n	8003ea4 <EncoderSubMenu+0x30>
	{
		Btn_Pres = false;
 8003e80:	4b39      	ldr	r3, [pc, #228]	@ (8003f68 <EncoderSubMenu+0xf4>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
		SwapItem(item_sel, edit);
 8003e86:	4b39      	ldr	r3, [pc, #228]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fa2b 	bl	80032e8 <SwapItem>
		ItemSelec = false;
 8003e92:	4b37      	ldr	r3, [pc, #220]	@ (8003f70 <EncoderSubMenu+0xfc>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
		item_set = true;
 8003e98:	4b36      	ldr	r3, [pc, #216]	@ (8003f74 <EncoderSubMenu+0x100>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
		submenu = false;
 8003e9e:	4b36      	ldr	r3, [pc, #216]	@ (8003f78 <EncoderSubMenu+0x104>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
	}
	if (!Btn_Pres_Ok)
 8003ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8003f64 <EncoderSubMenu+0xf0>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f083 0301 	eor.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d03f      	beq.n	8003f32 <EncoderSubMenu+0xbe>
	{
		if (Enc_Inc)
 8003eb2:	4b32      	ldr	r3, [pc, #200]	@ (8003f7c <EncoderSubMenu+0x108>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01b      	beq.n	8003ef2 <EncoderSubMenu+0x7e>
		{
			if (item_sel < 4) //Total 5 opciones (0 - 4)
 8003eba:	4b2c      	ldr	r3, [pc, #176]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d80a      	bhi.n	8003ed8 <EncoderSubMenu+0x64>
			{
				_item_sel = item_sel;
 8003ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8003f80 <EncoderSubMenu+0x10c>)
 8003ec8:	701a      	strb	r2, [r3, #0]
				item_sel++;
 8003eca:	4b28      	ldr	r3, [pc, #160]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4b26      	ldr	r3, [pc, #152]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	e006      	b.n	8003ee6 <EncoderSubMenu+0x72>
			}
			else
			{
				_item_sel = item_sel;
 8003ed8:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003eda:	781a      	ldrb	r2, [r3, #0]
 8003edc:	4b28      	ldr	r3, [pc, #160]	@ (8003f80 <EncoderSubMenu+0x10c>)
 8003ede:	701a      	strb	r2, [r3, #0]
				item_sel = 0;
 8003ee0:	4b22      	ldr	r3, [pc, #136]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
			}
			Enc_Inc = false;
 8003ee6:	4b25      	ldr	r3, [pc, #148]	@ (8003f7c <EncoderSubMenu+0x108>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
			Enc_Move = true;
 8003eec:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <EncoderSubMenu+0x110>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
		}

		if (Enc_Dec)
 8003ef2:	4b25      	ldr	r3, [pc, #148]	@ (8003f88 <EncoderSubMenu+0x114>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01b      	beq.n	8003f32 <EncoderSubMenu+0xbe>
		{
			if (item_sel > 0)
 8003efa:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <EncoderSubMenu+0xa4>
			{
				_item_sel = item_sel;
 8003f02:	4b1a      	ldr	r3, [pc, #104]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	4b1e      	ldr	r3, [pc, #120]	@ (8003f80 <EncoderSubMenu+0x10c>)
 8003f08:	701a      	strb	r2, [r3, #0]
				item_sel--;
 8003f0a:	4b18      	ldr	r3, [pc, #96]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b16      	ldr	r3, [pc, #88]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e006      	b.n	8003f26 <EncoderSubMenu+0xb2>
			}
			else
			{
				_item_sel = item_sel;
 8003f18:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003f1a:	781a      	ldrb	r2, [r3, #0]
 8003f1c:	4b18      	ldr	r3, [pc, #96]	@ (8003f80 <EncoderSubMenu+0x10c>)
 8003f1e:	701a      	strb	r2, [r3, #0]
				item_sel = 4;
 8003f20:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003f22:	2204      	movs	r2, #4
 8003f24:	701a      	strb	r2, [r3, #0]
			}
			Enc_Dec = false;
 8003f26:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <EncoderSubMenu+0x114>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
			Enc_Move = true;
 8003f2c:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <EncoderSubMenu+0x110>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]
		}
	}
	Btn_Pres_Ok = false;
 8003f32:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <EncoderSubMenu+0xf0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]

	if (Enc_Move)
 8003f38:	4b12      	ldr	r3, [pc, #72]	@ (8003f84 <EncoderSubMenu+0x110>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <EncoderSubMenu+0xea>
	{
		SwapItem(item_sel, activo);
 8003f40:	4b0a      	ldr	r3, [pc, #40]	@ (8003f6c <EncoderSubMenu+0xf8>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff f9ce 	bl	80032e8 <SwapItem>
		SwapItem(_item_sel, normal);
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f80 <EncoderSubMenu+0x10c>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff f9c8 	bl	80032e8 <SwapItem>
		Enc_Move = false;
 8003f58:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <EncoderSubMenu+0x110>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
	}
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000061d 	.word	0x2000061d
 8003f68:	2000061c 	.word	0x2000061c
 8003f6c:	200005f4 	.word	0x200005f4
 8003f70:	2000061a 	.word	0x2000061a
 8003f74:	20000624 	.word	0x20000624
 8003f78:	20000623 	.word	0x20000623
 8003f7c:	20000618 	.word	0x20000618
 8003f80:	200005f5 	.word	0x200005f5
 8003f84:	2000061b 	.word	0x2000061b
 8003f88:	20000619 	.word	0x20000619

08003f8c <EncoderItemSet>:


void EncoderItemSet(void) // Selecciona los parámetros del item seleccionado
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
	uint8_t tope_set = tope_item[item_sel];
 8003f92:	4b60      	ldr	r3, [pc, #384]	@ (8004114 <EncoderItemSet+0x188>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b5f      	ldr	r3, [pc, #380]	@ (8004118 <EncoderItemSet+0x18c>)
 8003f9a:	5c9b      	ldrb	r3, [r3, r2]
 8003f9c:	71fb      	strb	r3, [r7, #7]
	if (!ItemSelec)
 8003f9e:	4b5f      	ldr	r3, [pc, #380]	@ (800411c <EncoderItemSet+0x190>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	f083 0301 	eor.w	r3, r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d032      	beq.n	8004012 <EncoderItemSet+0x86>
	{
		switch(item_sel)
 8003fac:	4b59      	ldr	r3, [pc, #356]	@ (8004114 <EncoderItemSet+0x188>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d82b      	bhi.n	800400c <EncoderItemSet+0x80>
 8003fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <EncoderItemSet+0x30>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fd1 	.word	0x08003fd1
 8003fc0:	08003fe3 	.word	0x08003fe3
 8003fc4:	08003fed 	.word	0x08003fed
 8003fc8:	08003ff7 	.word	0x08003ff7
 8003fcc:	08004001 	.word	0x08004001
		{
			case 0: set_sel = dvm_set.flag.escala; break;
 8003fd0:	4b53      	ldr	r3, [pc, #332]	@ (8004120 <EncoderItemSet+0x194>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b51      	ldr	r3, [pc, #324]	@ (8004124 <EncoderItemSet+0x198>)
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e014      	b.n	800400c <EncoderItemSet+0x80>
			case 1: set_sel = MPS; break;
 8003fe2:	4b51      	ldr	r3, [pc, #324]	@ (8004128 <EncoderItemSet+0x19c>)
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8004124 <EncoderItemSet+0x198>)
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e00f      	b.n	800400c <EncoderItemSet+0x80>
			case 2: set_sel = lapso; break;
 8003fec:	4b4f      	ldr	r3, [pc, #316]	@ (800412c <EncoderItemSet+0x1a0>)
 8003fee:	781a      	ldrb	r2, [r3, #0]
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8004124 <EncoderItemSet+0x198>)
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	e00a      	b.n	800400c <EncoderItemSet+0x80>
			case 3: set_sel = media_set; break;
 8003ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8004130 <EncoderItemSet+0x1a4>)
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <EncoderItemSet+0x198>)
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e005      	b.n	800400c <EncoderItemSet+0x80>
			case 4: set_sel = rastro; break;
 8004000:	4b4c      	ldr	r3, [pc, #304]	@ (8004134 <EncoderItemSet+0x1a8>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	4b47      	ldr	r3, [pc, #284]	@ (8004124 <EncoderItemSet+0x198>)
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	bf00      	nop
		}
		ItemSelec = true;
 800400c:	4b43      	ldr	r3, [pc, #268]	@ (800411c <EncoderItemSet+0x190>)
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
	}

	if (Btn_Pres_Ok)
 8004012:	4b49      	ldr	r3, [pc, #292]	@ (8004138 <EncoderItemSet+0x1ac>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d019      	beq.n	800404e <EncoderItemSet+0xc2>
	{
		Btn_Pres = false;
 800401a:	4b48      	ldr	r3, [pc, #288]	@ (800413c <EncoderItemSet+0x1b0>)
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
		UpdateSet(item_sel, set_sel);
 8004020:	4b3c      	ldr	r3, [pc, #240]	@ (8004114 <EncoderItemSet+0x188>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4a3f      	ldr	r2, [pc, #252]	@ (8004124 <EncoderItemSet+0x198>)
 8004026:	7812      	ldrb	r2, [r2, #0]
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fe20 	bl	8002c70 <UpdateSet>
		SwapItem(item_sel, normal);
 8004030:	4b38      	ldr	r3, [pc, #224]	@ (8004114 <EncoderItemSet+0x188>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff f956 	bl	80032e8 <SwapItem>
		submenu = false;
 800403c:	4b40      	ldr	r3, [pc, #256]	@ (8004140 <EncoderItemSet+0x1b4>)
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
		item_set = false;
 8004042:	4b40      	ldr	r3, [pc, #256]	@ (8004144 <EncoderItemSet+0x1b8>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
		ItemSelec = false;
 8004048:	4b34      	ldr	r3, [pc, #208]	@ (800411c <EncoderItemSet+0x190>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
	}

	if (!Btn_Pres_Ok)
 800404e:	4b3a      	ldr	r3, [pc, #232]	@ (8004138 <EncoderItemSet+0x1ac>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	f083 0301 	eor.w	r3, r3, #1
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d040      	beq.n	80040de <EncoderItemSet+0x152>
	{
		if (Enc_Inc)
 800405c:	4b3a      	ldr	r3, [pc, #232]	@ (8004148 <EncoderItemSet+0x1bc>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01c      	beq.n	800409e <EncoderItemSet+0x112>
		{
			if (set_sel < tope_set)
 8004064:	4b2f      	ldr	r3, [pc, #188]	@ (8004124 <EncoderItemSet+0x198>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	79fa      	ldrb	r2, [r7, #7]
 800406a:	429a      	cmp	r2, r3
 800406c:	d90a      	bls.n	8004084 <EncoderItemSet+0xf8>
			{
				_set_sel = set_sel;
 800406e:	4b2d      	ldr	r3, [pc, #180]	@ (8004124 <EncoderItemSet+0x198>)
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	4b36      	ldr	r3, [pc, #216]	@ (800414c <EncoderItemSet+0x1c0>)
 8004074:	701a      	strb	r2, [r3, #0]
				set_sel++;
 8004076:	4b2b      	ldr	r3, [pc, #172]	@ (8004124 <EncoderItemSet+0x198>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4b29      	ldr	r3, [pc, #164]	@ (8004124 <EncoderItemSet+0x198>)
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e006      	b.n	8004092 <EncoderItemSet+0x106>
			}
			else
			{
				_set_sel = set_sel;
 8004084:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <EncoderItemSet+0x198>)
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	4b30      	ldr	r3, [pc, #192]	@ (800414c <EncoderItemSet+0x1c0>)
 800408a:	701a      	strb	r2, [r3, #0]
				set_sel = 0;
 800408c:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <EncoderItemSet+0x198>)
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
			}
			Enc_Inc = false;
 8004092:	4b2d      	ldr	r3, [pc, #180]	@ (8004148 <EncoderItemSet+0x1bc>)
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
			Enc_Move = true;
 8004098:	4b2d      	ldr	r3, [pc, #180]	@ (8004150 <EncoderItemSet+0x1c4>)
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
		}

		if (Enc_Dec)
 800409e:	4b2d      	ldr	r3, [pc, #180]	@ (8004154 <EncoderItemSet+0x1c8>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01b      	beq.n	80040de <EncoderItemSet+0x152>
		{
			if (set_sel > 0)
 80040a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004124 <EncoderItemSet+0x198>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <EncoderItemSet+0x138>
			{
				_set_sel = set_sel;
 80040ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <EncoderItemSet+0x198>)
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	4b26      	ldr	r3, [pc, #152]	@ (800414c <EncoderItemSet+0x1c0>)
 80040b4:	701a      	strb	r2, [r3, #0]
				set_sel--;
 80040b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <EncoderItemSet+0x198>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <EncoderItemSet+0x198>)
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e006      	b.n	80040d2 <EncoderItemSet+0x146>
			}
			else
			{
				_set_sel = set_sel;
 80040c4:	4b17      	ldr	r3, [pc, #92]	@ (8004124 <EncoderItemSet+0x198>)
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	4b20      	ldr	r3, [pc, #128]	@ (800414c <EncoderItemSet+0x1c0>)
 80040ca:	701a      	strb	r2, [r3, #0]
				set_sel = tope_set;
 80040cc:	4a15      	ldr	r2, [pc, #84]	@ (8004124 <EncoderItemSet+0x198>)
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	7013      	strb	r3, [r2, #0]
			}
			Enc_Dec = false;
 80040d2:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <EncoderItemSet+0x1c8>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
			Enc_Move = true;
 80040d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <EncoderItemSet+0x1c4>)
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
		}
	}
	Btn_Pres_Ok = false;
 80040de:	4b16      	ldr	r3, [pc, #88]	@ (8004138 <EncoderItemSet+0x1ac>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]

	if (Enc_Move)
 80040e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004150 <EncoderItemSet+0x1c4>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <EncoderItemSet+0x176>
	{
		DrawSelSet(item_sel, set_sel);
 80040ec:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <EncoderItemSet+0x188>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004124 <EncoderItemSet+0x198>)
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fd84 	bl	8002c04 <DrawSelSet>
		Enc_Move = false;
 80040fc:	4b14      	ldr	r3, [pc, #80]	@ (8004150 <EncoderItemSet+0x1c4>)
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
	}
	//set_sel = 4;
	_set_sel = set_sel;
 8004102:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <EncoderItemSet+0x198>)
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	4b11      	ldr	r3, [pc, #68]	@ (800414c <EncoderItemSet+0x1c0>)
 8004108:	701a      	strb	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200005f4 	.word	0x200005f4
 8004118:	20000008 	.word	0x20000008
 800411c:	2000061a 	.word	0x2000061a
 8004120:	20000298 	.word	0x20000298
 8004124:	200005f6 	.word	0x200005f6
 8004128:	200005fc 	.word	0x200005fc
 800412c:	200005fd 	.word	0x200005fd
 8004130:	20000601 	.word	0x20000601
 8004134:	20000622 	.word	0x20000622
 8004138:	2000061d 	.word	0x2000061d
 800413c:	2000061c 	.word	0x2000061c
 8004140:	20000623 	.word	0x20000623
 8004144:	20000624 	.word	0x20000624
 8004148:	20000618 	.word	0x20000618
 800414c:	200005f7 	.word	0x200005f7
 8004150:	2000061b 	.word	0x2000061b
 8004154:	20000619 	.word	0x20000619

08004158 <MuestraMedia>:


void MuestraMedia(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
	uint8_t ciclo, ciclo_top;
	ciclo = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	71fb      	strb	r3, [r7, #7]
	ciclo_top = media_set + 2;
 8004162:	4b46      	ldr	r3, [pc, #280]	@ (800427c <MuestraMedia+0x124>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	3302      	adds	r3, #2
 8004168:	70fb      	strb	r3, [r7, #3]
	if (r_count == 0)
 800416a:	4b45      	ldr	r3, [pc, #276]	@ (8004280 <MuestraMedia+0x128>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d14b      	bne.n	800420a <MuestraMedia+0xb2>
	{
		//En todos los canales la media = 0
		for (uint8_t canal = 0; canal < 4; canal++) media_canal[canal] = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	71bb      	strb	r3, [r7, #6]
 8004176:	e007      	b.n	8004188 <MuestraMedia+0x30>
 8004178:	79bb      	ldrb	r3, [r7, #6]
 800417a:	4a42      	ldr	r2, [pc, #264]	@ (8004284 <MuestraMedia+0x12c>)
 800417c:	2100      	movs	r1, #0
 800417e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004182:	79bb      	ldrb	r3, [r7, #6]
 8004184:	3301      	adds	r3, #1
 8004186:	71bb      	strb	r3, [r7, #6]
 8004188:	79bb      	ldrb	r3, [r7, #6]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d9f4      	bls.n	8004178 <MuestraMedia+0x20>
	}

	while(ciclo < (ciclo_top))
 800418e:	e03c      	b.n	800420a <MuestraMedia+0xb2>
	{
		if (HAL_ADC_Start_DMA(&hadc1, adc_buf.dword, 4) == HAL_OK)
 8004190:	2204      	movs	r2, #4
 8004192:	493d      	ldr	r1, [pc, #244]	@ (8004288 <MuestraMedia+0x130>)
 8004194:	483d      	ldr	r0, [pc, #244]	@ (800428c <MuestraMedia+0x134>)
 8004196:	f000 fd19 	bl	8004bcc <HAL_ADC_Start_DMA>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d134      	bne.n	800420a <MuestraMedia+0xb2>
		{
			HAL_Delay(5);
 80041a0:	2005      	movs	r0, #5
 80041a2:	f000 fc17 	bl	80049d4 <HAL_Delay>
			for(uint8_t canal = 0; canal < 4; canal++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	717b      	strb	r3, [r7, #5]
 80041aa:	e028      	b.n	80041fe <MuestraMedia+0xa6>
			{
				ch_set = dvm_set.byte & 0x0F;
 80041ac:	4b38      	ldr	r3, [pc, #224]	@ (8004290 <MuestraMedia+0x138>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	4b37      	ldr	r3, [pc, #220]	@ (8004294 <MuestraMedia+0x13c>)
 80041b8:	701a      	strb	r2, [r3, #0]
				ch_set &= 0x01 << canal;
 80041ba:	797b      	ldrb	r3, [r7, #5]
 80041bc:	2201      	movs	r2, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	b25a      	sxtb	r2, r3
 80041c4:	4b33      	ldr	r3, [pc, #204]	@ (8004294 <MuestraMedia+0x13c>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	4013      	ands	r3, r2
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	4b30      	ldr	r3, [pc, #192]	@ (8004294 <MuestraMedia+0x13c>)
 80041d2:	701a      	strb	r2, [r3, #0]
				if (ch_set)
 80041d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004294 <MuestraMedia+0x13c>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <MuestraMedia+0xa0>
				{
					media_canal[canal] += adc_buf.sword[canal];
 80041dc:	797b      	ldrb	r3, [r7, #5]
 80041de:	4a29      	ldr	r2, [pc, #164]	@ (8004284 <MuestraMedia+0x12c>)
 80041e0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80041e4:	797b      	ldrb	r3, [r7, #5]
 80041e6:	4a28      	ldr	r2, [pc, #160]	@ (8004288 <MuestraMedia+0x130>)
 80041e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80041ec:	797b      	ldrb	r3, [r7, #5]
 80041ee:	440a      	add	r2, r1
 80041f0:	b291      	uxth	r1, r2
 80041f2:	4a24      	ldr	r2, [pc, #144]	@ (8004284 <MuestraMedia+0x12c>)
 80041f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(uint8_t canal = 0; canal < 4; canal++)
 80041f8:	797b      	ldrb	r3, [r7, #5]
 80041fa:	3301      	adds	r3, #1
 80041fc:	717b      	strb	r3, [r7, #5]
 80041fe:	797b      	ldrb	r3, [r7, #5]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d9d3      	bls.n	80041ac <MuestraMedia+0x54>
				}
			}
			ciclo++;
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	3301      	adds	r3, #1
 8004208:	71fb      	strb	r3, [r7, #7]
	while(ciclo < (ciclo_top))
 800420a:	79fa      	ldrb	r2, [r7, #7]
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	429a      	cmp	r2, r3
 8004210:	d3be      	bcc.n	8004190 <MuestraMedia+0x38>
		}
	}
	for(uint8_t canal = 0; canal < 4; canal++)
 8004212:	2300      	movs	r3, #0
 8004214:	713b      	strb	r3, [r7, #4]
 8004216:	e028      	b.n	800426a <MuestraMedia+0x112>
	{
		if(media_canal[canal] > 0)
 8004218:	793b      	ldrb	r3, [r7, #4]
 800421a:	4a1a      	ldr	r2, [pc, #104]	@ (8004284 <MuestraMedia+0x12c>)
 800421c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01f      	beq.n	8004264 <MuestraMedia+0x10c>
		{
			if (r_count == 0)
 8004224:	4b16      	ldr	r3, [pc, #88]	@ (8004280 <MuestraMedia+0x128>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <MuestraMedia+0xf0>
			{
				media_canal[canal] = media_canal[canal] / ciclo_top;
 800422c:	793b      	ldrb	r3, [r7, #4]
 800422e:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <MuestraMedia+0x12c>)
 8004230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004234:	461a      	mov	r2, r3
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	fb92 f2f3 	sdiv	r2, r2, r3
 800423c:	793b      	ldrb	r3, [r7, #4]
 800423e:	b291      	uxth	r1, r2
 8004240:	4a10      	ldr	r2, [pc, #64]	@ (8004284 <MuestraMedia+0x12c>)
 8004242:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004246:	e00d      	b.n	8004264 <MuestraMedia+0x10c>
			}
			else
			{
				media_canal[canal] = media_canal[canal] / (ciclo_top + 1);
 8004248:	793b      	ldrb	r3, [r7, #4]
 800424a:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <MuestraMedia+0x12c>)
 800424c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004250:	461a      	mov	r2, r3
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	3301      	adds	r3, #1
 8004256:	fb92 f2f3 	sdiv	r2, r2, r3
 800425a:	793b      	ldrb	r3, [r7, #4]
 800425c:	b291      	uxth	r1, r2
 800425e:	4a09      	ldr	r2, [pc, #36]	@ (8004284 <MuestraMedia+0x12c>)
 8004260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t canal = 0; canal < 4; canal++)
 8004264:	793b      	ldrb	r3, [r7, #4]
 8004266:	3301      	adds	r3, #1
 8004268:	713b      	strb	r3, [r7, #4]
 800426a:	793b      	ldrb	r3, [r7, #4]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d9d3      	bls.n	8004218 <MuestraMedia+0xc0>
			}
		}
	}
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000601 	.word	0x20000601
 8004280:	200005f8 	.word	0x200005f8
 8004284:	2000060c 	.word	0x2000060c
 8004288:	2000029c 	.word	0x2000029c
 800428c:	20000224 	.word	0x20000224
 8004290:	20000298 	.word	0x20000298
 8004294:	200005fa 	.word	0x200005fa

08004298 <Conversiones>:


void Conversiones(void)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b085      	sub	sp, #20
 800429c:	af02      	add	r7, sp, #8

	ms_count_ok = false; //Comienza nueva cuenta de tiempo
 800429e:	4b80      	ldr	r3, [pc, #512]	@ (80044a0 <Conversiones+0x208>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
	MuestraMedia();
 80042a4:	f7ff ff58 	bl	8004158 <MuestraMedia>
	if (r_count == 0)
 80042a8:	4b7e      	ldr	r3, [pc, #504]	@ (80044a4 <Conversiones+0x20c>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <Conversiones+0x26>
	{
		limite_l = media_canal[0];
 80042b0:	4b7d      	ldr	r3, [pc, #500]	@ (80044a8 <Conversiones+0x210>)
 80042b2:	881a      	ldrh	r2, [r3, #0]
 80042b4:	4b7d      	ldr	r3, [pc, #500]	@ (80044ac <Conversiones+0x214>)
 80042b6:	801a      	strh	r2, [r3, #0]
		limite_h = 0;
 80042b8:	4b7d      	ldr	r3, [pc, #500]	@ (80044b0 <Conversiones+0x218>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	801a      	strh	r2, [r3, #0]
	}

	for(uint8_t canal = 0; canal < 4; canal++)
 80042be:	2300      	movs	r3, #0
 80042c0:	71fb      	strb	r3, [r7, #7]
 80042c2:	e0a3      	b.n	800440c <Conversiones+0x174>
	{
		ch_set = dvm_set.byte & 0x0F;
 80042c4:	4b7b      	ldr	r3, [pc, #492]	@ (80044b4 <Conversiones+0x21c>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4b7a      	ldr	r3, [pc, #488]	@ (80044b8 <Conversiones+0x220>)
 80042d0:	701a      	strb	r2, [r3, #0]
		ch_set &= 0x01 << canal;
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	2201      	movs	r2, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	b25a      	sxtb	r2, r3
 80042dc:	4b76      	ldr	r3, [pc, #472]	@ (80044b8 <Conversiones+0x220>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	4013      	ands	r3, r2
 80042e4:	b25b      	sxtb	r3, r3
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	4b73      	ldr	r3, [pc, #460]	@ (80044b8 <Conversiones+0x220>)
 80042ea:	701a      	strb	r2, [r3, #0]
		if (ch_set)
 80042ec:	4b72      	ldr	r3, [pc, #456]	@ (80044b8 <Conversiones+0x220>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8088 	beq.w	8004406 <Conversiones+0x16e>
		{
			dvm[canal][dvm_count].muestra = media_canal[canal];
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	79fa      	ldrb	r2, [r7, #7]
 80042fa:	4970      	ldr	r1, [pc, #448]	@ (80044bc <Conversiones+0x224>)
 80042fc:	7809      	ldrb	r1, [r1, #0]
 80042fe:	460c      	mov	r4, r1
 8004300:	4969      	ldr	r1, [pc, #420]	@ (80044a8 <Conversiones+0x210>)
 8004302:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8004306:	496e      	ldr	r1, [pc, #440]	@ (80044c0 <Conversiones+0x228>)
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4423      	add	r3, r4
 8004312:	4602      	mov	r2, r0
 8004314:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
			if (media_canal[canal] < limite_l) limite_l =  media_canal[canal];
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	4a63      	ldr	r2, [pc, #396]	@ (80044a8 <Conversiones+0x210>)
 800431c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004320:	4b62      	ldr	r3, [pc, #392]	@ (80044ac <Conversiones+0x214>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d205      	bcs.n	8004334 <Conversiones+0x9c>
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	4a5f      	ldr	r2, [pc, #380]	@ (80044a8 <Conversiones+0x210>)
 800432c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004330:	4b5e      	ldr	r3, [pc, #376]	@ (80044ac <Conversiones+0x214>)
 8004332:	801a      	strh	r2, [r3, #0]
			if( media_canal[canal] > limite_h) limite_h =  media_canal[canal];
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	4a5c      	ldr	r2, [pc, #368]	@ (80044a8 <Conversiones+0x210>)
 8004338:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800433c:	4b5c      	ldr	r3, [pc, #368]	@ (80044b0 <Conversiones+0x218>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d905      	bls.n	8004350 <Conversiones+0xb8>
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	4a58      	ldr	r2, [pc, #352]	@ (80044a8 <Conversiones+0x210>)
 8004348:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800434c:	4b58      	ldr	r3, [pc, #352]	@ (80044b0 <Conversiones+0x218>)
 800434e:	801a      	strh	r2, [r3, #0]

			pix[r_count][canal] = (uint8_t)( media_canal[canal] / 31);
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	4a55      	ldr	r2, [pc, #340]	@ (80044a8 <Conversiones+0x210>)
 8004354:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004358:	4b5a      	ldr	r3, [pc, #360]	@ (80044c4 <Conversiones+0x22c>)
 800435a:	fba3 1302 	umull	r1, r3, r3, r2
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	0852      	lsrs	r2, r2, #1
 8004362:	4413      	add	r3, r2
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	b299      	uxth	r1, r3
 8004368:	4b4e      	ldr	r3, [pc, #312]	@ (80044a4 <Conversiones+0x20c>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	b2c8      	uxtb	r0, r1
 8004372:	4955      	ldr	r1, [pc, #340]	@ (80044c8 <Conversiones+0x230>)
 8004374:	0092      	lsls	r2, r2, #2
 8004376:	440a      	add	r2, r1
 8004378:	4413      	add	r3, r2
 800437a:	4602      	mov	r2, r0
 800437c:	701a      	strb	r2, [r3, #0]
			fpv =  media_canal[canal] * 3.3 /4095; /* uint16_t a float en el rango de 0 a 3.3Volts */
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	4a49      	ldr	r2, [pc, #292]	@ (80044a8 <Conversiones+0x210>)
 8004382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc f83c 	bl	8000404 <__aeabi_i2d>
 800438c:	a340      	add	r3, pc, #256	@ (adr r3, 8004490 <Conversiones+0x1f8>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f7fc f8a1 	bl	80004d8 <__aeabi_dmul>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4610      	mov	r0, r2
 800439c:	4619      	mov	r1, r3
 800439e:	a33e      	add	r3, pc, #248	@ (adr r3, 8004498 <Conversiones+0x200>)
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f7fc f9c2 	bl	800072c <__aeabi_ddiv>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	f7fc fb6a 	bl	8000a88 <__aeabi_d2f>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4a45      	ldr	r2, [pc, #276]	@ (80044cc <Conversiones+0x234>)
 80043b8:	6013      	str	r3, [r2, #0]
			v_pos = 4 + (38 * canal);
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	461a      	mov	r2, r3
 80043be:	00d2      	lsls	r2, r2, #3
 80043c0:	441a      	add	r2, r3
 80043c2:	0052      	lsls	r2, r2, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	3304      	adds	r3, #4
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4b40      	ldr	r3, [pc, #256]	@ (80044d0 <Conversiones+0x238>)
 80043d0:	701a      	strb	r2, [r3, #0]
			sprintf(texto, "%.3fV", fpv);
 80043d2:	4b3e      	ldr	r3, [pc, #248]	@ (80044cc <Conversiones+0x234>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc f826 	bl	8000428 <__aeabi_f2d>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	493c      	ldr	r1, [pc, #240]	@ (80044d4 <Conversiones+0x23c>)
 80043e2:	483d      	ldr	r0, [pc, #244]	@ (80044d8 <Conversiones+0x240>)
 80043e4:	f003 fa44 	bl	8007870 <siprintf>
			ili_draw_string_withbg(230, v_pos, texto, ch_color[canal], ILI_BLACK, &verdana_24);
 80043e8:	4b39      	ldr	r3, [pc, #228]	@ (80044d0 <Conversiones+0x238>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4619      	mov	r1, r3
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	4a3a      	ldr	r2, [pc, #232]	@ (80044dc <Conversiones+0x244>)
 80043f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043f6:	4a3a      	ldr	r2, [pc, #232]	@ (80044e0 <Conversiones+0x248>)
 80043f8:	9201      	str	r2, [sp, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	9200      	str	r2, [sp, #0]
 80043fe:	4a36      	ldr	r2, [pc, #216]	@ (80044d8 <Conversiones+0x240>)
 8004400:	20e6      	movs	r0, #230	@ 0xe6
 8004402:	f7fd f997 	bl	8001734 <ili_draw_string_withbg>
	for(uint8_t canal = 0; canal < 4; canal++)
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	3301      	adds	r3, #1
 800440a:	71fb      	strb	r3, [r7, #7]
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	2b03      	cmp	r3, #3
 8004410:	f67f af58 	bls.w	80042c4 <Conversiones+0x2c>
		}
	}

	dvm_count++;
 8004414:	4b29      	ldr	r3, [pc, #164]	@ (80044bc <Conversiones+0x224>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	b2da      	uxtb	r2, r3
 800441c:	4b27      	ldr	r3, [pc, #156]	@ (80044bc <Conversiones+0x224>)
 800441e:	701a      	strb	r2, [r3, #0]
	if (dvm_count > 8) //Cada 10 conversiones se calcula la mínima, media y máxima
 8004420:	4b26      	ldr	r3, [pc, #152]	@ (80044bc <Conversiones+0x224>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d906      	bls.n	8004436 <Conversiones+0x19e>
	{
		SetSTA();
 8004428:	f7ff fa64 	bl	80038f4 <SetSTA>
		DrawSTA();
 800442c:	f7ff f96c 	bl	8003708 <DrawSTA>
		dvm_count = 0;
 8004430:	4b22      	ldr	r3, [pc, #136]	@ (80044bc <Conversiones+0x224>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
	}
	GPIOA->BRR = LED_START_Pin;
 8004436:	4b2b      	ldr	r3, [pc, #172]	@ (80044e4 <Conversiones+0x24c>)
 8004438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800443c:	615a      	str	r2, [r3, #20]
	//GPIOC->BRR = LED_Pin;  //Led ON
	sprintf(texto, "(%3u)", r_count + 1);
 800443e:	4b19      	ldr	r3, [pc, #100]	@ (80044a4 <Conversiones+0x20c>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	461a      	mov	r2, r3
 8004446:	4928      	ldr	r1, [pc, #160]	@ (80044e8 <Conversiones+0x250>)
 8004448:	4823      	ldr	r0, [pc, #140]	@ (80044d8 <Conversiones+0x240>)
 800444a:	f003 fa11 	bl	8007870 <siprintf>
	ili_draw_string_withbg(160, 1, texto, ILI_WHITE, ILI_BLACK, &verdana_11);
 800444e:	4b27      	ldr	r3, [pc, #156]	@ (80044ec <Conversiones+0x254>)
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	2300      	movs	r3, #0
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800445a:	4a1f      	ldr	r2, [pc, #124]	@ (80044d8 <Conversiones+0x240>)
 800445c:	2101      	movs	r1, #1
 800445e:	20a0      	movs	r0, #160	@ 0xa0
 8004460:	f7fd f968 	bl	8001734 <ili_draw_string_withbg>
/*
	sprintf(texto, "(%3u)", set_sel);
	ili_draw_string_withbg(155, 140, texto, ILI_WHITE, ILI_BLACK, &verdana_11);
*/
	DrawPix(r_count);
 8004464:	4b0f      	ldr	r3, [pc, #60]	@ (80044a4 <Conversiones+0x20c>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe ffaf 	bl	80033cc <DrawPix>
	GPIOA->BSRR = LED_START_Pin;
 800446e:	4b1d      	ldr	r3, [pc, #116]	@ (80044e4 <Conversiones+0x24c>)
 8004470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004474:	611a      	str	r2, [r3, #16]
	//GPIOC->BSRR = LED_Pin; // Led OFF
	r_count++;
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <Conversiones+0x20c>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	3301      	adds	r3, #1
 800447c:	b2da      	uxtb	r2, r3
 800447e:	4b09      	ldr	r3, [pc, #36]	@ (80044a4 <Conversiones+0x20c>)
 8004480:	701a      	strb	r2, [r3, #0]
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bd90      	pop	{r4, r7, pc}
 800448a:	bf00      	nop
 800448c:	f3af 8000 	nop.w
 8004490:	66666666 	.word	0x66666666
 8004494:	400a6666 	.word	0x400a6666
 8004498:	00000000 	.word	0x00000000
 800449c:	40affe00 	.word	0x40affe00
 80044a0:	20000625 	.word	0x20000625
 80044a4:	200005f8 	.word	0x200005f8
 80044a8:	2000060c 	.word	0x2000060c
 80044ac:	20000604 	.word	0x20000604
 80044b0:	20000606 	.word	0x20000606
 80044b4:	20000298 	.word	0x20000298
 80044b8:	200005fa 	.word	0x200005fa
 80044bc:	200005f9 	.word	0x200005f9
 80044c0:	200002a4 	.word	0x200002a4
 80044c4:	08421085 	.word	0x08421085
 80044c8:	2000035c 	.word	0x2000035c
 80044cc:	200005ec 	.word	0x200005ec
 80044d0:	200005fb 	.word	0x200005fb
 80044d4:	08009bf0 	.word	0x08009bf0
 80044d8:	200005dc 	.word	0x200005dc
 80044dc:	20000024 	.word	0x20000024
 80044e0:	0800b968 	.word	0x0800b968
 80044e4:	40010800 	.word	0x40010800
 80044e8:	08009bf8 	.word	0x08009bf8
 80044ec:	0800ace8 	.word	0x0800ace8

080044f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044f4:	b672      	cpsid	i
}
 80044f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <Error_Handler+0x8>

080044fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004502:	4b15      	ldr	r3, [pc, #84]	@ (8004558 <HAL_MspInit+0x5c>)
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	4a14      	ldr	r2, [pc, #80]	@ (8004558 <HAL_MspInit+0x5c>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	6193      	str	r3, [r2, #24]
 800450e:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <HAL_MspInit+0x5c>)
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	4b0f      	ldr	r3, [pc, #60]	@ (8004558 <HAL_MspInit+0x5c>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4a0e      	ldr	r2, [pc, #56]	@ (8004558 <HAL_MspInit+0x5c>)
 8004520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004524:	61d3      	str	r3, [r2, #28]
 8004526:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <HAL_MspInit+0x5c>)
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004532:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <HAL_MspInit+0x60>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	4a04      	ldr	r2, [pc, #16]	@ (800455c <HAL_MspInit+0x60>)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	40021000 	.word	0x40021000
 800455c:	40010000 	.word	0x40010000

08004560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004564:	bf00      	nop
 8004566:	e7fd      	b.n	8004564 <NMI_Handler+0x4>

08004568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <HardFault_Handler+0x4>

08004570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <MemManage_Handler+0x4>

08004578 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800457c:	bf00      	nop
 800457e:	e7fd      	b.n	800457c <BusFault_Handler+0x4>

08004580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <UsageFault_Handler+0x4>

08004588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
	extern void SysTick_Counter(void);
	/* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045b0:	f000 f9f4 	bl	800499c <HAL_IncTick>
  SysTick_Counter();
 80045b4:	f7fe f998 	bl	80028e8 <SysTick_Counter>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}

080045bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045c0:	4802      	ldr	r0, [pc, #8]	@ (80045cc <DMA1_Channel1_IRQHandler+0x10>)
 80045c2:	f001 f86d 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000254 	.word	0x20000254

080045d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 80045d4:	2020      	movs	r0, #32
 80045d6:	f001 fb33 	bl	8005c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 80045da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80045de:	f001 fb2f 	bl	8005c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80045e2:	bf00      	nop
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
	extern void EncoderEvent(void);
	/* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045ec:	4803      	ldr	r0, [pc, #12]	@ (80045fc <TIM3_IRQHandler+0x14>)
 80045ee:	f002 f9f7 	bl	80069e0 <HAL_TIM_IRQHandler>
  EncoderEvent();
 80045f2:	f7fe f93f 	bl	8002874 <EncoderEvent>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000630 	.word	0x20000630

08004600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return 1;
 8004604:	2301      	movs	r3, #1
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <_kill>:

int _kill(int pid, int sig)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004618:	f003 f9e2 	bl	80079e0 <__errno>
 800461c:	4603      	mov	r3, r0
 800461e:	2216      	movs	r2, #22
 8004620:	601a      	str	r2, [r3, #0]
  return -1;
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <_exit>:

void _exit (int status)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004636:	f04f 31ff 	mov.w	r1, #4294967295
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff ffe7 	bl	800460e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <_exit+0x12>

08004644 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e00a      	b.n	800466c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004656:	f3af 8000 	nop.w
 800465a:	4601      	mov	r1, r0
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	60ba      	str	r2, [r7, #8]
 8004662:	b2ca      	uxtb	r2, r1
 8004664:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	3301      	adds	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	dbf0      	blt.n	8004656 <_read+0x12>
  }

  return len;
 8004674:	687b      	ldr	r3, [r7, #4]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b086      	sub	sp, #24
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e009      	b.n	80046a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	60ba      	str	r2, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	3301      	adds	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	dbf1      	blt.n	8004690 <_write+0x12>
  }
  return len;
 80046ac:	687b      	ldr	r3, [r7, #4]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <_close>:

int _close(int file)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046dc:	605a      	str	r2, [r3, #4]
  return 0;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr

080046ea <_isatty>:

int _isatty(int file)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046f2:	2301      	movs	r3, #1
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046fe:	b480      	push	{r7}
 8004700:	b085      	sub	sp, #20
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
	...

08004718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004720:	4a14      	ldr	r2, [pc, #80]	@ (8004774 <_sbrk+0x5c>)
 8004722:	4b15      	ldr	r3, [pc, #84]	@ (8004778 <_sbrk+0x60>)
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800472c:	4b13      	ldr	r3, [pc, #76]	@ (800477c <_sbrk+0x64>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004734:	4b11      	ldr	r3, [pc, #68]	@ (800477c <_sbrk+0x64>)
 8004736:	4a12      	ldr	r2, [pc, #72]	@ (8004780 <_sbrk+0x68>)
 8004738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800473a:	4b10      	ldr	r3, [pc, #64]	@ (800477c <_sbrk+0x64>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	429a      	cmp	r2, r3
 8004746:	d207      	bcs.n	8004758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004748:	f003 f94a 	bl	80079e0 <__errno>
 800474c:	4603      	mov	r3, r0
 800474e:	220c      	movs	r2, #12
 8004750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004752:	f04f 33ff 	mov.w	r3, #4294967295
 8004756:	e009      	b.n	800476c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004758:	4b08      	ldr	r3, [pc, #32]	@ (800477c <_sbrk+0x64>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800475e:	4b07      	ldr	r3, [pc, #28]	@ (800477c <_sbrk+0x64>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	4a05      	ldr	r2, [pc, #20]	@ (800477c <_sbrk+0x64>)
 8004768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800476a:	68fb      	ldr	r3, [r7, #12]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20005000 	.word	0x20005000
 8004778:	00000400 	.word	0x00000400
 800477c:	2000062c 	.word	0x2000062c
 8004780:	200007c8 	.word	0x200007c8

08004784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	@ 0x30
 8004794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004796:	f107 030c 	add.w	r3, r7, #12
 800479a:	2224      	movs	r2, #36	@ 0x24
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f003 f8cb 	bl	800793a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80047ac:	4b20      	ldr	r3, [pc, #128]	@ (8004830 <MX_TIM3_Init+0xa0>)
 80047ae:	4a21      	ldr	r2, [pc, #132]	@ (8004834 <MX_TIM3_Init+0xa4>)
 80047b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80047b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004830 <MX_TIM3_Init+0xa0>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004830 <MX_TIM3_Init+0xa0>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80047be:	4b1c      	ldr	r3, [pc, #112]	@ (8004830 <MX_TIM3_Init+0xa0>)
 80047c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004830 <MX_TIM3_Init+0xa0>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047cc:	4b18      	ldr	r3, [pc, #96]	@ (8004830 <MX_TIM3_Init+0xa0>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80047da:	2301      	movs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80047e6:	2300      	movs	r3, #0
 80047e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80047ea:	2301      	movs	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80047ee:	2300      	movs	r3, #0
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80047f6:	f107 030c 	add.w	r3, r7, #12
 80047fa:	4619      	mov	r1, r3
 80047fc:	480c      	ldr	r0, [pc, #48]	@ (8004830 <MX_TIM3_Init+0xa0>)
 80047fe:	f001 ff9f 	bl	8006740 <HAL_TIM_Encoder_Init>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004808:	f7ff fe72 	bl	80044f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800480c:	2300      	movs	r3, #0
 800480e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004814:	1d3b      	adds	r3, r7, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4805      	ldr	r0, [pc, #20]	@ (8004830 <MX_TIM3_Init+0xa0>)
 800481a:	f002 fa9d 	bl	8006d58 <HAL_TIMEx_MasterConfigSynchronization>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004824:	f7ff fe64 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004828:	bf00      	nop
 800482a:	3730      	adds	r7, #48	@ 0x30
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000630 	.word	0x20000630
 8004834:	40000400 	.word	0x40000400

08004838 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	f107 0310 	add.w	r3, r7, #16
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d12b      	bne.n	80048b0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004858:	4b18      	ldr	r3, [pc, #96]	@ (80048bc <HAL_TIM_Encoder_MspInit+0x84>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	4a17      	ldr	r2, [pc, #92]	@ (80048bc <HAL_TIM_Encoder_MspInit+0x84>)
 800485e:	f043 0302 	orr.w	r3, r3, #2
 8004862:	61d3      	str	r3, [r2, #28]
 8004864:	4b15      	ldr	r3, [pc, #84]	@ (80048bc <HAL_TIM_Encoder_MspInit+0x84>)
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004870:	4b12      	ldr	r3, [pc, #72]	@ (80048bc <HAL_TIM_Encoder_MspInit+0x84>)
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	4a11      	ldr	r2, [pc, #68]	@ (80048bc <HAL_TIM_Encoder_MspInit+0x84>)
 8004876:	f043 0304 	orr.w	r3, r3, #4
 800487a:	6193      	str	r3, [r2, #24]
 800487c:	4b0f      	ldr	r3, [pc, #60]	@ (80048bc <HAL_TIM_Encoder_MspInit+0x84>)
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8004888:	23c0      	movs	r3, #192	@ 0xc0
 800488a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004890:	2301      	movs	r3, #1
 8004892:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004894:	f107 0310 	add.w	r3, r7, #16
 8004898:	4619      	mov	r1, r3
 800489a:	4809      	ldr	r0, [pc, #36]	@ (80048c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800489c:	f001 f834 	bl	8005908 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80048a0:	2200      	movs	r2, #0
 80048a2:	2100      	movs	r1, #0
 80048a4:	201d      	movs	r0, #29
 80048a6:	f000 fe0a 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048aa:	201d      	movs	r0, #29
 80048ac:	f000 fe23 	bl	80054f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80048b0:	bf00      	nop
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40010800 	.word	0x40010800

080048c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80048c4:	f7ff ff5e 	bl	8004784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048c8:	480b      	ldr	r0, [pc, #44]	@ (80048f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80048ca:	490c      	ldr	r1, [pc, #48]	@ (80048fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80048cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <LoopFillZerobss+0x16>)
  movs r3, #0
 80048ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048d0:	e002      	b.n	80048d8 <LoopCopyDataInit>

080048d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048d6:	3304      	adds	r3, #4

080048d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048dc:	d3f9      	bcc.n	80048d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048de:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80048e0:	4c09      	ldr	r4, [pc, #36]	@ (8004908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048e4:	e001      	b.n	80048ea <LoopFillZerobss>

080048e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048e8:	3204      	adds	r2, #4

080048ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048ec:	d3fb      	bcc.n	80048e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048ee:	f003 f87d 	bl	80079ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048f2:	f7fd fdb1 	bl	8002458 <main>
  bx lr
 80048f6:	4770      	bx	lr
  ldr r0, =_sdata
 80048f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048fc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004900:	0800bd34 	.word	0x0800bd34
  ldr r2, =_sbss
 8004904:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004908:	200007c8 	.word	0x200007c8

0800490c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800490c:	e7fe      	b.n	800490c <ADC1_2_IRQHandler>
	...

08004910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004914:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <HAL_Init+0x28>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a07      	ldr	r2, [pc, #28]	@ (8004938 <HAL_Init+0x28>)
 800491a:	f043 0310 	orr.w	r3, r3, #16
 800491e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004920:	2003      	movs	r0, #3
 8004922:	f000 fdc1 	bl	80054a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004926:	200f      	movs	r0, #15
 8004928:	f000 f808 	bl	800493c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800492c:	f7ff fde6 	bl	80044fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40022000 	.word	0x40022000

0800493c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004944:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <HAL_InitTick+0x54>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b12      	ldr	r3, [pc, #72]	@ (8004994 <HAL_InitTick+0x58>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	4619      	mov	r1, r3
 800494e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004952:	fbb3 f3f1 	udiv	r3, r3, r1
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fdd9 	bl	8005512 <HAL_SYSTICK_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e00e      	b.n	8004988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b0f      	cmp	r3, #15
 800496e:	d80a      	bhi.n	8004986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004970:	2200      	movs	r2, #0
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	f000 fda1 	bl	80054be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800497c:	4a06      	ldr	r2, [pc, #24]	@ (8004998 <HAL_InitTick+0x5c>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000034 	.word	0x20000034
 8004994:	2000003c 	.word	0x2000003c
 8004998:	20000038 	.word	0x20000038

0800499c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049a0:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <HAL_IncTick+0x1c>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <HAL_IncTick+0x20>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4413      	add	r3, r2
 80049ac:	4a03      	ldr	r2, [pc, #12]	@ (80049bc <HAL_IncTick+0x20>)
 80049ae:	6013      	str	r3, [r2, #0]
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	2000003c 	.word	0x2000003c
 80049bc:	20000678 	.word	0x20000678

080049c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return uwTick;
 80049c4:	4b02      	ldr	r3, [pc, #8]	@ (80049d0 <HAL_GetTick+0x10>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr
 80049d0:	20000678 	.word	0x20000678

080049d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049dc:	f7ff fff0 	bl	80049c0 <HAL_GetTick>
 80049e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d005      	beq.n	80049fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <HAL_Delay+0x44>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049fa:	bf00      	nop
 80049fc:	f7ff ffe0 	bl	80049c0 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d8f7      	bhi.n	80049fc <HAL_Delay+0x28>
  {
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	2000003c 	.word	0x2000003c

08004a1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e0be      	b.n	8004bbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc fb2c 	bl	80010b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 faff 	bl	8005064 <ADC_ConversionStop_Disable>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 8099 	bne.w	8004baa <HAL_ADC_Init+0x18e>
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 8095 	bne.w	8004baa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a88:	f023 0302 	bic.w	r3, r3, #2
 8004a8c:	f043 0202 	orr.w	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004a9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7b1b      	ldrb	r3, [r3, #12]
 8004aa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004aa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab4:	d003      	beq.n	8004abe <HAL_ADC_Init+0xa2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d102      	bne.n	8004ac4 <HAL_ADC_Init+0xa8>
 8004abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ac2:	e000      	b.n	8004ac6 <HAL_ADC_Init+0xaa>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	7d1b      	ldrb	r3, [r3, #20]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d119      	bne.n	8004b08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7b1b      	ldrb	r3, [r3, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	035a      	lsls	r2, r3, #13
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	e00b      	b.n	8004b08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	f043 0201 	orr.w	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	4b28      	ldr	r3, [pc, #160]	@ (8004bc4 <HAL_ADC_Init+0x1a8>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b38:	d003      	beq.n	8004b42 <HAL_ADC_Init+0x126>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d104      	bne.n	8004b4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	051b      	lsls	r3, r3, #20
 8004b4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b52:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	4b18      	ldr	r3, [pc, #96]	@ (8004bc8 <HAL_ADC_Init+0x1ac>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d10b      	bne.n	8004b88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	f043 0201 	orr.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004b86:	e018      	b.n	8004bba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8c:	f023 0312 	bic.w	r3, r3, #18
 8004b90:	f043 0210 	orr.w	r2, r3, #16
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004ba8:	e007      	b.n	8004bba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	f043 0210 	orr.w	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	ffe1f7fd 	.word	0xffe1f7fd
 8004bc8:	ff1f0efe 	.word	0xff1f0efe

08004bcc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a64      	ldr	r2, [pc, #400]	@ (8004d74 <HAL_ADC_Start_DMA+0x1a8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <HAL_ADC_Start_DMA+0x24>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a63      	ldr	r2, [pc, #396]	@ (8004d78 <HAL_ADC_Start_DMA+0x1ac>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d106      	bne.n	8004bfe <HAL_ADC_Start_DMA+0x32>
 8004bf0:	4b60      	ldr	r3, [pc, #384]	@ (8004d74 <HAL_ADC_Start_DMA+0x1a8>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 80b3 	bne.w	8004d64 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_ADC_Start_DMA+0x40>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e0ae      	b.n	8004d6a <HAL_ADC_Start_DMA+0x19e>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f9cb 	bl	8004fb0 <ADC_Enable>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f040 809a 	bne.w	8004d5a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8004d78 <HAL_ADC_Start_DMA+0x1ac>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d105      	bne.n	8004c50 <HAL_ADC_Start_DMA+0x84>
 8004c44:	4b4b      	ldr	r3, [pc, #300]	@ (8004d74 <HAL_ADC_Start_DMA+0x1a8>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d115      	bne.n	8004c7c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d026      	beq.n	8004cb8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c7a:	e01d      	b.n	8004cb8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a39      	ldr	r2, [pc, #228]	@ (8004d74 <HAL_ADC_Start_DMA+0x1a8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <HAL_ADC_Start_DMA+0xd0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a38      	ldr	r2, [pc, #224]	@ (8004d78 <HAL_ADC_Start_DMA+0x1ac>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_ADC_Start_DMA+0xec>
 8004c9c:	4b35      	ldr	r3, [pc, #212]	@ (8004d74 <HAL_ADC_Start_DMA+0x1a8>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004cb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d006      	beq.n	8004cd2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	f023 0206 	bic.w	r2, r3, #6
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004cd0:	e002      	b.n	8004cd8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	4a25      	ldr	r2, [pc, #148]	@ (8004d7c <HAL_ADC_Start_DMA+0x1b0>)
 8004ce6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	4a24      	ldr	r2, [pc, #144]	@ (8004d80 <HAL_ADC_Start_DMA+0x1b4>)
 8004cee:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	4a23      	ldr	r2, [pc, #140]	@ (8004d84 <HAL_ADC_Start_DMA+0x1b8>)
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0202 	mvn.w	r2, #2
 8004d00:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d10:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a18      	ldr	r0, [r3, #32]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	334c      	adds	r3, #76	@ 0x4c
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f000 fc5d 	bl	80055e0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004d30:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004d34:	d108      	bne.n	8004d48 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004d44:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004d46:	e00f      	b.n	8004d68 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004d56:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004d58:	e006      	b.n	8004d68 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8004d62:	e001      	b.n	8004d68 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40012400 	.word	0x40012400
 8004d78:	40012800 	.word	0x40012800
 8004d7c:	080050e7 	.word	0x080050e7
 8004d80:	08005163 	.word	0x08005163
 8004d84:	0800517f 	.word	0x0800517f

08004d88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x20>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0dc      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x1da>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b06      	cmp	r3, #6
 8004dee:	d81c      	bhi.n	8004e2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	3b05      	subs	r3, #5
 8004e02:	221f      	movs	r2, #31
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	4019      	ands	r1, r3
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	3b05      	subs	r3, #5
 8004e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e28:	e03c      	b.n	8004ea4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d81c      	bhi.n	8004e6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	3b23      	subs	r3, #35	@ 0x23
 8004e44:	221f      	movs	r2, #31
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	4019      	ands	r1, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3b23      	subs	r3, #35	@ 0x23
 8004e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e6a:	e01b      	b.n	8004ea4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3b41      	subs	r3, #65	@ 0x41
 8004e7e:	221f      	movs	r2, #31
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	4019      	ands	r1, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	3b41      	subs	r3, #65	@ 0x41
 8004e98:	fa00 f203 	lsl.w	r2, r0, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b09      	cmp	r3, #9
 8004eaa:	d91c      	bls.n	8004ee6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68d9      	ldr	r1, [r3, #12]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4413      	add	r3, r2
 8004ebc:	3b1e      	subs	r3, #30
 8004ebe:	2207      	movs	r2, #7
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	4019      	ands	r1, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6898      	ldr	r0, [r3, #8]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3b1e      	subs	r3, #30
 8004ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	60da      	str	r2, [r3, #12]
 8004ee4:	e019      	b.n	8004f1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6919      	ldr	r1, [r3, #16]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	2207      	movs	r2, #7
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	4019      	ands	r1, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6898      	ldr	r0, [r3, #8]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d003      	beq.n	8004f2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f26:	2b11      	cmp	r3, #17
 8004f28:	d132      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d125      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d126      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004f50:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d11a      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f5a:	4b13      	ldr	r3, [pc, #76]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x1e8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a13      	ldr	r2, [pc, #76]	@ (8004fac <HAL_ADC_ConfigChannel+0x1ec>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	0c9a      	lsrs	r2, r3, #18
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f70:	e002      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f9      	bne.n	8004f72 <HAL_ADC_ConfigChannel+0x1b2>
 8004f7e:	e007      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	40012400 	.word	0x40012400
 8004fa8:	20000034 	.word	0x20000034
 8004fac:	431bde83 	.word	0x431bde83

08004fb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d040      	beq.n	8005050 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004fde:	4b1f      	ldr	r3, [pc, #124]	@ (800505c <ADC_Enable+0xac>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8005060 <ADC_Enable+0xb0>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	0c9b      	lsrs	r3, r3, #18
 8004fea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004fec:	e002      	b.n	8004ff4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f9      	bne.n	8004fee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ffa:	f7ff fce1 	bl	80049c0 <HAL_GetTick>
 8004ffe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005000:	e01f      	b.n	8005042 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005002:	f7ff fcdd 	bl	80049c0 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d918      	bls.n	8005042 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	d011      	beq.n	8005042 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	f043 0210 	orr.w	r2, r3, #16
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	f043 0201 	orr.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e007      	b.n	8005052 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d1d8      	bne.n	8005002 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000034 	.word	0x20000034
 8005060:	431bde83 	.word	0x431bde83

08005064 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	d12e      	bne.n	80050dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800508e:	f7ff fc97 	bl	80049c0 <HAL_GetTick>
 8005092:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005094:	e01b      	b.n	80050ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005096:	f7ff fc93 	bl	80049c0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d914      	bls.n	80050ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10d      	bne.n	80050ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	f043 0210 	orr.w	r2, r3, #16
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e007      	b.n	80050de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d0dc      	beq.n	8005096 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d127      	bne.n	8005150 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005116:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800511a:	d115      	bne.n	8005148 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005120:	2b00      	cmp	r3, #0
 8005122:	d111      	bne.n	8005148 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005140:	f043 0201 	orr.w	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff fe1d 	bl	8004d88 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800514e:	e004      	b.n	800515a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	4798      	blx	r3
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff fe12 	bl	8004d9a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	f043 0204 	orr.w	r2, r3, #4
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7ff fe01 	bl	8004dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80051b4:	b590      	push	{r4, r7, lr}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e097      	b.n	8005302 <HAL_ADCEx_Calibration_Start+0x14e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff ff42 	bl	8005064 <ADC_ConversionStop_Disable>
 80051e0:	4603      	mov	r3, r0
 80051e2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fee3 	bl	8004fb0 <ADC_Enable>
 80051ea:	4603      	mov	r3, r0
 80051ec:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 8081 	bne.w	80052f8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80051fe:	f023 0302 	bic.w	r3, r3, #2
 8005202:	f043 0202 	orr.w	r2, r3, #2
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800520a:	4b40      	ldr	r3, [pc, #256]	@ (800530c <HAL_ADCEx_Calibration_Start+0x158>)
 800520c:	681c      	ldr	r4, [r3, #0]
 800520e:	2002      	movs	r0, #2
 8005210:	f001 f9e0 	bl	80065d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005214:	4603      	mov	r3, r0
 8005216:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800521a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800521c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800521e:	e002      	b.n	8005226 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3b01      	subs	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f9      	bne.n	8005220 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0208 	orr.w	r2, r2, #8
 800523a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800523c:	f7ff fbc0 	bl	80049c0 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005242:	e01b      	b.n	800527c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005244:	f7ff fbbc 	bl	80049c0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b0a      	cmp	r3, #10
 8005250:	d914      	bls.n	800527c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00d      	beq.n	800527c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	f023 0312 	bic.w	r3, r3, #18
 8005268:	f043 0210 	orr.w	r2, r3, #16
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e042      	b.n	8005302 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1dc      	bne.n	8005244 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0204 	orr.w	r2, r2, #4
 8005298:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800529a:	f7ff fb91 	bl	80049c0 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80052a0:	e01b      	b.n	80052da <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80052a2:	f7ff fb8d 	bl	80049c0 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b0a      	cmp	r3, #10
 80052ae:	d914      	bls.n	80052da <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	f023 0312 	bic.w	r3, r3, #18
 80052c6:	f043 0210 	orr.w	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e013      	b.n	8005302 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1dc      	bne.n	80052a2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	f023 0303 	bic.w	r3, r3, #3
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005300:	7dfb      	ldrb	r3, [r7, #23]
}
 8005302:	4618      	mov	r0, r3
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	bd90      	pop	{r4, r7, pc}
 800530a:	bf00      	nop
 800530c:	20000034 	.word	0x20000034

08005310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005320:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <__NVIC_SetPriorityGrouping+0x44>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800532c:	4013      	ands	r3, r2
 800532e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800533c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005342:	4a04      	ldr	r2, [pc, #16]	@ (8005354 <__NVIC_SetPriorityGrouping+0x44>)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	60d3      	str	r3, [r2, #12]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	e000ed00 	.word	0xe000ed00

08005358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800535c:	4b04      	ldr	r3, [pc, #16]	@ (8005370 <__NVIC_GetPriorityGrouping+0x18>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	0a1b      	lsrs	r3, r3, #8
 8005362:	f003 0307 	and.w	r3, r3, #7
}
 8005366:	4618      	mov	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	e000ed00 	.word	0xe000ed00

08005374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800537e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005382:	2b00      	cmp	r3, #0
 8005384:	db0b      	blt.n	800539e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	f003 021f 	and.w	r2, r3, #31
 800538c:	4906      	ldr	r1, [pc, #24]	@ (80053a8 <__NVIC_EnableIRQ+0x34>)
 800538e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2001      	movs	r0, #1
 8005396:	fa00 f202 	lsl.w	r2, r0, r2
 800539a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	e000e100 	.word	0xe000e100

080053ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	6039      	str	r1, [r7, #0]
 80053b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	db0a      	blt.n	80053d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	490c      	ldr	r1, [pc, #48]	@ (80053f8 <__NVIC_SetPriority+0x4c>)
 80053c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ca:	0112      	lsls	r2, r2, #4
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	440b      	add	r3, r1
 80053d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053d4:	e00a      	b.n	80053ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	4908      	ldr	r1, [pc, #32]	@ (80053fc <__NVIC_SetPriority+0x50>)
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	3b04      	subs	r3, #4
 80053e4:	0112      	lsls	r2, r2, #4
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	440b      	add	r3, r1
 80053ea:	761a      	strb	r2, [r3, #24]
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	e000e100 	.word	0xe000e100
 80053fc:	e000ed00 	.word	0xe000ed00

08005400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	@ 0x24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f1c3 0307 	rsb	r3, r3, #7
 800541a:	2b04      	cmp	r3, #4
 800541c:	bf28      	it	cs
 800541e:	2304      	movcs	r3, #4
 8005420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3304      	adds	r3, #4
 8005426:	2b06      	cmp	r3, #6
 8005428:	d902      	bls.n	8005430 <NVIC_EncodePriority+0x30>
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3b03      	subs	r3, #3
 800542e:	e000      	b.n	8005432 <NVIC_EncodePriority+0x32>
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43da      	mvns	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	401a      	ands	r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005448:	f04f 31ff 	mov.w	r1, #4294967295
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	43d9      	mvns	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005458:	4313      	orrs	r3, r2
         );
}
 800545a:	4618      	mov	r0, r3
 800545c:	3724      	adds	r7, #36	@ 0x24
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr

08005464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3b01      	subs	r3, #1
 8005470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005474:	d301      	bcc.n	800547a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005476:	2301      	movs	r3, #1
 8005478:	e00f      	b.n	800549a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800547a:	4a0a      	ldr	r2, [pc, #40]	@ (80054a4 <SysTick_Config+0x40>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3b01      	subs	r3, #1
 8005480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005482:	210f      	movs	r1, #15
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	f7ff ff90 	bl	80053ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800548c:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <SysTick_Config+0x40>)
 800548e:	2200      	movs	r2, #0
 8005490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005492:	4b04      	ldr	r3, [pc, #16]	@ (80054a4 <SysTick_Config+0x40>)
 8005494:	2207      	movs	r2, #7
 8005496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	e000e010 	.word	0xe000e010

080054a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ff2d 	bl	8005310 <__NVIC_SetPriorityGrouping>
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054be:	b580      	push	{r7, lr}
 80054c0:	b086      	sub	sp, #24
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	4603      	mov	r3, r0
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054d0:	f7ff ff42 	bl	8005358 <__NVIC_GetPriorityGrouping>
 80054d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	6978      	ldr	r0, [r7, #20]
 80054dc:	f7ff ff90 	bl	8005400 <NVIC_EncodePriority>
 80054e0:	4602      	mov	r2, r0
 80054e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e6:	4611      	mov	r1, r2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff ff5f 	bl	80053ac <__NVIC_SetPriority>
}
 80054ee:	bf00      	nop
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	4603      	mov	r3, r0
 80054fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff ff35 	bl	8005374 <__NVIC_EnableIRQ>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ffa2 	bl	8005464 <SysTick_Config>
 8005520:	4603      	mov	r3, r0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e043      	b.n	80055ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	4b22      	ldr	r3, [pc, #136]	@ (80055d4 <HAL_DMA_Init+0xa8>)
 800554a:	4413      	add	r3, r2
 800554c:	4a22      	ldr	r2, [pc, #136]	@ (80055d8 <HAL_DMA_Init+0xac>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	009a      	lsls	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1f      	ldr	r2, [pc, #124]	@ (80055dc <HAL_DMA_Init+0xb0>)
 800555e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005576:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800557a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800559c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	bffdfff8 	.word	0xbffdfff8
 80055d8:	cccccccd 	.word	0xcccccccd
 80055dc:	40020000 	.word	0x40020000

080055e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_DMA_Start_IT+0x20>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e04b      	b.n	8005698 <HAL_DMA_Start_IT+0xb8>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	d13a      	bne.n	800568a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f937 	bl	80058ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 020e 	orr.w	r2, r2, #14
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e00f      	b.n	8005678 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0204 	bic.w	r2, r2, #4
 8005666:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 020a 	orr.w	r2, r2, #10
 8005676:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e005      	b.n	8005696 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005692:	2302      	movs	r3, #2
 8005694:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056bc:	2204      	movs	r2, #4
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d04f      	beq.n	8005768 <HAL_DMA_IRQHandler+0xc8>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d04a      	beq.n	8005768 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d107      	bne.n	80056f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0204 	bic.w	r2, r2, #4
 80056ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a66      	ldr	r2, [pc, #408]	@ (8005890 <HAL_DMA_IRQHandler+0x1f0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d029      	beq.n	800574e <HAL_DMA_IRQHandler+0xae>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a65      	ldr	r2, [pc, #404]	@ (8005894 <HAL_DMA_IRQHandler+0x1f4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d022      	beq.n	800574a <HAL_DMA_IRQHandler+0xaa>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a63      	ldr	r2, [pc, #396]	@ (8005898 <HAL_DMA_IRQHandler+0x1f8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01a      	beq.n	8005744 <HAL_DMA_IRQHandler+0xa4>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a62      	ldr	r2, [pc, #392]	@ (800589c <HAL_DMA_IRQHandler+0x1fc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d012      	beq.n	800573e <HAL_DMA_IRQHandler+0x9e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a60      	ldr	r2, [pc, #384]	@ (80058a0 <HAL_DMA_IRQHandler+0x200>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00a      	beq.n	8005738 <HAL_DMA_IRQHandler+0x98>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a5f      	ldr	r2, [pc, #380]	@ (80058a4 <HAL_DMA_IRQHandler+0x204>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d102      	bne.n	8005732 <HAL_DMA_IRQHandler+0x92>
 800572c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005730:	e00e      	b.n	8005750 <HAL_DMA_IRQHandler+0xb0>
 8005732:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005736:	e00b      	b.n	8005750 <HAL_DMA_IRQHandler+0xb0>
 8005738:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800573c:	e008      	b.n	8005750 <HAL_DMA_IRQHandler+0xb0>
 800573e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005742:	e005      	b.n	8005750 <HAL_DMA_IRQHandler+0xb0>
 8005744:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005748:	e002      	b.n	8005750 <HAL_DMA_IRQHandler+0xb0>
 800574a:	2340      	movs	r3, #64	@ 0x40
 800574c:	e000      	b.n	8005750 <HAL_DMA_IRQHandler+0xb0>
 800574e:	2304      	movs	r3, #4
 8005750:	4a55      	ldr	r2, [pc, #340]	@ (80058a8 <HAL_DMA_IRQHandler+0x208>)
 8005752:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8094 	beq.w	8005886 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005766:	e08e      	b.n	8005886 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	2202      	movs	r2, #2
 800576e:	409a      	lsls	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d056      	beq.n	8005826 <HAL_DMA_IRQHandler+0x186>
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d051      	beq.n	8005826 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 020a 	bic.w	r2, r2, #10
 800579e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a38      	ldr	r2, [pc, #224]	@ (8005890 <HAL_DMA_IRQHandler+0x1f0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d029      	beq.n	8005806 <HAL_DMA_IRQHandler+0x166>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a37      	ldr	r2, [pc, #220]	@ (8005894 <HAL_DMA_IRQHandler+0x1f4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <HAL_DMA_IRQHandler+0x162>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a35      	ldr	r2, [pc, #212]	@ (8005898 <HAL_DMA_IRQHandler+0x1f8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01a      	beq.n	80057fc <HAL_DMA_IRQHandler+0x15c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a34      	ldr	r2, [pc, #208]	@ (800589c <HAL_DMA_IRQHandler+0x1fc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d012      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x156>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a32      	ldr	r2, [pc, #200]	@ (80058a0 <HAL_DMA_IRQHandler+0x200>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00a      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x150>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a31      	ldr	r2, [pc, #196]	@ (80058a4 <HAL_DMA_IRQHandler+0x204>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d102      	bne.n	80057ea <HAL_DMA_IRQHandler+0x14a>
 80057e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80057e8:	e00e      	b.n	8005808 <HAL_DMA_IRQHandler+0x168>
 80057ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057ee:	e00b      	b.n	8005808 <HAL_DMA_IRQHandler+0x168>
 80057f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80057f4:	e008      	b.n	8005808 <HAL_DMA_IRQHandler+0x168>
 80057f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80057fa:	e005      	b.n	8005808 <HAL_DMA_IRQHandler+0x168>
 80057fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005800:	e002      	b.n	8005808 <HAL_DMA_IRQHandler+0x168>
 8005802:	2320      	movs	r3, #32
 8005804:	e000      	b.n	8005808 <HAL_DMA_IRQHandler+0x168>
 8005806:	2302      	movs	r3, #2
 8005808:	4a27      	ldr	r2, [pc, #156]	@ (80058a8 <HAL_DMA_IRQHandler+0x208>)
 800580a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d034      	beq.n	8005886 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005824:	e02f      	b.n	8005886 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	2208      	movs	r2, #8
 800582c:	409a      	lsls	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d028      	beq.n	8005888 <HAL_DMA_IRQHandler+0x1e8>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d023      	beq.n	8005888 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 020e 	bic.w	r2, r2, #14
 800584e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	2101      	movs	r1, #1
 800585a:	fa01 f202 	lsl.w	r2, r1, r2
 800585e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
    }
  }
  return;
 8005886:	bf00      	nop
 8005888:	bf00      	nop
}
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40020008 	.word	0x40020008
 8005894:	4002001c 	.word	0x4002001c
 8005898:	40020030 	.word	0x40020030
 800589c:	40020044 	.word	0x40020044
 80058a0:	40020058 	.word	0x40020058
 80058a4:	4002006c 	.word	0x4002006c
 80058a8:	40020000 	.word	0x40020000

080058ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c2:	2101      	movs	r1, #1
 80058c4:	fa01 f202 	lsl.w	r2, r1, r2
 80058c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b10      	cmp	r3, #16
 80058d8:	d108      	bne.n	80058ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058ea:	e007      	b.n	80058fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	60da      	str	r2, [r3, #12]
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
	...

08005908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005908:	b480      	push	{r7}
 800590a:	b08b      	sub	sp, #44	@ 0x2c
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005912:	2300      	movs	r3, #0
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005916:	2300      	movs	r3, #0
 8005918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800591a:	e169      	b.n	8005bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800591c:	2201      	movs	r2, #1
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	4013      	ands	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	429a      	cmp	r2, r3
 8005936:	f040 8158 	bne.w	8005bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4a9a      	ldr	r2, [pc, #616]	@ (8005ba8 <HAL_GPIO_Init+0x2a0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d05e      	beq.n	8005a02 <HAL_GPIO_Init+0xfa>
 8005944:	4a98      	ldr	r2, [pc, #608]	@ (8005ba8 <HAL_GPIO_Init+0x2a0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d875      	bhi.n	8005a36 <HAL_GPIO_Init+0x12e>
 800594a:	4a98      	ldr	r2, [pc, #608]	@ (8005bac <HAL_GPIO_Init+0x2a4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d058      	beq.n	8005a02 <HAL_GPIO_Init+0xfa>
 8005950:	4a96      	ldr	r2, [pc, #600]	@ (8005bac <HAL_GPIO_Init+0x2a4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d86f      	bhi.n	8005a36 <HAL_GPIO_Init+0x12e>
 8005956:	4a96      	ldr	r2, [pc, #600]	@ (8005bb0 <HAL_GPIO_Init+0x2a8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d052      	beq.n	8005a02 <HAL_GPIO_Init+0xfa>
 800595c:	4a94      	ldr	r2, [pc, #592]	@ (8005bb0 <HAL_GPIO_Init+0x2a8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d869      	bhi.n	8005a36 <HAL_GPIO_Init+0x12e>
 8005962:	4a94      	ldr	r2, [pc, #592]	@ (8005bb4 <HAL_GPIO_Init+0x2ac>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d04c      	beq.n	8005a02 <HAL_GPIO_Init+0xfa>
 8005968:	4a92      	ldr	r2, [pc, #584]	@ (8005bb4 <HAL_GPIO_Init+0x2ac>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d863      	bhi.n	8005a36 <HAL_GPIO_Init+0x12e>
 800596e:	4a92      	ldr	r2, [pc, #584]	@ (8005bb8 <HAL_GPIO_Init+0x2b0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d046      	beq.n	8005a02 <HAL_GPIO_Init+0xfa>
 8005974:	4a90      	ldr	r2, [pc, #576]	@ (8005bb8 <HAL_GPIO_Init+0x2b0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d85d      	bhi.n	8005a36 <HAL_GPIO_Init+0x12e>
 800597a:	2b12      	cmp	r3, #18
 800597c:	d82a      	bhi.n	80059d4 <HAL_GPIO_Init+0xcc>
 800597e:	2b12      	cmp	r3, #18
 8005980:	d859      	bhi.n	8005a36 <HAL_GPIO_Init+0x12e>
 8005982:	a201      	add	r2, pc, #4	@ (adr r2, 8005988 <HAL_GPIO_Init+0x80>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	08005a03 	.word	0x08005a03
 800598c:	080059dd 	.word	0x080059dd
 8005990:	080059ef 	.word	0x080059ef
 8005994:	08005a31 	.word	0x08005a31
 8005998:	08005a37 	.word	0x08005a37
 800599c:	08005a37 	.word	0x08005a37
 80059a0:	08005a37 	.word	0x08005a37
 80059a4:	08005a37 	.word	0x08005a37
 80059a8:	08005a37 	.word	0x08005a37
 80059ac:	08005a37 	.word	0x08005a37
 80059b0:	08005a37 	.word	0x08005a37
 80059b4:	08005a37 	.word	0x08005a37
 80059b8:	08005a37 	.word	0x08005a37
 80059bc:	08005a37 	.word	0x08005a37
 80059c0:	08005a37 	.word	0x08005a37
 80059c4:	08005a37 	.word	0x08005a37
 80059c8:	08005a37 	.word	0x08005a37
 80059cc:	080059e5 	.word	0x080059e5
 80059d0:	080059f9 	.word	0x080059f9
 80059d4:	4a79      	ldr	r2, [pc, #484]	@ (8005bbc <HAL_GPIO_Init+0x2b4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80059da:	e02c      	b.n	8005a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	623b      	str	r3, [r7, #32]
          break;
 80059e2:	e029      	b.n	8005a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	3304      	adds	r3, #4
 80059ea:	623b      	str	r3, [r7, #32]
          break;
 80059ec:	e024      	b.n	8005a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	3308      	adds	r3, #8
 80059f4:	623b      	str	r3, [r7, #32]
          break;
 80059f6:	e01f      	b.n	8005a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	330c      	adds	r3, #12
 80059fe:	623b      	str	r3, [r7, #32]
          break;
 8005a00:	e01a      	b.n	8005a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	623b      	str	r3, [r7, #32]
          break;
 8005a0e:	e013      	b.n	8005a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d105      	bne.n	8005a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a18:	2308      	movs	r3, #8
 8005a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	611a      	str	r2, [r3, #16]
          break;
 8005a22:	e009      	b.n	8005a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a24:	2308      	movs	r3, #8
 8005a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	615a      	str	r2, [r3, #20]
          break;
 8005a2e:	e003      	b.n	8005a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005a30:	2300      	movs	r3, #0
 8005a32:	623b      	str	r3, [r7, #32]
          break;
 8005a34:	e000      	b.n	8005a38 <HAL_GPIO_Init+0x130>
          break;
 8005a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2bff      	cmp	r3, #255	@ 0xff
 8005a3c:	d801      	bhi.n	8005a42 <HAL_GPIO_Init+0x13a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	e001      	b.n	8005a46 <HAL_GPIO_Init+0x13e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2bff      	cmp	r3, #255	@ 0xff
 8005a4c:	d802      	bhi.n	8005a54 <HAL_GPIO_Init+0x14c>
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	e002      	b.n	8005a5a <HAL_GPIO_Init+0x152>
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	3b08      	subs	r3, #8
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	210f      	movs	r1, #15
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	6a39      	ldr	r1, [r7, #32]
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	fa01 f303 	lsl.w	r3, r1, r3
 8005a74:	431a      	orrs	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80b1 	beq.w	8005bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005a88:	4b4d      	ldr	r3, [pc, #308]	@ (8005bc0 <HAL_GPIO_Init+0x2b8>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8005bc0 <HAL_GPIO_Init+0x2b8>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6193      	str	r3, [r2, #24]
 8005a94:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc0 <HAL_GPIO_Init+0x2b8>)
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005aa0:	4a48      	ldr	r2, [pc, #288]	@ (8005bc4 <HAL_GPIO_Init+0x2bc>)
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	089b      	lsrs	r3, r3, #2
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	220f      	movs	r2, #15
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43db      	mvns	r3, r3
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a40      	ldr	r2, [pc, #256]	@ (8005bc8 <HAL_GPIO_Init+0x2c0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d013      	beq.n	8005af4 <HAL_GPIO_Init+0x1ec>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a3f      	ldr	r2, [pc, #252]	@ (8005bcc <HAL_GPIO_Init+0x2c4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00d      	beq.n	8005af0 <HAL_GPIO_Init+0x1e8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8005bd0 <HAL_GPIO_Init+0x2c8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <HAL_GPIO_Init+0x1e4>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a3d      	ldr	r2, [pc, #244]	@ (8005bd4 <HAL_GPIO_Init+0x2cc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <HAL_GPIO_Init+0x1e0>
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e006      	b.n	8005af6 <HAL_GPIO_Init+0x1ee>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	e004      	b.n	8005af6 <HAL_GPIO_Init+0x1ee>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e002      	b.n	8005af6 <HAL_GPIO_Init+0x1ee>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_GPIO_Init+0x1ee>
 8005af4:	2300      	movs	r3, #0
 8005af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af8:	f002 0203 	and.w	r2, r2, #3
 8005afc:	0092      	lsls	r2, r2, #2
 8005afe:	4093      	lsls	r3, r2
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005b06:	492f      	ldr	r1, [pc, #188]	@ (8005bc4 <HAL_GPIO_Init+0x2bc>)
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d006      	beq.n	8005b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005b20:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	492c      	ldr	r1, [pc, #176]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	608b      	str	r3, [r1, #8]
 8005b2c:	e006      	b.n	8005b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	4928      	ldr	r1, [pc, #160]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005b48:	4b23      	ldr	r3, [pc, #140]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	4922      	ldr	r1, [pc, #136]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60cb      	str	r3, [r1, #12]
 8005b54:	e006      	b.n	8005b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005b56:	4b20      	ldr	r3, [pc, #128]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	491e      	ldr	r1, [pc, #120]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d006      	beq.n	8005b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005b70:	4b19      	ldr	r3, [pc, #100]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	4918      	ldr	r1, [pc, #96]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	604b      	str	r3, [r1, #4]
 8005b7c:	e006      	b.n	8005b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005b7e:	4b16      	ldr	r3, [pc, #88]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	43db      	mvns	r3, r3
 8005b86:	4914      	ldr	r1, [pc, #80]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d021      	beq.n	8005bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005b98:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	490e      	ldr	r1, [pc, #56]	@ (8005bd8 <HAL_GPIO_Init+0x2d0>)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	600b      	str	r3, [r1, #0]
 8005ba4:	e021      	b.n	8005bea <HAL_GPIO_Init+0x2e2>
 8005ba6:	bf00      	nop
 8005ba8:	10320000 	.word	0x10320000
 8005bac:	10310000 	.word	0x10310000
 8005bb0:	10220000 	.word	0x10220000
 8005bb4:	10210000 	.word	0x10210000
 8005bb8:	10120000 	.word	0x10120000
 8005bbc:	10110000 	.word	0x10110000
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40010800 	.word	0x40010800
 8005bcc:	40010c00 	.word	0x40010c00
 8005bd0:	40011000 	.word	0x40011000
 8005bd4:	40011400 	.word	0x40011400
 8005bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c0c <HAL_GPIO_Init+0x304>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	4909      	ldr	r1, [pc, #36]	@ (8005c0c <HAL_GPIO_Init+0x304>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	3301      	adds	r3, #1
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f47f ae8e 	bne.w	800591c <HAL_GPIO_Init+0x14>
  }
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	372c      	adds	r7, #44	@ 0x2c
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	40010400 	.word	0x40010400

08005c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	807b      	strh	r3, [r7, #2]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c20:	787b      	ldrb	r3, [r7, #1]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c26:	887a      	ldrh	r2, [r7, #2]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005c2c:	e003      	b.n	8005c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005c2e:	887b      	ldrh	r3, [r7, #2]
 8005c30:	041a      	lsls	r2, r3, #16
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	611a      	str	r2, [r3, #16]
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr

08005c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c4a:	4b08      	ldr	r3, [pc, #32]	@ (8005c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c56:	4a05      	ldr	r2, [pc, #20]	@ (8005c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fc fdc4 	bl	80027ec <HAL_GPIO_EXTI_Callback>
  }
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40010400 	.word	0x40010400

08005c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e272      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8087 	beq.w	8005d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c90:	4b92      	ldr	r3, [pc, #584]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f003 030c 	and.w	r3, r3, #12
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 030c 	and.w	r3, r3, #12
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d112      	bne.n	8005cce <HAL_RCC_OscConfig+0x5e>
 8005ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb4:	d10b      	bne.n	8005cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb6:	4b89      	ldr	r3, [pc, #548]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d06c      	beq.n	8005d9c <HAL_RCC_OscConfig+0x12c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d168      	bne.n	8005d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e24c      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd6:	d106      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x76>
 8005cd8:	4b80      	ldr	r3, [pc, #512]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a7f      	ldr	r2, [pc, #508]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	e02e      	b.n	8005d44 <HAL_RCC_OscConfig+0xd4>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10c      	bne.n	8005d08 <HAL_RCC_OscConfig+0x98>
 8005cee:	4b7b      	ldr	r3, [pc, #492]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a7a      	ldr	r2, [pc, #488]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b78      	ldr	r3, [pc, #480]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a77      	ldr	r2, [pc, #476]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e01d      	b.n	8005d44 <HAL_RCC_OscConfig+0xd4>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0xbc>
 8005d12:	4b72      	ldr	r3, [pc, #456]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a71      	ldr	r2, [pc, #452]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a6e      	ldr	r2, [pc, #440]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e00b      	b.n	8005d44 <HAL_RCC_OscConfig+0xd4>
 8005d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a6a      	ldr	r2, [pc, #424]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	4b68      	ldr	r3, [pc, #416]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a67      	ldr	r2, [pc, #412]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d013      	beq.n	8005d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4c:	f7fe fe38 	bl	80049c0 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d54:	f7fe fe34 	bl	80049c0 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	@ 0x64
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e200      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d66:	4b5d      	ldr	r3, [pc, #372]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCC_OscConfig+0xe4>
 8005d72:	e014      	b.n	8005d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d74:	f7fe fe24 	bl	80049c0 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d7c:	f7fe fe20 	bl	80049c0 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b64      	cmp	r3, #100	@ 0x64
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e1ec      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8e:	4b53      	ldr	r3, [pc, #332]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f0      	bne.n	8005d7c <HAL_RCC_OscConfig+0x10c>
 8005d9a:	e000      	b.n	8005d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d063      	beq.n	8005e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005daa:	4b4c      	ldr	r3, [pc, #304]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00b      	beq.n	8005dce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005db6:	4b49      	ldr	r3, [pc, #292]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d11c      	bne.n	8005dfc <HAL_RCC_OscConfig+0x18c>
 8005dc2:	4b46      	ldr	r3, [pc, #280]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d116      	bne.n	8005dfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dce:	4b43      	ldr	r3, [pc, #268]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_RCC_OscConfig+0x176>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d001      	beq.n	8005de6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e1c0      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de6:	4b3d      	ldr	r3, [pc, #244]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4939      	ldr	r1, [pc, #228]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfa:	e03a      	b.n	8005e72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d020      	beq.n	8005e46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e04:	4b36      	ldr	r3, [pc, #216]	@ (8005ee0 <HAL_RCC_OscConfig+0x270>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0a:	f7fe fdd9 	bl	80049c0 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e12:	f7fe fdd5 	bl	80049c0 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e1a1      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e24:	4b2d      	ldr	r3, [pc, #180]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e30:	4b2a      	ldr	r3, [pc, #168]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	4927      	ldr	r1, [pc, #156]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	600b      	str	r3, [r1, #0]
 8005e44:	e015      	b.n	8005e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e46:	4b26      	ldr	r3, [pc, #152]	@ (8005ee0 <HAL_RCC_OscConfig+0x270>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4c:	f7fe fdb8 	bl	80049c0 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e54:	f7fe fdb4 	bl	80049c0 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e180      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e66:	4b1d      	ldr	r3, [pc, #116]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d03a      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d019      	beq.n	8005eba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e86:	4b17      	ldr	r3, [pc, #92]	@ (8005ee4 <HAL_RCC_OscConfig+0x274>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e8c:	f7fe fd98 	bl	80049c0 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fe fd94 	bl	80049c0 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e160      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8005edc <HAL_RCC_OscConfig+0x26c>)
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f0      	beq.n	8005e94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	f000 faba 	bl	800642c <RCC_Delay>
 8005eb8:	e01c      	b.n	8005ef4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <HAL_RCC_OscConfig+0x274>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec0:	f7fe fd7e 	bl	80049c0 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec6:	e00f      	b.n	8005ee8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ec8:	f7fe fd7a 	bl	80049c0 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d908      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e146      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	42420000 	.word	0x42420000
 8005ee4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee8:	4b92      	ldr	r3, [pc, #584]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e9      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80a6 	beq.w	800604e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f06:	4b8b      	ldr	r3, [pc, #556]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10d      	bne.n	8005f2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f12:	4b88      	ldr	r3, [pc, #544]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	4a87      	ldr	r2, [pc, #540]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f1c:	61d3      	str	r3, [r2, #28]
 8005f1e:	4b85      	ldr	r3, [pc, #532]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f26:	60bb      	str	r3, [r7, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2e:	4b82      	ldr	r3, [pc, #520]	@ (8006138 <HAL_RCC_OscConfig+0x4c8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d118      	bne.n	8005f6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8006138 <HAL_RCC_OscConfig+0x4c8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8006138 <HAL_RCC_OscConfig+0x4c8>)
 8005f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f46:	f7fe fd3b 	bl	80049c0 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4e:	f7fe fd37 	bl	80049c0 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b64      	cmp	r3, #100	@ 0x64
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e103      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f60:	4b75      	ldr	r3, [pc, #468]	@ (8006138 <HAL_RCC_OscConfig+0x4c8>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d106      	bne.n	8005f82 <HAL_RCC_OscConfig+0x312>
 8005f74:	4b6f      	ldr	r3, [pc, #444]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	4a6e      	ldr	r2, [pc, #440]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6213      	str	r3, [r2, #32]
 8005f80:	e02d      	b.n	8005fde <HAL_RCC_OscConfig+0x36e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10c      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x334>
 8005f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	4a69      	ldr	r2, [pc, #420]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	6213      	str	r3, [r2, #32]
 8005f96:	4b67      	ldr	r3, [pc, #412]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	4a66      	ldr	r2, [pc, #408]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005f9c:	f023 0304 	bic.w	r3, r3, #4
 8005fa0:	6213      	str	r3, [r2, #32]
 8005fa2:	e01c      	b.n	8005fde <HAL_RCC_OscConfig+0x36e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b05      	cmp	r3, #5
 8005faa:	d10c      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x356>
 8005fac:	4b61      	ldr	r3, [pc, #388]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	4a60      	ldr	r2, [pc, #384]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005fb2:	f043 0304 	orr.w	r3, r3, #4
 8005fb6:	6213      	str	r3, [r2, #32]
 8005fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	6213      	str	r3, [r2, #32]
 8005fc4:	e00b      	b.n	8005fde <HAL_RCC_OscConfig+0x36e>
 8005fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	4a5a      	ldr	r2, [pc, #360]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	6213      	str	r3, [r2, #32]
 8005fd2:	4b58      	ldr	r3, [pc, #352]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	4a57      	ldr	r2, [pc, #348]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8005fd8:	f023 0304 	bic.w	r3, r3, #4
 8005fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d015      	beq.n	8006012 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe6:	f7fe fceb 	bl	80049c0 <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fec:	e00a      	b.n	8006004 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fee:	f7fe fce7 	bl	80049c0 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e0b1      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006004:	4b4b      	ldr	r3, [pc, #300]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0ee      	beq.n	8005fee <HAL_RCC_OscConfig+0x37e>
 8006010:	e014      	b.n	800603c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006012:	f7fe fcd5 	bl	80049c0 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006018:	e00a      	b.n	8006030 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601a:	f7fe fcd1 	bl	80049c0 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006028:	4293      	cmp	r3, r2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e09b      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006030:	4b40      	ldr	r3, [pc, #256]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1ee      	bne.n	800601a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800603c:	7dfb      	ldrb	r3, [r7, #23]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d105      	bne.n	800604e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006042:	4b3c      	ldr	r3, [pc, #240]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	4a3b      	ldr	r2, [pc, #236]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 8006048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800604c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8087 	beq.w	8006166 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006058:	4b36      	ldr	r3, [pc, #216]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 030c 	and.w	r3, r3, #12
 8006060:	2b08      	cmp	r3, #8
 8006062:	d061      	beq.n	8006128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d146      	bne.n	80060fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606c:	4b33      	ldr	r3, [pc, #204]	@ (800613c <HAL_RCC_OscConfig+0x4cc>)
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006072:	f7fe fca5 	bl	80049c0 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607a:	f7fe fca1 	bl	80049c0 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e06d      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800608c:	4b29      	ldr	r3, [pc, #164]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1f0      	bne.n	800607a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a0:	d108      	bne.n	80060b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80060a2:	4b24      	ldr	r3, [pc, #144]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	4921      	ldr	r1, [pc, #132]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a19      	ldr	r1, [r3, #32]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	430b      	orrs	r3, r1
 80060c6:	491b      	ldr	r1, [pc, #108]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060cc:	4b1b      	ldr	r3, [pc, #108]	@ (800613c <HAL_RCC_OscConfig+0x4cc>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d2:	f7fe fc75 	bl	80049c0 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060da:	f7fe fc71 	bl	80049c0 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e03d      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060ec:	4b11      	ldr	r3, [pc, #68]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x46a>
 80060f8:	e035      	b.n	8006166 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060fa:	4b10      	ldr	r3, [pc, #64]	@ (800613c <HAL_RCC_OscConfig+0x4cc>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006100:	f7fe fc5e 	bl	80049c0 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006108:	f7fe fc5a 	bl	80049c0 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e026      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800611a:	4b06      	ldr	r3, [pc, #24]	@ (8006134 <HAL_RCC_OscConfig+0x4c4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f0      	bne.n	8006108 <HAL_RCC_OscConfig+0x498>
 8006126:	e01e      	b.n	8006166 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d107      	bne.n	8006140 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e019      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
 8006134:	40021000 	.word	0x40021000
 8006138:	40007000 	.word	0x40007000
 800613c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006140:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <HAL_RCC_OscConfig+0x500>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	429a      	cmp	r2, r3
 8006152:	d106      	bne.n	8006162 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d001      	beq.n	8006166 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40021000 	.word	0x40021000

08006174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0d0      	b.n	800632a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006188:	4b6a      	ldr	r3, [pc, #424]	@ (8006334 <HAL_RCC_ClockConfig+0x1c0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d910      	bls.n	80061b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006196:	4b67      	ldr	r3, [pc, #412]	@ (8006334 <HAL_RCC_ClockConfig+0x1c0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f023 0207 	bic.w	r2, r3, #7
 800619e:	4965      	ldr	r1, [pc, #404]	@ (8006334 <HAL_RCC_ClockConfig+0x1c0>)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a6:	4b63      	ldr	r3, [pc, #396]	@ (8006334 <HAL_RCC_ClockConfig+0x1c0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d001      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0b8      	b.n	800632a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d020      	beq.n	8006206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061d0:	4b59      	ldr	r3, [pc, #356]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	4a58      	ldr	r2, [pc, #352]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 80061d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80061da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061e8:	4b53      	ldr	r3, [pc, #332]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4a52      	ldr	r2, [pc, #328]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 80061ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80061f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f4:	4b50      	ldr	r3, [pc, #320]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	494d      	ldr	r1, [pc, #308]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 8006202:	4313      	orrs	r3, r2
 8006204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d040      	beq.n	8006294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d107      	bne.n	800622a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800621a:	4b47      	ldr	r3, [pc, #284]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d115      	bne.n	8006252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e07f      	b.n	800632a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d107      	bne.n	8006242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006232:	4b41      	ldr	r3, [pc, #260]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e073      	b.n	800632a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006242:	4b3d      	ldr	r3, [pc, #244]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e06b      	b.n	800632a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006252:	4b39      	ldr	r3, [pc, #228]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f023 0203 	bic.w	r2, r3, #3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4936      	ldr	r1, [pc, #216]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 8006260:	4313      	orrs	r3, r2
 8006262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006264:	f7fe fbac 	bl	80049c0 <HAL_GetTick>
 8006268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626a:	e00a      	b.n	8006282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800626c:	f7fe fba8 	bl	80049c0 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e053      	b.n	800632a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006282:	4b2d      	ldr	r3, [pc, #180]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f003 020c 	and.w	r2, r3, #12
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	429a      	cmp	r2, r3
 8006292:	d1eb      	bne.n	800626c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006294:	4b27      	ldr	r3, [pc, #156]	@ (8006334 <HAL_RCC_ClockConfig+0x1c0>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d210      	bcs.n	80062c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b24      	ldr	r3, [pc, #144]	@ (8006334 <HAL_RCC_ClockConfig+0x1c0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f023 0207 	bic.w	r2, r3, #7
 80062aa:	4922      	ldr	r1, [pc, #136]	@ (8006334 <HAL_RCC_ClockConfig+0x1c0>)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b2:	4b20      	ldr	r3, [pc, #128]	@ (8006334 <HAL_RCC_ClockConfig+0x1c0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d001      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e032      	b.n	800632a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d0:	4b19      	ldr	r3, [pc, #100]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4916      	ldr	r1, [pc, #88]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062ee:	4b12      	ldr	r3, [pc, #72]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	490e      	ldr	r1, [pc, #56]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006302:	f000 f821 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8006306:	4602      	mov	r2, r0
 8006308:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	091b      	lsrs	r3, r3, #4
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	490a      	ldr	r1, [pc, #40]	@ (800633c <HAL_RCC_ClockConfig+0x1c8>)
 8006314:	5ccb      	ldrb	r3, [r1, r3]
 8006316:	fa22 f303 	lsr.w	r3, r2, r3
 800631a:	4a09      	ldr	r2, [pc, #36]	@ (8006340 <HAL_RCC_ClockConfig+0x1cc>)
 800631c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800631e:	4b09      	ldr	r3, [pc, #36]	@ (8006344 <HAL_RCC_ClockConfig+0x1d0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fb0a 	bl	800493c <HAL_InitTick>

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	40022000 	.word	0x40022000
 8006338:	40021000 	.word	0x40021000
 800633c:	0800b970 	.word	0x0800b970
 8006340:	20000034 	.word	0x20000034
 8006344:	20000038 	.word	0x20000038

08006348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	2300      	movs	r3, #0
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	2300      	movs	r3, #0
 800635c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006362:	4b1e      	ldr	r3, [pc, #120]	@ (80063dc <HAL_RCC_GetSysClockFreq+0x94>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 030c 	and.w	r3, r3, #12
 800636e:	2b04      	cmp	r3, #4
 8006370:	d002      	beq.n	8006378 <HAL_RCC_GetSysClockFreq+0x30>
 8006372:	2b08      	cmp	r3, #8
 8006374:	d003      	beq.n	800637e <HAL_RCC_GetSysClockFreq+0x36>
 8006376:	e027      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006378:	4b19      	ldr	r3, [pc, #100]	@ (80063e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800637a:	613b      	str	r3, [r7, #16]
      break;
 800637c:	e027      	b.n	80063ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	0c9b      	lsrs	r3, r3, #18
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	4a17      	ldr	r2, [pc, #92]	@ (80063e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006388:	5cd3      	ldrb	r3, [r2, r3]
 800638a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d010      	beq.n	80063b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006396:	4b11      	ldr	r3, [pc, #68]	@ (80063dc <HAL_RCC_GetSysClockFreq+0x94>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	0c5b      	lsrs	r3, r3, #17
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	4a11      	ldr	r2, [pc, #68]	@ (80063e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80063a2:	5cd3      	ldrb	r3, [r2, r3]
 80063a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a0d      	ldr	r2, [pc, #52]	@ (80063e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80063aa:	fb03 f202 	mul.w	r2, r3, r2
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	e004      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a0c      	ldr	r2, [pc, #48]	@ (80063ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80063bc:	fb02 f303 	mul.w	r3, r2, r3
 80063c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	613b      	str	r3, [r7, #16]
      break;
 80063c6:	e002      	b.n	80063ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063c8:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80063ca:	613b      	str	r3, [r7, #16]
      break;
 80063cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ce:	693b      	ldr	r3, [r7, #16]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40021000 	.word	0x40021000
 80063e0:	007a1200 	.word	0x007a1200
 80063e4:	0800b988 	.word	0x0800b988
 80063e8:	0800b998 	.word	0x0800b998
 80063ec:	003d0900 	.word	0x003d0900

080063f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063f4:	4b02      	ldr	r3, [pc, #8]	@ (8006400 <HAL_RCC_GetHCLKFreq+0x10>)
 80063f6:	681b      	ldr	r3, [r3, #0]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr
 8006400:	20000034 	.word	0x20000034

08006404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006408:	f7ff fff2 	bl	80063f0 <HAL_RCC_GetHCLKFreq>
 800640c:	4602      	mov	r2, r0
 800640e:	4b05      	ldr	r3, [pc, #20]	@ (8006424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	0adb      	lsrs	r3, r3, #11
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	4903      	ldr	r1, [pc, #12]	@ (8006428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800641a:	5ccb      	ldrb	r3, [r1, r3]
 800641c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40021000 	.word	0x40021000
 8006428:	0800b980 	.word	0x0800b980

0800642c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006434:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <RCC_Delay+0x34>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a0a      	ldr	r2, [pc, #40]	@ (8006464 <RCC_Delay+0x38>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	0a5b      	lsrs	r3, r3, #9
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	fb02 f303 	mul.w	r3, r2, r3
 8006446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006448:	bf00      	nop
  }
  while (Delay --);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1e5a      	subs	r2, r3, #1
 800644e:	60fa      	str	r2, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f9      	bne.n	8006448 <RCC_Delay+0x1c>
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr
 8006460:	20000034 	.word	0x20000034
 8006464:	10624dd3 	.word	0x10624dd3

08006468 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d07d      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006484:	2300      	movs	r3, #0
 8006486:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006488:	4b4f      	ldr	r3, [pc, #316]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10d      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006494:	4b4c      	ldr	r3, [pc, #304]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	4a4b      	ldr	r2, [pc, #300]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800649a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800649e:	61d3      	str	r3, [r2, #28]
 80064a0:	4b49      	ldr	r3, [pc, #292]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ac:	2301      	movs	r3, #1
 80064ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b0:	4b46      	ldr	r3, [pc, #280]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d118      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064bc:	4b43      	ldr	r3, [pc, #268]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a42      	ldr	r2, [pc, #264]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064c8:	f7fe fa7a 	bl	80049c0 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ce:	e008      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d0:	f7fe fa76 	bl	80049c0 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b64      	cmp	r3, #100	@ 0x64
 80064dc:	d901      	bls.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e06d      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e2:	4b3a      	ldr	r3, [pc, #232]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0f0      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064ee:	4b36      	ldr	r3, [pc, #216]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d02e      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	429a      	cmp	r2, r3
 800650a:	d027      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800650c:	4b2e      	ldr	r3, [pc, #184]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006514:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006516:	4b2e      	ldr	r3, [pc, #184]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006518:	2201      	movs	r2, #1
 800651a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800651c:	4b2c      	ldr	r3, [pc, #176]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006522:	4a29      	ldr	r2, [pc, #164]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d014      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006532:	f7fe fa45 	bl	80049c0 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006538:	e00a      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653a:	f7fe fa41 	bl	80049c0 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e036      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006550:	4b1d      	ldr	r3, [pc, #116]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0ee      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800655c:	4b1a      	ldr	r3, [pc, #104]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4917      	ldr	r1, [pc, #92]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800656a:	4313      	orrs	r3, r2
 800656c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800656e:	7dfb      	ldrb	r3, [r7, #23]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d105      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006574:	4b14      	ldr	r3, [pc, #80]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	4a13      	ldr	r2, [pc, #76]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800657a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800657e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d008      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800658c:	4b0e      	ldr	r3, [pc, #56]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	490b      	ldr	r1, [pc, #44]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800659a:	4313      	orrs	r3, r2
 800659c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d008      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065aa:	4b07      	ldr	r3, [pc, #28]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	4904      	ldr	r1, [pc, #16]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	40007000 	.word	0x40007000
 80065d0:	42420440 	.word	0x42420440

080065d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	d00a      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b10      	cmp	r3, #16
 80065fa:	f200 808a 	bhi.w	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d045      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d075      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800660a:	e082      	b.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800660c:	4b46      	ldr	r3, [pc, #280]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006612:	4b45      	ldr	r3, [pc, #276]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d07b      	beq.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	0c9b      	lsrs	r3, r3, #18
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	4a41      	ldr	r2, [pc, #260]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006628:	5cd3      	ldrb	r3, [r2, r3]
 800662a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d015      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006636:	4b3c      	ldr	r3, [pc, #240]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	0c5b      	lsrs	r3, r3, #17
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	4a3b      	ldr	r2, [pc, #236]	@ (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006642:	5cd3      	ldrb	r3, [r2, r3]
 8006644:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00d      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006650:	4a38      	ldr	r2, [pc, #224]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	fbb2 f2f3 	udiv	r2, r2, r3
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	fb02 f303 	mul.w	r3, r2, r3
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	e004      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4a34      	ldr	r2, [pc, #208]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006666:	fb02 f303 	mul.w	r3, r2, r3
 800666a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800666c:	4b2e      	ldr	r3, [pc, #184]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006674:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006678:	d102      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	61bb      	str	r3, [r7, #24]
      break;
 800667e:	e04a      	b.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	4a2d      	ldr	r2, [pc, #180]	@ (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	61bb      	str	r3, [r7, #24]
      break;
 800668e:	e042      	b.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006690:	4b25      	ldr	r3, [pc, #148]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800669c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066a0:	d108      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80066ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	e01f      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066be:	d109      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80066c0:	4b19      	ldr	r3, [pc, #100]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d003      	beq.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80066cc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e00f      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066de:	d11c      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80066e0:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d016      	beq.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80066ec:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80066f0:	61bb      	str	r3, [r7, #24]
      break;
 80066f2:	e012      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80066f4:	e011      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80066f6:	f7ff fe85 	bl	8006404 <HAL_RCC_GetPCLK2Freq>
 80066fa:	4602      	mov	r2, r0
 80066fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	0b9b      	lsrs	r3, r3, #14
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	3301      	adds	r3, #1
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	fbb2 f3f3 	udiv	r3, r2, r3
 800670e:	61bb      	str	r3, [r7, #24]
      break;
 8006710:	e004      	b.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006712:	bf00      	nop
 8006714:	e002      	b.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800671a:	bf00      	nop
    }
  }
  return (frequency);
 800671c:	69bb      	ldr	r3, [r7, #24]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3720      	adds	r7, #32
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40021000 	.word	0x40021000
 800672c:	0800b99c 	.word	0x0800b99c
 8006730:	0800b9ac 	.word	0x0800b9ac
 8006734:	007a1200 	.word	0x007a1200
 8006738:	003d0900 	.word	0x003d0900
 800673c:	aaaaaaab 	.word	0xaaaaaaab

08006740 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e093      	b.n	800687c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fe f865 	bl	8004838 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006784:	f023 0307 	bic.w	r3, r3, #7
 8006788:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3304      	adds	r3, #4
 8006792:	4619      	mov	r1, r3
 8006794:	4610      	mov	r0, r2
 8006796:	f000 fa59 	bl	8006c4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	4313      	orrs	r3, r2
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80067e0:	f023 030c 	bic.w	r3, r3, #12
 80067e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	4313      	orrs	r3, r2
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	011a      	lsls	r2, r3, #4
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	031b      	lsls	r3, r3, #12
 8006810:	4313      	orrs	r3, r2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800681e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	4313      	orrs	r3, r2
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006894:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800689c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d110      	bne.n	80068d6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d102      	bne.n	80068c0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80068ba:	7b7b      	ldrb	r3, [r7, #13]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d001      	beq.n	80068c4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e089      	b.n	80069d8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068d4:	e031      	b.n	800693a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d110      	bne.n	80068fe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d102      	bne.n	80068e8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068e2:	7b3b      	ldrb	r3, [r7, #12]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d001      	beq.n	80068ec <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e075      	b.n	80069d8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068fc:	e01d      	b.n	800693a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d108      	bne.n	8006916 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d105      	bne.n	8006916 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800690a:	7b7b      	ldrb	r3, [r7, #13]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d102      	bne.n	8006916 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006910:	7b3b      	ldrb	r3, [r7, #12]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d001      	beq.n	800691a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e05e      	b.n	80069d8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b04      	cmp	r3, #4
 8006944:	d010      	beq.n	8006968 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006946:	e01f      	b.n	8006988 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	2100      	movs	r1, #0
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9dd 	bl	8006d10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0202 	orr.w	r2, r2, #2
 8006964:	60da      	str	r2, [r3, #12]
      break;
 8006966:	e02e      	b.n	80069c6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2201      	movs	r2, #1
 800696e:	2104      	movs	r1, #4
 8006970:	4618      	mov	r0, r3
 8006972:	f000 f9cd 	bl	8006d10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0204 	orr.w	r2, r2, #4
 8006984:	60da      	str	r2, [r3, #12]
      break;
 8006986:	e01e      	b.n	80069c6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2201      	movs	r2, #1
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f000 f9bd 	bl	8006d10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2201      	movs	r2, #1
 800699c:	2104      	movs	r1, #4
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f9b6 	bl	8006d10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0202 	orr.w	r2, r2, #2
 80069b2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0204 	orr.w	r2, r2, #4
 80069c2:	60da      	str	r2, [r3, #12]
      break;
 80069c4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0201 	orr.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d122      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d11b      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0202 	mvn.w	r2, #2
 8006a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f8f6 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f8e9 	bl	8006c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f8f8 	bl	8006c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d122      	bne.n	8006a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d11b      	bne.n	8006a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0204 	mvn.w	r2, #4
 8006a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f8cc 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 8006a7c:	e005      	b.n	8006a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f8bf 	bl	8006c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f8ce 	bl	8006c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d122      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d11b      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f06f 0208 	mvn.w	r2, #8
 8006ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2204      	movs	r2, #4
 8006aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f8a2 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 8006ad0:	e005      	b.n	8006ade <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f895 	bl	8006c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f8a4 	bl	8006c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	2b10      	cmp	r3, #16
 8006af0:	d122      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d11b      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0210 	mvn.w	r2, #16
 8006b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f878 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 8006b24:	e005      	b.n	8006b32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f86b 	bl	8006c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f87a 	bl	8006c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d10e      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d107      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f06f 0201 	mvn.w	r2, #1
 8006b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f846 	bl	8006bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6e:	2b80      	cmp	r3, #128	@ 0x80
 8006b70:	d10e      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b7c:	2b80      	cmp	r3, #128	@ 0x80
 8006b7e:	d107      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f94b 	bl	8006e26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9a:	2b40      	cmp	r3, #64	@ 0x40
 8006b9c:	d10e      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba8:	2b40      	cmp	r3, #64	@ 0x40
 8006baa:	d107      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f83e 	bl	8006c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d10e      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d107      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0220 	mvn.w	r2, #32
 8006be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f916 	bl	8006e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr

08006c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr

08006c26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr
	...

08006c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a29      	ldr	r2, [pc, #164]	@ (8006d04 <TIM_Base_SetConfig+0xb8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00b      	beq.n	8006c7c <TIM_Base_SetConfig+0x30>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c6a:	d007      	beq.n	8006c7c <TIM_Base_SetConfig+0x30>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a26      	ldr	r2, [pc, #152]	@ (8006d08 <TIM_Base_SetConfig+0xbc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_Base_SetConfig+0x30>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a25      	ldr	r2, [pc, #148]	@ (8006d0c <TIM_Base_SetConfig+0xc0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d108      	bne.n	8006c8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a1c      	ldr	r2, [pc, #112]	@ (8006d04 <TIM_Base_SetConfig+0xb8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d00b      	beq.n	8006cae <TIM_Base_SetConfig+0x62>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c9c:	d007      	beq.n	8006cae <TIM_Base_SetConfig+0x62>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a19      	ldr	r2, [pc, #100]	@ (8006d08 <TIM_Base_SetConfig+0xbc>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d003      	beq.n	8006cae <TIM_Base_SetConfig+0x62>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a18      	ldr	r2, [pc, #96]	@ (8006d0c <TIM_Base_SetConfig+0xc0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d108      	bne.n	8006cc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a07      	ldr	r2, [pc, #28]	@ (8006d04 <TIM_Base_SetConfig+0xb8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d103      	bne.n	8006cf4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	615a      	str	r2, [r3, #20]
}
 8006cfa:	bf00      	nop
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40000400 	.word	0x40000400
 8006d0c:	40000800 	.word	0x40000800

08006d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2201      	movs	r2, #1
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	43db      	mvns	r3, r3
 8006d32:	401a      	ands	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	fa01 f303 	lsl.w	r3, r1, r3
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e046      	b.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a16      	ldr	r2, [pc, #88]	@ (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00e      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dbc:	d009      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a12      	ldr	r2, [pc, #72]	@ (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d004      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a10      	ldr	r2, [pc, #64]	@ (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d10c      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800

08006e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr

08006e26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr

08006e38 <__cvt>:
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3e:	461d      	mov	r5, r3
 8006e40:	bfbb      	ittet	lt
 8006e42:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006e46:	461d      	movlt	r5, r3
 8006e48:	2300      	movge	r3, #0
 8006e4a:	232d      	movlt	r3, #45	@ 0x2d
 8006e4c:	b088      	sub	sp, #32
 8006e4e:	4614      	mov	r4, r2
 8006e50:	bfb8      	it	lt
 8006e52:	4614      	movlt	r4, r2
 8006e54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006e56:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006e58:	7013      	strb	r3, [r2, #0]
 8006e5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e5c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006e60:	f023 0820 	bic.w	r8, r3, #32
 8006e64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e68:	d005      	beq.n	8006e76 <__cvt+0x3e>
 8006e6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e6e:	d100      	bne.n	8006e72 <__cvt+0x3a>
 8006e70:	3601      	adds	r6, #1
 8006e72:	2302      	movs	r3, #2
 8006e74:	e000      	b.n	8006e78 <__cvt+0x40>
 8006e76:	2303      	movs	r3, #3
 8006e78:	aa07      	add	r2, sp, #28
 8006e7a:	9204      	str	r2, [sp, #16]
 8006e7c:	aa06      	add	r2, sp, #24
 8006e7e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006e82:	e9cd 3600 	strd	r3, r6, [sp]
 8006e86:	4622      	mov	r2, r4
 8006e88:	462b      	mov	r3, r5
 8006e8a:	f000 fe6d 	bl	8007b68 <_dtoa_r>
 8006e8e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e92:	4607      	mov	r7, r0
 8006e94:	d119      	bne.n	8006eca <__cvt+0x92>
 8006e96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e98:	07db      	lsls	r3, r3, #31
 8006e9a:	d50e      	bpl.n	8006eba <__cvt+0x82>
 8006e9c:	eb00 0906 	add.w	r9, r0, r6
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 fd7e 	bl	80009a8 <__aeabi_dcmpeq>
 8006eac:	b108      	cbz	r0, 8006eb2 <__cvt+0x7a>
 8006eae:	f8cd 901c 	str.w	r9, [sp, #28]
 8006eb2:	2230      	movs	r2, #48	@ 0x30
 8006eb4:	9b07      	ldr	r3, [sp, #28]
 8006eb6:	454b      	cmp	r3, r9
 8006eb8:	d31e      	bcc.n	8006ef8 <__cvt+0xc0>
 8006eba:	4638      	mov	r0, r7
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006ec0:	1bdb      	subs	r3, r3, r7
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	b008      	add	sp, #32
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ece:	eb00 0906 	add.w	r9, r0, r6
 8006ed2:	d1e5      	bne.n	8006ea0 <__cvt+0x68>
 8006ed4:	7803      	ldrb	r3, [r0, #0]
 8006ed6:	2b30      	cmp	r3, #48	@ 0x30
 8006ed8:	d10a      	bne.n	8006ef0 <__cvt+0xb8>
 8006eda:	2200      	movs	r2, #0
 8006edc:	2300      	movs	r3, #0
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f7f9 fd61 	bl	80009a8 <__aeabi_dcmpeq>
 8006ee6:	b918      	cbnz	r0, 8006ef0 <__cvt+0xb8>
 8006ee8:	f1c6 0601 	rsb	r6, r6, #1
 8006eec:	f8ca 6000 	str.w	r6, [sl]
 8006ef0:	f8da 3000 	ldr.w	r3, [sl]
 8006ef4:	4499      	add	r9, r3
 8006ef6:	e7d3      	b.n	8006ea0 <__cvt+0x68>
 8006ef8:	1c59      	adds	r1, r3, #1
 8006efa:	9107      	str	r1, [sp, #28]
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e7d9      	b.n	8006eb4 <__cvt+0x7c>

08006f00 <__exponent>:
 8006f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f02:	2900      	cmp	r1, #0
 8006f04:	bfb6      	itet	lt
 8006f06:	232d      	movlt	r3, #45	@ 0x2d
 8006f08:	232b      	movge	r3, #43	@ 0x2b
 8006f0a:	4249      	neglt	r1, r1
 8006f0c:	2909      	cmp	r1, #9
 8006f0e:	7002      	strb	r2, [r0, #0]
 8006f10:	7043      	strb	r3, [r0, #1]
 8006f12:	dd29      	ble.n	8006f68 <__exponent+0x68>
 8006f14:	f10d 0307 	add.w	r3, sp, #7
 8006f18:	461d      	mov	r5, r3
 8006f1a:	270a      	movs	r7, #10
 8006f1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f20:	461a      	mov	r2, r3
 8006f22:	fb07 1416 	mls	r4, r7, r6, r1
 8006f26:	3430      	adds	r4, #48	@ 0x30
 8006f28:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	2c63      	cmp	r4, #99	@ 0x63
 8006f30:	4631      	mov	r1, r6
 8006f32:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f36:	dcf1      	bgt.n	8006f1c <__exponent+0x1c>
 8006f38:	3130      	adds	r1, #48	@ 0x30
 8006f3a:	1e94      	subs	r4, r2, #2
 8006f3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f40:	4623      	mov	r3, r4
 8006f42:	1c41      	adds	r1, r0, #1
 8006f44:	42ab      	cmp	r3, r5
 8006f46:	d30a      	bcc.n	8006f5e <__exponent+0x5e>
 8006f48:	f10d 0309 	add.w	r3, sp, #9
 8006f4c:	1a9b      	subs	r3, r3, r2
 8006f4e:	42ac      	cmp	r4, r5
 8006f50:	bf88      	it	hi
 8006f52:	2300      	movhi	r3, #0
 8006f54:	3302      	adds	r3, #2
 8006f56:	4403      	add	r3, r0
 8006f58:	1a18      	subs	r0, r3, r0
 8006f5a:	b003      	add	sp, #12
 8006f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f62:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f66:	e7ed      	b.n	8006f44 <__exponent+0x44>
 8006f68:	2330      	movs	r3, #48	@ 0x30
 8006f6a:	3130      	adds	r1, #48	@ 0x30
 8006f6c:	7083      	strb	r3, [r0, #2]
 8006f6e:	70c1      	strb	r1, [r0, #3]
 8006f70:	1d03      	adds	r3, r0, #4
 8006f72:	e7f1      	b.n	8006f58 <__exponent+0x58>

08006f74 <_printf_float>:
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	b091      	sub	sp, #68	@ 0x44
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006f80:	4616      	mov	r6, r2
 8006f82:	461f      	mov	r7, r3
 8006f84:	4605      	mov	r5, r0
 8006f86:	f000 fce1 	bl	800794c <_localeconv_r>
 8006f8a:	6803      	ldr	r3, [r0, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	9308      	str	r3, [sp, #32]
 8006f90:	f7f9 f8de 	bl	8000150 <strlen>
 8006f94:	2300      	movs	r3, #0
 8006f96:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f98:	f8d8 3000 	ldr.w	r3, [r8]
 8006f9c:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f9e:	3307      	adds	r3, #7
 8006fa0:	f023 0307 	bic.w	r3, r3, #7
 8006fa4:	f103 0208 	add.w	r2, r3, #8
 8006fa8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006fac:	f8d4 b000 	ldr.w	fp, [r4]
 8006fb0:	f8c8 2000 	str.w	r2, [r8]
 8006fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006fbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fbe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006fce:	4b9c      	ldr	r3, [pc, #624]	@ (8007240 <_printf_float+0x2cc>)
 8006fd0:	f7f9 fd1c 	bl	8000a0c <__aeabi_dcmpun>
 8006fd4:	bb70      	cbnz	r0, 8007034 <_printf_float+0xc0>
 8006fd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fda:	f04f 32ff 	mov.w	r2, #4294967295
 8006fde:	4b98      	ldr	r3, [pc, #608]	@ (8007240 <_printf_float+0x2cc>)
 8006fe0:	f7f9 fcf6 	bl	80009d0 <__aeabi_dcmple>
 8006fe4:	bb30      	cbnz	r0, 8007034 <_printf_float+0xc0>
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4640      	mov	r0, r8
 8006fec:	4649      	mov	r1, r9
 8006fee:	f7f9 fce5 	bl	80009bc <__aeabi_dcmplt>
 8006ff2:	b110      	cbz	r0, 8006ffa <_printf_float+0x86>
 8006ff4:	232d      	movs	r3, #45	@ 0x2d
 8006ff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ffa:	4a92      	ldr	r2, [pc, #584]	@ (8007244 <_printf_float+0x2d0>)
 8006ffc:	4b92      	ldr	r3, [pc, #584]	@ (8007248 <_printf_float+0x2d4>)
 8006ffe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007002:	bf8c      	ite	hi
 8007004:	4690      	movhi	r8, r2
 8007006:	4698      	movls	r8, r3
 8007008:	2303      	movs	r3, #3
 800700a:	f04f 0900 	mov.w	r9, #0
 800700e:	6123      	str	r3, [r4, #16]
 8007010:	f02b 0304 	bic.w	r3, fp, #4
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	4633      	mov	r3, r6
 8007018:	4621      	mov	r1, r4
 800701a:	4628      	mov	r0, r5
 800701c:	9700      	str	r7, [sp, #0]
 800701e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007020:	f000 f9d4 	bl	80073cc <_printf_common>
 8007024:	3001      	adds	r0, #1
 8007026:	f040 8090 	bne.w	800714a <_printf_float+0x1d6>
 800702a:	f04f 30ff 	mov.w	r0, #4294967295
 800702e:	b011      	add	sp, #68	@ 0x44
 8007030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007034:	4642      	mov	r2, r8
 8007036:	464b      	mov	r3, r9
 8007038:	4640      	mov	r0, r8
 800703a:	4649      	mov	r1, r9
 800703c:	f7f9 fce6 	bl	8000a0c <__aeabi_dcmpun>
 8007040:	b148      	cbz	r0, 8007056 <_printf_float+0xe2>
 8007042:	464b      	mov	r3, r9
 8007044:	2b00      	cmp	r3, #0
 8007046:	bfb8      	it	lt
 8007048:	232d      	movlt	r3, #45	@ 0x2d
 800704a:	4a80      	ldr	r2, [pc, #512]	@ (800724c <_printf_float+0x2d8>)
 800704c:	bfb8      	it	lt
 800704e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007052:	4b7f      	ldr	r3, [pc, #508]	@ (8007250 <_printf_float+0x2dc>)
 8007054:	e7d3      	b.n	8006ffe <_printf_float+0x8a>
 8007056:	6863      	ldr	r3, [r4, #4]
 8007058:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	d13f      	bne.n	80070e0 <_printf_float+0x16c>
 8007060:	2306      	movs	r3, #6
 8007062:	6063      	str	r3, [r4, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	9206      	str	r2, [sp, #24]
 800706e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007070:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007074:	aa0d      	add	r2, sp, #52	@ 0x34
 8007076:	9203      	str	r2, [sp, #12]
 8007078:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800707c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007080:	6863      	ldr	r3, [r4, #4]
 8007082:	4642      	mov	r2, r8
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	4628      	mov	r0, r5
 8007088:	464b      	mov	r3, r9
 800708a:	910a      	str	r1, [sp, #40]	@ 0x28
 800708c:	f7ff fed4 	bl	8006e38 <__cvt>
 8007090:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007092:	4680      	mov	r8, r0
 8007094:	2947      	cmp	r1, #71	@ 0x47
 8007096:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007098:	d128      	bne.n	80070ec <_printf_float+0x178>
 800709a:	1cc8      	adds	r0, r1, #3
 800709c:	db02      	blt.n	80070a4 <_printf_float+0x130>
 800709e:	6863      	ldr	r3, [r4, #4]
 80070a0:	4299      	cmp	r1, r3
 80070a2:	dd40      	ble.n	8007126 <_printf_float+0x1b2>
 80070a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80070a8:	fa5f fa8a 	uxtb.w	sl, sl
 80070ac:	4652      	mov	r2, sl
 80070ae:	3901      	subs	r1, #1
 80070b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80070b4:	910d      	str	r1, [sp, #52]	@ 0x34
 80070b6:	f7ff ff23 	bl	8006f00 <__exponent>
 80070ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070bc:	4681      	mov	r9, r0
 80070be:	1813      	adds	r3, r2, r0
 80070c0:	2a01      	cmp	r2, #1
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	dc02      	bgt.n	80070cc <_printf_float+0x158>
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	07d2      	lsls	r2, r2, #31
 80070ca:	d501      	bpl.n	80070d0 <_printf_float+0x15c>
 80070cc:	3301      	adds	r3, #1
 80070ce:	6123      	str	r3, [r4, #16]
 80070d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d09e      	beq.n	8007016 <_printf_float+0xa2>
 80070d8:	232d      	movs	r3, #45	@ 0x2d
 80070da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070de:	e79a      	b.n	8007016 <_printf_float+0xa2>
 80070e0:	2947      	cmp	r1, #71	@ 0x47
 80070e2:	d1bf      	bne.n	8007064 <_printf_float+0xf0>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1bd      	bne.n	8007064 <_printf_float+0xf0>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e7ba      	b.n	8007062 <_printf_float+0xee>
 80070ec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070f0:	d9dc      	bls.n	80070ac <_printf_float+0x138>
 80070f2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80070f6:	d118      	bne.n	800712a <_printf_float+0x1b6>
 80070f8:	2900      	cmp	r1, #0
 80070fa:	6863      	ldr	r3, [r4, #4]
 80070fc:	dd0b      	ble.n	8007116 <_printf_float+0x1a2>
 80070fe:	6121      	str	r1, [r4, #16]
 8007100:	b913      	cbnz	r3, 8007108 <_printf_float+0x194>
 8007102:	6822      	ldr	r2, [r4, #0]
 8007104:	07d0      	lsls	r0, r2, #31
 8007106:	d502      	bpl.n	800710e <_printf_float+0x19a>
 8007108:	3301      	adds	r3, #1
 800710a:	440b      	add	r3, r1
 800710c:	6123      	str	r3, [r4, #16]
 800710e:	f04f 0900 	mov.w	r9, #0
 8007112:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007114:	e7dc      	b.n	80070d0 <_printf_float+0x15c>
 8007116:	b913      	cbnz	r3, 800711e <_printf_float+0x1aa>
 8007118:	6822      	ldr	r2, [r4, #0]
 800711a:	07d2      	lsls	r2, r2, #31
 800711c:	d501      	bpl.n	8007122 <_printf_float+0x1ae>
 800711e:	3302      	adds	r3, #2
 8007120:	e7f4      	b.n	800710c <_printf_float+0x198>
 8007122:	2301      	movs	r3, #1
 8007124:	e7f2      	b.n	800710c <_printf_float+0x198>
 8007126:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800712a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800712c:	4299      	cmp	r1, r3
 800712e:	db05      	blt.n	800713c <_printf_float+0x1c8>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	6121      	str	r1, [r4, #16]
 8007134:	07d8      	lsls	r0, r3, #31
 8007136:	d5ea      	bpl.n	800710e <_printf_float+0x19a>
 8007138:	1c4b      	adds	r3, r1, #1
 800713a:	e7e7      	b.n	800710c <_printf_float+0x198>
 800713c:	2900      	cmp	r1, #0
 800713e:	bfcc      	ite	gt
 8007140:	2201      	movgt	r2, #1
 8007142:	f1c1 0202 	rsble	r2, r1, #2
 8007146:	4413      	add	r3, r2
 8007148:	e7e0      	b.n	800710c <_printf_float+0x198>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	055a      	lsls	r2, r3, #21
 800714e:	d407      	bmi.n	8007160 <_printf_float+0x1ec>
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	4642      	mov	r2, r8
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	d12b      	bne.n	80071b6 <_printf_float+0x242>
 800715e:	e764      	b.n	800702a <_printf_float+0xb6>
 8007160:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007164:	f240 80dc 	bls.w	8007320 <_printf_float+0x3ac>
 8007168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	f7f9 fc1a 	bl	80009a8 <__aeabi_dcmpeq>
 8007174:	2800      	cmp	r0, #0
 8007176:	d033      	beq.n	80071e0 <_printf_float+0x26c>
 8007178:	2301      	movs	r3, #1
 800717a:	4631      	mov	r1, r6
 800717c:	4628      	mov	r0, r5
 800717e:	4a35      	ldr	r2, [pc, #212]	@ (8007254 <_printf_float+0x2e0>)
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f af51 	beq.w	800702a <_printf_float+0xb6>
 8007188:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800718c:	4543      	cmp	r3, r8
 800718e:	db02      	blt.n	8007196 <_printf_float+0x222>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	07d8      	lsls	r0, r3, #31
 8007194:	d50f      	bpl.n	80071b6 <_printf_float+0x242>
 8007196:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	f43f af42 	beq.w	800702a <_printf_float+0xb6>
 80071a6:	f04f 0900 	mov.w	r9, #0
 80071aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80071ae:	f104 0a1a 	add.w	sl, r4, #26
 80071b2:	45c8      	cmp	r8, r9
 80071b4:	dc09      	bgt.n	80071ca <_printf_float+0x256>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	079b      	lsls	r3, r3, #30
 80071ba:	f100 8102 	bmi.w	80073c2 <_printf_float+0x44e>
 80071be:	68e0      	ldr	r0, [r4, #12]
 80071c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071c2:	4298      	cmp	r0, r3
 80071c4:	bfb8      	it	lt
 80071c6:	4618      	movlt	r0, r3
 80071c8:	e731      	b.n	800702e <_printf_float+0xba>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4652      	mov	r2, sl
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f af28 	beq.w	800702a <_printf_float+0xb6>
 80071da:	f109 0901 	add.w	r9, r9, #1
 80071de:	e7e8      	b.n	80071b2 <_printf_float+0x23e>
 80071e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	dc38      	bgt.n	8007258 <_printf_float+0x2e4>
 80071e6:	2301      	movs	r3, #1
 80071e8:	4631      	mov	r1, r6
 80071ea:	4628      	mov	r0, r5
 80071ec:	4a19      	ldr	r2, [pc, #100]	@ (8007254 <_printf_float+0x2e0>)
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	f43f af1a 	beq.w	800702a <_printf_float+0xb6>
 80071f6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80071fa:	ea59 0303 	orrs.w	r3, r9, r3
 80071fe:	d102      	bne.n	8007206 <_printf_float+0x292>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	07d9      	lsls	r1, r3, #31
 8007204:	d5d7      	bpl.n	80071b6 <_printf_float+0x242>
 8007206:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f af0a 	beq.w	800702a <_printf_float+0xb6>
 8007216:	f04f 0a00 	mov.w	sl, #0
 800721a:	f104 0b1a 	add.w	fp, r4, #26
 800721e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007220:	425b      	negs	r3, r3
 8007222:	4553      	cmp	r3, sl
 8007224:	dc01      	bgt.n	800722a <_printf_float+0x2b6>
 8007226:	464b      	mov	r3, r9
 8007228:	e793      	b.n	8007152 <_printf_float+0x1de>
 800722a:	2301      	movs	r3, #1
 800722c:	465a      	mov	r2, fp
 800722e:	4631      	mov	r1, r6
 8007230:	4628      	mov	r0, r5
 8007232:	47b8      	blx	r7
 8007234:	3001      	adds	r0, #1
 8007236:	f43f aef8 	beq.w	800702a <_printf_float+0xb6>
 800723a:	f10a 0a01 	add.w	sl, sl, #1
 800723e:	e7ee      	b.n	800721e <_printf_float+0x2aa>
 8007240:	7fefffff 	.word	0x7fefffff
 8007244:	0800b9b2 	.word	0x0800b9b2
 8007248:	0800b9ae 	.word	0x0800b9ae
 800724c:	0800b9ba 	.word	0x0800b9ba
 8007250:	0800b9b6 	.word	0x0800b9b6
 8007254:	0800b9be 	.word	0x0800b9be
 8007258:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800725a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800725e:	4553      	cmp	r3, sl
 8007260:	bfa8      	it	ge
 8007262:	4653      	movge	r3, sl
 8007264:	2b00      	cmp	r3, #0
 8007266:	4699      	mov	r9, r3
 8007268:	dc36      	bgt.n	80072d8 <_printf_float+0x364>
 800726a:	f04f 0b00 	mov.w	fp, #0
 800726e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007272:	f104 021a 	add.w	r2, r4, #26
 8007276:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007278:	930a      	str	r3, [sp, #40]	@ 0x28
 800727a:	eba3 0309 	sub.w	r3, r3, r9
 800727e:	455b      	cmp	r3, fp
 8007280:	dc31      	bgt.n	80072e6 <_printf_float+0x372>
 8007282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007284:	459a      	cmp	sl, r3
 8007286:	dc3a      	bgt.n	80072fe <_printf_float+0x38a>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	07da      	lsls	r2, r3, #31
 800728c:	d437      	bmi.n	80072fe <_printf_float+0x38a>
 800728e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007290:	ebaa 0903 	sub.w	r9, sl, r3
 8007294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007296:	ebaa 0303 	sub.w	r3, sl, r3
 800729a:	4599      	cmp	r9, r3
 800729c:	bfa8      	it	ge
 800729e:	4699      	movge	r9, r3
 80072a0:	f1b9 0f00 	cmp.w	r9, #0
 80072a4:	dc33      	bgt.n	800730e <_printf_float+0x39a>
 80072a6:	f04f 0800 	mov.w	r8, #0
 80072aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ae:	f104 0b1a 	add.w	fp, r4, #26
 80072b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072b4:	ebaa 0303 	sub.w	r3, sl, r3
 80072b8:	eba3 0309 	sub.w	r3, r3, r9
 80072bc:	4543      	cmp	r3, r8
 80072be:	f77f af7a 	ble.w	80071b6 <_printf_float+0x242>
 80072c2:	2301      	movs	r3, #1
 80072c4:	465a      	mov	r2, fp
 80072c6:	4631      	mov	r1, r6
 80072c8:	4628      	mov	r0, r5
 80072ca:	47b8      	blx	r7
 80072cc:	3001      	adds	r0, #1
 80072ce:	f43f aeac 	beq.w	800702a <_printf_float+0xb6>
 80072d2:	f108 0801 	add.w	r8, r8, #1
 80072d6:	e7ec      	b.n	80072b2 <_printf_float+0x33e>
 80072d8:	4642      	mov	r2, r8
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	47b8      	blx	r7
 80072e0:	3001      	adds	r0, #1
 80072e2:	d1c2      	bne.n	800726a <_printf_float+0x2f6>
 80072e4:	e6a1      	b.n	800702a <_printf_float+0xb6>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80072ee:	47b8      	blx	r7
 80072f0:	3001      	adds	r0, #1
 80072f2:	f43f ae9a 	beq.w	800702a <_printf_float+0xb6>
 80072f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072f8:	f10b 0b01 	add.w	fp, fp, #1
 80072fc:	e7bb      	b.n	8007276 <_printf_float+0x302>
 80072fe:	4631      	mov	r1, r6
 8007300:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	d1c0      	bne.n	800728e <_printf_float+0x31a>
 800730c:	e68d      	b.n	800702a <_printf_float+0xb6>
 800730e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007310:	464b      	mov	r3, r9
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	4442      	add	r2, r8
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	d1c3      	bne.n	80072a6 <_printf_float+0x332>
 800731e:	e684      	b.n	800702a <_printf_float+0xb6>
 8007320:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007324:	f1ba 0f01 	cmp.w	sl, #1
 8007328:	dc01      	bgt.n	800732e <_printf_float+0x3ba>
 800732a:	07db      	lsls	r3, r3, #31
 800732c:	d536      	bpl.n	800739c <_printf_float+0x428>
 800732e:	2301      	movs	r3, #1
 8007330:	4642      	mov	r2, r8
 8007332:	4631      	mov	r1, r6
 8007334:	4628      	mov	r0, r5
 8007336:	47b8      	blx	r7
 8007338:	3001      	adds	r0, #1
 800733a:	f43f ae76 	beq.w	800702a <_printf_float+0xb6>
 800733e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007342:	4631      	mov	r1, r6
 8007344:	4628      	mov	r0, r5
 8007346:	47b8      	blx	r7
 8007348:	3001      	adds	r0, #1
 800734a:	f43f ae6e 	beq.w	800702a <_printf_float+0xb6>
 800734e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007352:	2200      	movs	r2, #0
 8007354:	2300      	movs	r3, #0
 8007356:	f10a 3aff 	add.w	sl, sl, #4294967295
 800735a:	f7f9 fb25 	bl	80009a8 <__aeabi_dcmpeq>
 800735e:	b9c0      	cbnz	r0, 8007392 <_printf_float+0x41e>
 8007360:	4653      	mov	r3, sl
 8007362:	f108 0201 	add.w	r2, r8, #1
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	d10c      	bne.n	800738a <_printf_float+0x416>
 8007370:	e65b      	b.n	800702a <_printf_float+0xb6>
 8007372:	2301      	movs	r3, #1
 8007374:	465a      	mov	r2, fp
 8007376:	4631      	mov	r1, r6
 8007378:	4628      	mov	r0, r5
 800737a:	47b8      	blx	r7
 800737c:	3001      	adds	r0, #1
 800737e:	f43f ae54 	beq.w	800702a <_printf_float+0xb6>
 8007382:	f108 0801 	add.w	r8, r8, #1
 8007386:	45d0      	cmp	r8, sl
 8007388:	dbf3      	blt.n	8007372 <_printf_float+0x3fe>
 800738a:	464b      	mov	r3, r9
 800738c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007390:	e6e0      	b.n	8007154 <_printf_float+0x1e0>
 8007392:	f04f 0800 	mov.w	r8, #0
 8007396:	f104 0b1a 	add.w	fp, r4, #26
 800739a:	e7f4      	b.n	8007386 <_printf_float+0x412>
 800739c:	2301      	movs	r3, #1
 800739e:	4642      	mov	r2, r8
 80073a0:	e7e1      	b.n	8007366 <_printf_float+0x3f2>
 80073a2:	2301      	movs	r3, #1
 80073a4:	464a      	mov	r2, r9
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f ae3c 	beq.w	800702a <_printf_float+0xb6>
 80073b2:	f108 0801 	add.w	r8, r8, #1
 80073b6:	68e3      	ldr	r3, [r4, #12]
 80073b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80073ba:	1a5b      	subs	r3, r3, r1
 80073bc:	4543      	cmp	r3, r8
 80073be:	dcf0      	bgt.n	80073a2 <_printf_float+0x42e>
 80073c0:	e6fd      	b.n	80071be <_printf_float+0x24a>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	f104 0919 	add.w	r9, r4, #25
 80073ca:	e7f4      	b.n	80073b6 <_printf_float+0x442>

080073cc <_printf_common>:
 80073cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d0:	4616      	mov	r6, r2
 80073d2:	4698      	mov	r8, r3
 80073d4:	688a      	ldr	r2, [r1, #8]
 80073d6:	690b      	ldr	r3, [r1, #16]
 80073d8:	4607      	mov	r7, r0
 80073da:	4293      	cmp	r3, r2
 80073dc:	bfb8      	it	lt
 80073de:	4613      	movlt	r3, r2
 80073e0:	6033      	str	r3, [r6, #0]
 80073e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073e6:	460c      	mov	r4, r1
 80073e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073ec:	b10a      	cbz	r2, 80073f2 <_printf_common+0x26>
 80073ee:	3301      	adds	r3, #1
 80073f0:	6033      	str	r3, [r6, #0]
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	0699      	lsls	r1, r3, #26
 80073f6:	bf42      	ittt	mi
 80073f8:	6833      	ldrmi	r3, [r6, #0]
 80073fa:	3302      	addmi	r3, #2
 80073fc:	6033      	strmi	r3, [r6, #0]
 80073fe:	6825      	ldr	r5, [r4, #0]
 8007400:	f015 0506 	ands.w	r5, r5, #6
 8007404:	d106      	bne.n	8007414 <_printf_common+0x48>
 8007406:	f104 0a19 	add.w	sl, r4, #25
 800740a:	68e3      	ldr	r3, [r4, #12]
 800740c:	6832      	ldr	r2, [r6, #0]
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	42ab      	cmp	r3, r5
 8007412:	dc2b      	bgt.n	800746c <_printf_common+0xa0>
 8007414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007418:	6822      	ldr	r2, [r4, #0]
 800741a:	3b00      	subs	r3, #0
 800741c:	bf18      	it	ne
 800741e:	2301      	movne	r3, #1
 8007420:	0692      	lsls	r2, r2, #26
 8007422:	d430      	bmi.n	8007486 <_printf_common+0xba>
 8007424:	4641      	mov	r1, r8
 8007426:	4638      	mov	r0, r7
 8007428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800742c:	47c8      	blx	r9
 800742e:	3001      	adds	r0, #1
 8007430:	d023      	beq.n	800747a <_printf_common+0xae>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	6922      	ldr	r2, [r4, #16]
 8007436:	f003 0306 	and.w	r3, r3, #6
 800743a:	2b04      	cmp	r3, #4
 800743c:	bf14      	ite	ne
 800743e:	2500      	movne	r5, #0
 8007440:	6833      	ldreq	r3, [r6, #0]
 8007442:	f04f 0600 	mov.w	r6, #0
 8007446:	bf08      	it	eq
 8007448:	68e5      	ldreq	r5, [r4, #12]
 800744a:	f104 041a 	add.w	r4, r4, #26
 800744e:	bf08      	it	eq
 8007450:	1aed      	subeq	r5, r5, r3
 8007452:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007456:	bf08      	it	eq
 8007458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800745c:	4293      	cmp	r3, r2
 800745e:	bfc4      	itt	gt
 8007460:	1a9b      	subgt	r3, r3, r2
 8007462:	18ed      	addgt	r5, r5, r3
 8007464:	42b5      	cmp	r5, r6
 8007466:	d11a      	bne.n	800749e <_printf_common+0xd2>
 8007468:	2000      	movs	r0, #0
 800746a:	e008      	b.n	800747e <_printf_common+0xb2>
 800746c:	2301      	movs	r3, #1
 800746e:	4652      	mov	r2, sl
 8007470:	4641      	mov	r1, r8
 8007472:	4638      	mov	r0, r7
 8007474:	47c8      	blx	r9
 8007476:	3001      	adds	r0, #1
 8007478:	d103      	bne.n	8007482 <_printf_common+0xb6>
 800747a:	f04f 30ff 	mov.w	r0, #4294967295
 800747e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007482:	3501      	adds	r5, #1
 8007484:	e7c1      	b.n	800740a <_printf_common+0x3e>
 8007486:	2030      	movs	r0, #48	@ 0x30
 8007488:	18e1      	adds	r1, r4, r3
 800748a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007494:	4422      	add	r2, r4
 8007496:	3302      	adds	r3, #2
 8007498:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800749c:	e7c2      	b.n	8007424 <_printf_common+0x58>
 800749e:	2301      	movs	r3, #1
 80074a0:	4622      	mov	r2, r4
 80074a2:	4641      	mov	r1, r8
 80074a4:	4638      	mov	r0, r7
 80074a6:	47c8      	blx	r9
 80074a8:	3001      	adds	r0, #1
 80074aa:	d0e6      	beq.n	800747a <_printf_common+0xae>
 80074ac:	3601      	adds	r6, #1
 80074ae:	e7d9      	b.n	8007464 <_printf_common+0x98>

080074b0 <_printf_i>:
 80074b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	7e0f      	ldrb	r7, [r1, #24]
 80074b6:	4691      	mov	r9, r2
 80074b8:	2f78      	cmp	r7, #120	@ 0x78
 80074ba:	4680      	mov	r8, r0
 80074bc:	460c      	mov	r4, r1
 80074be:	469a      	mov	sl, r3
 80074c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074c6:	d807      	bhi.n	80074d8 <_printf_i+0x28>
 80074c8:	2f62      	cmp	r7, #98	@ 0x62
 80074ca:	d80a      	bhi.n	80074e2 <_printf_i+0x32>
 80074cc:	2f00      	cmp	r7, #0
 80074ce:	f000 80d1 	beq.w	8007674 <_printf_i+0x1c4>
 80074d2:	2f58      	cmp	r7, #88	@ 0x58
 80074d4:	f000 80b8 	beq.w	8007648 <_printf_i+0x198>
 80074d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074e0:	e03a      	b.n	8007558 <_printf_i+0xa8>
 80074e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074e6:	2b15      	cmp	r3, #21
 80074e8:	d8f6      	bhi.n	80074d8 <_printf_i+0x28>
 80074ea:	a101      	add	r1, pc, #4	@ (adr r1, 80074f0 <_printf_i+0x40>)
 80074ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074f0:	08007549 	.word	0x08007549
 80074f4:	0800755d 	.word	0x0800755d
 80074f8:	080074d9 	.word	0x080074d9
 80074fc:	080074d9 	.word	0x080074d9
 8007500:	080074d9 	.word	0x080074d9
 8007504:	080074d9 	.word	0x080074d9
 8007508:	0800755d 	.word	0x0800755d
 800750c:	080074d9 	.word	0x080074d9
 8007510:	080074d9 	.word	0x080074d9
 8007514:	080074d9 	.word	0x080074d9
 8007518:	080074d9 	.word	0x080074d9
 800751c:	0800765b 	.word	0x0800765b
 8007520:	08007587 	.word	0x08007587
 8007524:	08007615 	.word	0x08007615
 8007528:	080074d9 	.word	0x080074d9
 800752c:	080074d9 	.word	0x080074d9
 8007530:	0800767d 	.word	0x0800767d
 8007534:	080074d9 	.word	0x080074d9
 8007538:	08007587 	.word	0x08007587
 800753c:	080074d9 	.word	0x080074d9
 8007540:	080074d9 	.word	0x080074d9
 8007544:	0800761d 	.word	0x0800761d
 8007548:	6833      	ldr	r3, [r6, #0]
 800754a:	1d1a      	adds	r2, r3, #4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6032      	str	r2, [r6, #0]
 8007550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007554:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007558:	2301      	movs	r3, #1
 800755a:	e09c      	b.n	8007696 <_printf_i+0x1e6>
 800755c:	6833      	ldr	r3, [r6, #0]
 800755e:	6820      	ldr	r0, [r4, #0]
 8007560:	1d19      	adds	r1, r3, #4
 8007562:	6031      	str	r1, [r6, #0]
 8007564:	0606      	lsls	r6, r0, #24
 8007566:	d501      	bpl.n	800756c <_printf_i+0xbc>
 8007568:	681d      	ldr	r5, [r3, #0]
 800756a:	e003      	b.n	8007574 <_printf_i+0xc4>
 800756c:	0645      	lsls	r5, r0, #25
 800756e:	d5fb      	bpl.n	8007568 <_printf_i+0xb8>
 8007570:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007574:	2d00      	cmp	r5, #0
 8007576:	da03      	bge.n	8007580 <_printf_i+0xd0>
 8007578:	232d      	movs	r3, #45	@ 0x2d
 800757a:	426d      	negs	r5, r5
 800757c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007580:	230a      	movs	r3, #10
 8007582:	4858      	ldr	r0, [pc, #352]	@ (80076e4 <_printf_i+0x234>)
 8007584:	e011      	b.n	80075aa <_printf_i+0xfa>
 8007586:	6821      	ldr	r1, [r4, #0]
 8007588:	6833      	ldr	r3, [r6, #0]
 800758a:	0608      	lsls	r0, r1, #24
 800758c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007590:	d402      	bmi.n	8007598 <_printf_i+0xe8>
 8007592:	0649      	lsls	r1, r1, #25
 8007594:	bf48      	it	mi
 8007596:	b2ad      	uxthmi	r5, r5
 8007598:	2f6f      	cmp	r7, #111	@ 0x6f
 800759a:	6033      	str	r3, [r6, #0]
 800759c:	bf14      	ite	ne
 800759e:	230a      	movne	r3, #10
 80075a0:	2308      	moveq	r3, #8
 80075a2:	4850      	ldr	r0, [pc, #320]	@ (80076e4 <_printf_i+0x234>)
 80075a4:	2100      	movs	r1, #0
 80075a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075aa:	6866      	ldr	r6, [r4, #4]
 80075ac:	2e00      	cmp	r6, #0
 80075ae:	60a6      	str	r6, [r4, #8]
 80075b0:	db05      	blt.n	80075be <_printf_i+0x10e>
 80075b2:	6821      	ldr	r1, [r4, #0]
 80075b4:	432e      	orrs	r6, r5
 80075b6:	f021 0104 	bic.w	r1, r1, #4
 80075ba:	6021      	str	r1, [r4, #0]
 80075bc:	d04b      	beq.n	8007656 <_printf_i+0x1a6>
 80075be:	4616      	mov	r6, r2
 80075c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80075c4:	fb03 5711 	mls	r7, r3, r1, r5
 80075c8:	5dc7      	ldrb	r7, [r0, r7]
 80075ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075ce:	462f      	mov	r7, r5
 80075d0:	42bb      	cmp	r3, r7
 80075d2:	460d      	mov	r5, r1
 80075d4:	d9f4      	bls.n	80075c0 <_printf_i+0x110>
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d10b      	bne.n	80075f2 <_printf_i+0x142>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	07df      	lsls	r7, r3, #31
 80075de:	d508      	bpl.n	80075f2 <_printf_i+0x142>
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	6861      	ldr	r1, [r4, #4]
 80075e4:	4299      	cmp	r1, r3
 80075e6:	bfde      	ittt	le
 80075e8:	2330      	movle	r3, #48	@ 0x30
 80075ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075f2:	1b92      	subs	r2, r2, r6
 80075f4:	6122      	str	r2, [r4, #16]
 80075f6:	464b      	mov	r3, r9
 80075f8:	4621      	mov	r1, r4
 80075fa:	4640      	mov	r0, r8
 80075fc:	f8cd a000 	str.w	sl, [sp]
 8007600:	aa03      	add	r2, sp, #12
 8007602:	f7ff fee3 	bl	80073cc <_printf_common>
 8007606:	3001      	adds	r0, #1
 8007608:	d14a      	bne.n	80076a0 <_printf_i+0x1f0>
 800760a:	f04f 30ff 	mov.w	r0, #4294967295
 800760e:	b004      	add	sp, #16
 8007610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	f043 0320 	orr.w	r3, r3, #32
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	2778      	movs	r7, #120	@ 0x78
 800761e:	4832      	ldr	r0, [pc, #200]	@ (80076e8 <_printf_i+0x238>)
 8007620:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	6831      	ldr	r1, [r6, #0]
 8007628:	061f      	lsls	r7, r3, #24
 800762a:	f851 5b04 	ldr.w	r5, [r1], #4
 800762e:	d402      	bmi.n	8007636 <_printf_i+0x186>
 8007630:	065f      	lsls	r7, r3, #25
 8007632:	bf48      	it	mi
 8007634:	b2ad      	uxthmi	r5, r5
 8007636:	6031      	str	r1, [r6, #0]
 8007638:	07d9      	lsls	r1, r3, #31
 800763a:	bf44      	itt	mi
 800763c:	f043 0320 	orrmi.w	r3, r3, #32
 8007640:	6023      	strmi	r3, [r4, #0]
 8007642:	b11d      	cbz	r5, 800764c <_printf_i+0x19c>
 8007644:	2310      	movs	r3, #16
 8007646:	e7ad      	b.n	80075a4 <_printf_i+0xf4>
 8007648:	4826      	ldr	r0, [pc, #152]	@ (80076e4 <_printf_i+0x234>)
 800764a:	e7e9      	b.n	8007620 <_printf_i+0x170>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	f023 0320 	bic.w	r3, r3, #32
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	e7f6      	b.n	8007644 <_printf_i+0x194>
 8007656:	4616      	mov	r6, r2
 8007658:	e7bd      	b.n	80075d6 <_printf_i+0x126>
 800765a:	6833      	ldr	r3, [r6, #0]
 800765c:	6825      	ldr	r5, [r4, #0]
 800765e:	1d18      	adds	r0, r3, #4
 8007660:	6961      	ldr	r1, [r4, #20]
 8007662:	6030      	str	r0, [r6, #0]
 8007664:	062e      	lsls	r6, r5, #24
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	d501      	bpl.n	800766e <_printf_i+0x1be>
 800766a:	6019      	str	r1, [r3, #0]
 800766c:	e002      	b.n	8007674 <_printf_i+0x1c4>
 800766e:	0668      	lsls	r0, r5, #25
 8007670:	d5fb      	bpl.n	800766a <_printf_i+0x1ba>
 8007672:	8019      	strh	r1, [r3, #0]
 8007674:	2300      	movs	r3, #0
 8007676:	4616      	mov	r6, r2
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	e7bc      	b.n	80075f6 <_printf_i+0x146>
 800767c:	6833      	ldr	r3, [r6, #0]
 800767e:	2100      	movs	r1, #0
 8007680:	1d1a      	adds	r2, r3, #4
 8007682:	6032      	str	r2, [r6, #0]
 8007684:	681e      	ldr	r6, [r3, #0]
 8007686:	6862      	ldr	r2, [r4, #4]
 8007688:	4630      	mov	r0, r6
 800768a:	f000 f9d6 	bl	8007a3a <memchr>
 800768e:	b108      	cbz	r0, 8007694 <_printf_i+0x1e4>
 8007690:	1b80      	subs	r0, r0, r6
 8007692:	6060      	str	r0, [r4, #4]
 8007694:	6863      	ldr	r3, [r4, #4]
 8007696:	6123      	str	r3, [r4, #16]
 8007698:	2300      	movs	r3, #0
 800769a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800769e:	e7aa      	b.n	80075f6 <_printf_i+0x146>
 80076a0:	4632      	mov	r2, r6
 80076a2:	4649      	mov	r1, r9
 80076a4:	4640      	mov	r0, r8
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	47d0      	blx	sl
 80076aa:	3001      	adds	r0, #1
 80076ac:	d0ad      	beq.n	800760a <_printf_i+0x15a>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	079b      	lsls	r3, r3, #30
 80076b2:	d413      	bmi.n	80076dc <_printf_i+0x22c>
 80076b4:	68e0      	ldr	r0, [r4, #12]
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	4298      	cmp	r0, r3
 80076ba:	bfb8      	it	lt
 80076bc:	4618      	movlt	r0, r3
 80076be:	e7a6      	b.n	800760e <_printf_i+0x15e>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4632      	mov	r2, r6
 80076c4:	4649      	mov	r1, r9
 80076c6:	4640      	mov	r0, r8
 80076c8:	47d0      	blx	sl
 80076ca:	3001      	adds	r0, #1
 80076cc:	d09d      	beq.n	800760a <_printf_i+0x15a>
 80076ce:	3501      	adds	r5, #1
 80076d0:	68e3      	ldr	r3, [r4, #12]
 80076d2:	9903      	ldr	r1, [sp, #12]
 80076d4:	1a5b      	subs	r3, r3, r1
 80076d6:	42ab      	cmp	r3, r5
 80076d8:	dcf2      	bgt.n	80076c0 <_printf_i+0x210>
 80076da:	e7eb      	b.n	80076b4 <_printf_i+0x204>
 80076dc:	2500      	movs	r5, #0
 80076de:	f104 0619 	add.w	r6, r4, #25
 80076e2:	e7f5      	b.n	80076d0 <_printf_i+0x220>
 80076e4:	0800b9c0 	.word	0x0800b9c0
 80076e8:	0800b9d1 	.word	0x0800b9d1

080076ec <std>:
 80076ec:	2300      	movs	r3, #0
 80076ee:	b510      	push	{r4, lr}
 80076f0:	4604      	mov	r4, r0
 80076f2:	e9c0 3300 	strd	r3, r3, [r0]
 80076f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076fa:	6083      	str	r3, [r0, #8]
 80076fc:	8181      	strh	r1, [r0, #12]
 80076fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007700:	81c2      	strh	r2, [r0, #14]
 8007702:	6183      	str	r3, [r0, #24]
 8007704:	4619      	mov	r1, r3
 8007706:	2208      	movs	r2, #8
 8007708:	305c      	adds	r0, #92	@ 0x5c
 800770a:	f000 f916 	bl	800793a <memset>
 800770e:	4b0d      	ldr	r3, [pc, #52]	@ (8007744 <std+0x58>)
 8007710:	6224      	str	r4, [r4, #32]
 8007712:	6263      	str	r3, [r4, #36]	@ 0x24
 8007714:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <std+0x5c>)
 8007716:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007718:	4b0c      	ldr	r3, [pc, #48]	@ (800774c <std+0x60>)
 800771a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800771c:	4b0c      	ldr	r3, [pc, #48]	@ (8007750 <std+0x64>)
 800771e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007720:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <std+0x68>)
 8007722:	429c      	cmp	r4, r3
 8007724:	d006      	beq.n	8007734 <std+0x48>
 8007726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800772a:	4294      	cmp	r4, r2
 800772c:	d002      	beq.n	8007734 <std+0x48>
 800772e:	33d0      	adds	r3, #208	@ 0xd0
 8007730:	429c      	cmp	r4, r3
 8007732:	d105      	bne.n	8007740 <std+0x54>
 8007734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800773c:	f000 b97a 	b.w	8007a34 <__retarget_lock_init_recursive>
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	080078b5 	.word	0x080078b5
 8007748:	080078d7 	.word	0x080078d7
 800774c:	0800790f 	.word	0x0800790f
 8007750:	08007933 	.word	0x08007933
 8007754:	2000067c 	.word	0x2000067c

08007758 <stdio_exit_handler>:
 8007758:	4a02      	ldr	r2, [pc, #8]	@ (8007764 <stdio_exit_handler+0xc>)
 800775a:	4903      	ldr	r1, [pc, #12]	@ (8007768 <stdio_exit_handler+0x10>)
 800775c:	4803      	ldr	r0, [pc, #12]	@ (800776c <stdio_exit_handler+0x14>)
 800775e:	f000 b869 	b.w	8007834 <_fwalk_sglue>
 8007762:	bf00      	nop
 8007764:	20000040 	.word	0x20000040
 8007768:	080093b1 	.word	0x080093b1
 800776c:	20000050 	.word	0x20000050

08007770 <cleanup_stdio>:
 8007770:	6841      	ldr	r1, [r0, #4]
 8007772:	4b0c      	ldr	r3, [pc, #48]	@ (80077a4 <cleanup_stdio+0x34>)
 8007774:	b510      	push	{r4, lr}
 8007776:	4299      	cmp	r1, r3
 8007778:	4604      	mov	r4, r0
 800777a:	d001      	beq.n	8007780 <cleanup_stdio+0x10>
 800777c:	f001 fe18 	bl	80093b0 <_fflush_r>
 8007780:	68a1      	ldr	r1, [r4, #8]
 8007782:	4b09      	ldr	r3, [pc, #36]	@ (80077a8 <cleanup_stdio+0x38>)
 8007784:	4299      	cmp	r1, r3
 8007786:	d002      	beq.n	800778e <cleanup_stdio+0x1e>
 8007788:	4620      	mov	r0, r4
 800778a:	f001 fe11 	bl	80093b0 <_fflush_r>
 800778e:	68e1      	ldr	r1, [r4, #12]
 8007790:	4b06      	ldr	r3, [pc, #24]	@ (80077ac <cleanup_stdio+0x3c>)
 8007792:	4299      	cmp	r1, r3
 8007794:	d004      	beq.n	80077a0 <cleanup_stdio+0x30>
 8007796:	4620      	mov	r0, r4
 8007798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800779c:	f001 be08 	b.w	80093b0 <_fflush_r>
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	bf00      	nop
 80077a4:	2000067c 	.word	0x2000067c
 80077a8:	200006e4 	.word	0x200006e4
 80077ac:	2000074c 	.word	0x2000074c

080077b0 <global_stdio_init.part.0>:
 80077b0:	b510      	push	{r4, lr}
 80077b2:	4b0b      	ldr	r3, [pc, #44]	@ (80077e0 <global_stdio_init.part.0+0x30>)
 80077b4:	4c0b      	ldr	r4, [pc, #44]	@ (80077e4 <global_stdio_init.part.0+0x34>)
 80077b6:	4a0c      	ldr	r2, [pc, #48]	@ (80077e8 <global_stdio_init.part.0+0x38>)
 80077b8:	4620      	mov	r0, r4
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	2104      	movs	r1, #4
 80077be:	2200      	movs	r2, #0
 80077c0:	f7ff ff94 	bl	80076ec <std>
 80077c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077c8:	2201      	movs	r2, #1
 80077ca:	2109      	movs	r1, #9
 80077cc:	f7ff ff8e 	bl	80076ec <std>
 80077d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077d4:	2202      	movs	r2, #2
 80077d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077da:	2112      	movs	r1, #18
 80077dc:	f7ff bf86 	b.w	80076ec <std>
 80077e0:	200007b4 	.word	0x200007b4
 80077e4:	2000067c 	.word	0x2000067c
 80077e8:	08007759 	.word	0x08007759

080077ec <__sfp_lock_acquire>:
 80077ec:	4801      	ldr	r0, [pc, #4]	@ (80077f4 <__sfp_lock_acquire+0x8>)
 80077ee:	f000 b922 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 80077f2:	bf00      	nop
 80077f4:	200007bd 	.word	0x200007bd

080077f8 <__sfp_lock_release>:
 80077f8:	4801      	ldr	r0, [pc, #4]	@ (8007800 <__sfp_lock_release+0x8>)
 80077fa:	f000 b91d 	b.w	8007a38 <__retarget_lock_release_recursive>
 80077fe:	bf00      	nop
 8007800:	200007bd 	.word	0x200007bd

08007804 <__sinit>:
 8007804:	b510      	push	{r4, lr}
 8007806:	4604      	mov	r4, r0
 8007808:	f7ff fff0 	bl	80077ec <__sfp_lock_acquire>
 800780c:	6a23      	ldr	r3, [r4, #32]
 800780e:	b11b      	cbz	r3, 8007818 <__sinit+0x14>
 8007810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007814:	f7ff bff0 	b.w	80077f8 <__sfp_lock_release>
 8007818:	4b04      	ldr	r3, [pc, #16]	@ (800782c <__sinit+0x28>)
 800781a:	6223      	str	r3, [r4, #32]
 800781c:	4b04      	ldr	r3, [pc, #16]	@ (8007830 <__sinit+0x2c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1f5      	bne.n	8007810 <__sinit+0xc>
 8007824:	f7ff ffc4 	bl	80077b0 <global_stdio_init.part.0>
 8007828:	e7f2      	b.n	8007810 <__sinit+0xc>
 800782a:	bf00      	nop
 800782c:	08007771 	.word	0x08007771
 8007830:	200007b4 	.word	0x200007b4

08007834 <_fwalk_sglue>:
 8007834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007838:	4607      	mov	r7, r0
 800783a:	4688      	mov	r8, r1
 800783c:	4614      	mov	r4, r2
 800783e:	2600      	movs	r6, #0
 8007840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007844:	f1b9 0901 	subs.w	r9, r9, #1
 8007848:	d505      	bpl.n	8007856 <_fwalk_sglue+0x22>
 800784a:	6824      	ldr	r4, [r4, #0]
 800784c:	2c00      	cmp	r4, #0
 800784e:	d1f7      	bne.n	8007840 <_fwalk_sglue+0xc>
 8007850:	4630      	mov	r0, r6
 8007852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007856:	89ab      	ldrh	r3, [r5, #12]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d907      	bls.n	800786c <_fwalk_sglue+0x38>
 800785c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007860:	3301      	adds	r3, #1
 8007862:	d003      	beq.n	800786c <_fwalk_sglue+0x38>
 8007864:	4629      	mov	r1, r5
 8007866:	4638      	mov	r0, r7
 8007868:	47c0      	blx	r8
 800786a:	4306      	orrs	r6, r0
 800786c:	3568      	adds	r5, #104	@ 0x68
 800786e:	e7e9      	b.n	8007844 <_fwalk_sglue+0x10>

08007870 <siprintf>:
 8007870:	b40e      	push	{r1, r2, r3}
 8007872:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007876:	b510      	push	{r4, lr}
 8007878:	2400      	movs	r4, #0
 800787a:	b09d      	sub	sp, #116	@ 0x74
 800787c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800787e:	9002      	str	r0, [sp, #8]
 8007880:	9006      	str	r0, [sp, #24]
 8007882:	9107      	str	r1, [sp, #28]
 8007884:	9104      	str	r1, [sp, #16]
 8007886:	4809      	ldr	r0, [pc, #36]	@ (80078ac <siprintf+0x3c>)
 8007888:	4909      	ldr	r1, [pc, #36]	@ (80078b0 <siprintf+0x40>)
 800788a:	f853 2b04 	ldr.w	r2, [r3], #4
 800788e:	9105      	str	r1, [sp, #20]
 8007890:	6800      	ldr	r0, [r0, #0]
 8007892:	a902      	add	r1, sp, #8
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007898:	f001 fc0e 	bl	80090b8 <_svfiprintf_r>
 800789c:	9b02      	ldr	r3, [sp, #8]
 800789e:	701c      	strb	r4, [r3, #0]
 80078a0:	b01d      	add	sp, #116	@ 0x74
 80078a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a6:	b003      	add	sp, #12
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	2000004c 	.word	0x2000004c
 80078b0:	ffff0208 	.word	0xffff0208

080078b4 <__sread>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	460c      	mov	r4, r1
 80078b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078bc:	f000 f86c 	bl	8007998 <_read_r>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	bfab      	itete	ge
 80078c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078c6:	89a3      	ldrhlt	r3, [r4, #12]
 80078c8:	181b      	addge	r3, r3, r0
 80078ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078ce:	bfac      	ite	ge
 80078d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078d2:	81a3      	strhlt	r3, [r4, #12]
 80078d4:	bd10      	pop	{r4, pc}

080078d6 <__swrite>:
 80078d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078da:	461f      	mov	r7, r3
 80078dc:	898b      	ldrh	r3, [r1, #12]
 80078de:	4605      	mov	r5, r0
 80078e0:	05db      	lsls	r3, r3, #23
 80078e2:	460c      	mov	r4, r1
 80078e4:	4616      	mov	r6, r2
 80078e6:	d505      	bpl.n	80078f4 <__swrite+0x1e>
 80078e8:	2302      	movs	r3, #2
 80078ea:	2200      	movs	r2, #0
 80078ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f0:	f000 f840 	bl	8007974 <_lseek_r>
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	4632      	mov	r2, r6
 80078f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	4628      	mov	r0, r5
 8007900:	463b      	mov	r3, r7
 8007902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800790a:	f000 b857 	b.w	80079bc <_write_r>

0800790e <__sseek>:
 800790e:	b510      	push	{r4, lr}
 8007910:	460c      	mov	r4, r1
 8007912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007916:	f000 f82d 	bl	8007974 <_lseek_r>
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	bf15      	itete	ne
 8007920:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007922:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007926:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800792a:	81a3      	strheq	r3, [r4, #12]
 800792c:	bf18      	it	ne
 800792e:	81a3      	strhne	r3, [r4, #12]
 8007930:	bd10      	pop	{r4, pc}

08007932 <__sclose>:
 8007932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007936:	f000 b80d 	b.w	8007954 <_close_r>

0800793a <memset>:
 800793a:	4603      	mov	r3, r0
 800793c:	4402      	add	r2, r0
 800793e:	4293      	cmp	r3, r2
 8007940:	d100      	bne.n	8007944 <memset+0xa>
 8007942:	4770      	bx	lr
 8007944:	f803 1b01 	strb.w	r1, [r3], #1
 8007948:	e7f9      	b.n	800793e <memset+0x4>
	...

0800794c <_localeconv_r>:
 800794c:	4800      	ldr	r0, [pc, #0]	@ (8007950 <_localeconv_r+0x4>)
 800794e:	4770      	bx	lr
 8007950:	2000018c 	.word	0x2000018c

08007954 <_close_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	2300      	movs	r3, #0
 8007958:	4d05      	ldr	r5, [pc, #20]	@ (8007970 <_close_r+0x1c>)
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	f7fc fea9 	bl	80046b6 <_close>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_close_r+0x1a>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b103      	cbz	r3, 800796e <_close_r+0x1a>
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	200007b8 	.word	0x200007b8

08007974 <_lseek_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	4611      	mov	r1, r2
 800797c:	2200      	movs	r2, #0
 800797e:	4d05      	ldr	r5, [pc, #20]	@ (8007994 <_lseek_r+0x20>)
 8007980:	602a      	str	r2, [r5, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	f7fc febb 	bl	80046fe <_lseek>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d102      	bne.n	8007992 <_lseek_r+0x1e>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	b103      	cbz	r3, 8007992 <_lseek_r+0x1e>
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	200007b8 	.word	0x200007b8

08007998 <_read_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	2200      	movs	r2, #0
 80079a2:	4d05      	ldr	r5, [pc, #20]	@ (80079b8 <_read_r+0x20>)
 80079a4:	602a      	str	r2, [r5, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f7fc fe4c 	bl	8004644 <_read>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_read_r+0x1e>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_read_r+0x1e>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	200007b8 	.word	0x200007b8

080079bc <_write_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	4611      	mov	r1, r2
 80079c4:	2200      	movs	r2, #0
 80079c6:	4d05      	ldr	r5, [pc, #20]	@ (80079dc <_write_r+0x20>)
 80079c8:	602a      	str	r2, [r5, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f7fc fe57 	bl	800467e <_write>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_write_r+0x1e>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_write_r+0x1e>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	200007b8 	.word	0x200007b8

080079e0 <__errno>:
 80079e0:	4b01      	ldr	r3, [pc, #4]	@ (80079e8 <__errno+0x8>)
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	2000004c 	.word	0x2000004c

080079ec <__libc_init_array>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	2600      	movs	r6, #0
 80079f0:	4d0c      	ldr	r5, [pc, #48]	@ (8007a24 <__libc_init_array+0x38>)
 80079f2:	4c0d      	ldr	r4, [pc, #52]	@ (8007a28 <__libc_init_array+0x3c>)
 80079f4:	1b64      	subs	r4, r4, r5
 80079f6:	10a4      	asrs	r4, r4, #2
 80079f8:	42a6      	cmp	r6, r4
 80079fa:	d109      	bne.n	8007a10 <__libc_init_array+0x24>
 80079fc:	f002 f874 	bl	8009ae8 <_init>
 8007a00:	2600      	movs	r6, #0
 8007a02:	4d0a      	ldr	r5, [pc, #40]	@ (8007a2c <__libc_init_array+0x40>)
 8007a04:	4c0a      	ldr	r4, [pc, #40]	@ (8007a30 <__libc_init_array+0x44>)
 8007a06:	1b64      	subs	r4, r4, r5
 8007a08:	10a4      	asrs	r4, r4, #2
 8007a0a:	42a6      	cmp	r6, r4
 8007a0c:	d105      	bne.n	8007a1a <__libc_init_array+0x2e>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a14:	4798      	blx	r3
 8007a16:	3601      	adds	r6, #1
 8007a18:	e7ee      	b.n	80079f8 <__libc_init_array+0xc>
 8007a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1e:	4798      	blx	r3
 8007a20:	3601      	adds	r6, #1
 8007a22:	e7f2      	b.n	8007a0a <__libc_init_array+0x1e>
 8007a24:	0800bd2c 	.word	0x0800bd2c
 8007a28:	0800bd2c 	.word	0x0800bd2c
 8007a2c:	0800bd2c 	.word	0x0800bd2c
 8007a30:	0800bd30 	.word	0x0800bd30

08007a34 <__retarget_lock_init_recursive>:
 8007a34:	4770      	bx	lr

08007a36 <__retarget_lock_acquire_recursive>:
 8007a36:	4770      	bx	lr

08007a38 <__retarget_lock_release_recursive>:
 8007a38:	4770      	bx	lr

08007a3a <memchr>:
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	b2c9      	uxtb	r1, r1
 8007a40:	4402      	add	r2, r0
 8007a42:	4293      	cmp	r3, r2
 8007a44:	4618      	mov	r0, r3
 8007a46:	d101      	bne.n	8007a4c <memchr+0x12>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e003      	b.n	8007a54 <memchr+0x1a>
 8007a4c:	7804      	ldrb	r4, [r0, #0]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	428c      	cmp	r4, r1
 8007a52:	d1f6      	bne.n	8007a42 <memchr+0x8>
 8007a54:	bd10      	pop	{r4, pc}

08007a56 <quorem>:
 8007a56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5a:	6903      	ldr	r3, [r0, #16]
 8007a5c:	690c      	ldr	r4, [r1, #16]
 8007a5e:	4607      	mov	r7, r0
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	db7e      	blt.n	8007b62 <quorem+0x10c>
 8007a64:	3c01      	subs	r4, #1
 8007a66:	00a3      	lsls	r3, r4, #2
 8007a68:	f100 0514 	add.w	r5, r0, #20
 8007a6c:	f101 0814 	add.w	r8, r1, #20
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a80:	3301      	adds	r3, #1
 8007a82:	429a      	cmp	r2, r3
 8007a84:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a8c:	d32e      	bcc.n	8007aec <quorem+0x96>
 8007a8e:	f04f 0a00 	mov.w	sl, #0
 8007a92:	46c4      	mov	ip, r8
 8007a94:	46ae      	mov	lr, r5
 8007a96:	46d3      	mov	fp, sl
 8007a98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a9c:	b298      	uxth	r0, r3
 8007a9e:	fb06 a000 	mla	r0, r6, r0, sl
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	0c02      	lsrs	r2, r0, #16
 8007aa6:	fb06 2303 	mla	r3, r6, r3, r2
 8007aaa:	f8de 2000 	ldr.w	r2, [lr]
 8007aae:	b280      	uxth	r0, r0
 8007ab0:	b292      	uxth	r2, r2
 8007ab2:	1a12      	subs	r2, r2, r0
 8007ab4:	445a      	add	r2, fp
 8007ab6:	f8de 0000 	ldr.w	r0, [lr]
 8007aba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ac4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ac8:	b292      	uxth	r2, r2
 8007aca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ace:	45e1      	cmp	r9, ip
 8007ad0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ad4:	f84e 2b04 	str.w	r2, [lr], #4
 8007ad8:	d2de      	bcs.n	8007a98 <quorem+0x42>
 8007ada:	9b00      	ldr	r3, [sp, #0]
 8007adc:	58eb      	ldr	r3, [r5, r3]
 8007ade:	b92b      	cbnz	r3, 8007aec <quorem+0x96>
 8007ae0:	9b01      	ldr	r3, [sp, #4]
 8007ae2:	3b04      	subs	r3, #4
 8007ae4:	429d      	cmp	r5, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	d32f      	bcc.n	8007b4a <quorem+0xf4>
 8007aea:	613c      	str	r4, [r7, #16]
 8007aec:	4638      	mov	r0, r7
 8007aee:	f001 f97f 	bl	8008df0 <__mcmp>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	db25      	blt.n	8007b42 <quorem+0xec>
 8007af6:	4629      	mov	r1, r5
 8007af8:	2000      	movs	r0, #0
 8007afa:	f858 2b04 	ldr.w	r2, [r8], #4
 8007afe:	f8d1 c000 	ldr.w	ip, [r1]
 8007b02:	fa1f fe82 	uxth.w	lr, r2
 8007b06:	fa1f f38c 	uxth.w	r3, ip
 8007b0a:	eba3 030e 	sub.w	r3, r3, lr
 8007b0e:	4403      	add	r3, r0
 8007b10:	0c12      	lsrs	r2, r2, #16
 8007b12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b20:	45c1      	cmp	r9, r8
 8007b22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b26:	f841 3b04 	str.w	r3, [r1], #4
 8007b2a:	d2e6      	bcs.n	8007afa <quorem+0xa4>
 8007b2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b34:	b922      	cbnz	r2, 8007b40 <quorem+0xea>
 8007b36:	3b04      	subs	r3, #4
 8007b38:	429d      	cmp	r5, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	d30b      	bcc.n	8007b56 <quorem+0x100>
 8007b3e:	613c      	str	r4, [r7, #16]
 8007b40:	3601      	adds	r6, #1
 8007b42:	4630      	mov	r0, r6
 8007b44:	b003      	add	sp, #12
 8007b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4a:	6812      	ldr	r2, [r2, #0]
 8007b4c:	3b04      	subs	r3, #4
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	d1cb      	bne.n	8007aea <quorem+0x94>
 8007b52:	3c01      	subs	r4, #1
 8007b54:	e7c6      	b.n	8007ae4 <quorem+0x8e>
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	3b04      	subs	r3, #4
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	d1ef      	bne.n	8007b3e <quorem+0xe8>
 8007b5e:	3c01      	subs	r4, #1
 8007b60:	e7ea      	b.n	8007b38 <quorem+0xe2>
 8007b62:	2000      	movs	r0, #0
 8007b64:	e7ee      	b.n	8007b44 <quorem+0xee>
	...

08007b68 <_dtoa_r>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	461d      	mov	r5, r3
 8007b70:	69c7      	ldr	r7, [r0, #28]
 8007b72:	b097      	sub	sp, #92	@ 0x5c
 8007b74:	4681      	mov	r9, r0
 8007b76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007b7a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007b7c:	b97f      	cbnz	r7, 8007b9e <_dtoa_r+0x36>
 8007b7e:	2010      	movs	r0, #16
 8007b80:	f000 fe0e 	bl	80087a0 <malloc>
 8007b84:	4602      	mov	r2, r0
 8007b86:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b8a:	b920      	cbnz	r0, 8007b96 <_dtoa_r+0x2e>
 8007b8c:	21ef      	movs	r1, #239	@ 0xef
 8007b8e:	4bac      	ldr	r3, [pc, #688]	@ (8007e40 <_dtoa_r+0x2d8>)
 8007b90:	48ac      	ldr	r0, [pc, #688]	@ (8007e44 <_dtoa_r+0x2dc>)
 8007b92:	f001 fc6d 	bl	8009470 <__assert_func>
 8007b96:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b9a:	6007      	str	r7, [r0, #0]
 8007b9c:	60c7      	str	r7, [r0, #12]
 8007b9e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ba2:	6819      	ldr	r1, [r3, #0]
 8007ba4:	b159      	cbz	r1, 8007bbe <_dtoa_r+0x56>
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	2301      	movs	r3, #1
 8007baa:	4093      	lsls	r3, r2
 8007bac:	604a      	str	r2, [r1, #4]
 8007bae:	608b      	str	r3, [r1, #8]
 8007bb0:	4648      	mov	r0, r9
 8007bb2:	f000 feeb 	bl	800898c <_Bfree>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	1e2b      	subs	r3, r5, #0
 8007bc0:	bfaf      	iteee	ge
 8007bc2:	2300      	movge	r3, #0
 8007bc4:	2201      	movlt	r2, #1
 8007bc6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bca:	9307      	strlt	r3, [sp, #28]
 8007bcc:	bfa8      	it	ge
 8007bce:	6033      	strge	r3, [r6, #0]
 8007bd0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007bd4:	4b9c      	ldr	r3, [pc, #624]	@ (8007e48 <_dtoa_r+0x2e0>)
 8007bd6:	bfb8      	it	lt
 8007bd8:	6032      	strlt	r2, [r6, #0]
 8007bda:	ea33 0308 	bics.w	r3, r3, r8
 8007bde:	d112      	bne.n	8007c06 <_dtoa_r+0x9e>
 8007be0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007be4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007bec:	4323      	orrs	r3, r4
 8007bee:	f000 855e 	beq.w	80086ae <_dtoa_r+0xb46>
 8007bf2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e4c <_dtoa_r+0x2e4>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 8560 	beq.w	80086be <_dtoa_r+0xb56>
 8007bfe:	f10a 0303 	add.w	r3, sl, #3
 8007c02:	f000 bd5a 	b.w	80086ba <_dtoa_r+0xb52>
 8007c06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c12:	2200      	movs	r2, #0
 8007c14:	2300      	movs	r3, #0
 8007c16:	f7f8 fec7 	bl	80009a8 <__aeabi_dcmpeq>
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	b158      	cbz	r0, 8007c36 <_dtoa_r+0xce>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c26:	b113      	cbz	r3, 8007c2e <_dtoa_r+0xc6>
 8007c28:	4b89      	ldr	r3, [pc, #548]	@ (8007e50 <_dtoa_r+0x2e8>)
 8007c2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007e54 <_dtoa_r+0x2ec>
 8007c32:	f000 bd44 	b.w	80086be <_dtoa_r+0xb56>
 8007c36:	ab14      	add	r3, sp, #80	@ 0x50
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	ab15      	add	r3, sp, #84	@ 0x54
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	4648      	mov	r0, r9
 8007c40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c44:	f001 f984 	bl	8008f50 <__d2b>
 8007c48:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007c4c:	9003      	str	r0, [sp, #12]
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	d078      	beq.n	8007d44 <_dtoa_r+0x1dc>
 8007c52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c58:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c60:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c64:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c68:	9712      	str	r7, [sp, #72]	@ 0x48
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8007e58 <_dtoa_r+0x2f0>)
 8007c70:	f7f8 fa7a 	bl	8000168 <__aeabi_dsub>
 8007c74:	a36c      	add	r3, pc, #432	@ (adr r3, 8007e28 <_dtoa_r+0x2c0>)
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f7f8 fc2d 	bl	80004d8 <__aeabi_dmul>
 8007c7e:	a36c      	add	r3, pc, #432	@ (adr r3, 8007e30 <_dtoa_r+0x2c8>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f7f8 fa72 	bl	800016c <__adddf3>
 8007c88:	4604      	mov	r4, r0
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	460d      	mov	r5, r1
 8007c8e:	f7f8 fbb9 	bl	8000404 <__aeabi_i2d>
 8007c92:	a369      	add	r3, pc, #420	@ (adr r3, 8007e38 <_dtoa_r+0x2d0>)
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f7f8 fc1e 	bl	80004d8 <__aeabi_dmul>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	f7f8 fa62 	bl	800016c <__adddf3>
 8007ca8:	4604      	mov	r4, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	f7f8 fec4 	bl	8000a38 <__aeabi_d2iz>
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4607      	mov	r7, r0
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	f7f8 fe7f 	bl	80009bc <__aeabi_dcmplt>
 8007cbe:	b140      	cbz	r0, 8007cd2 <_dtoa_r+0x16a>
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	f7f8 fb9f 	bl	8000404 <__aeabi_i2d>
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	f7f8 fe6d 	bl	80009a8 <__aeabi_dcmpeq>
 8007cce:	b900      	cbnz	r0, 8007cd2 <_dtoa_r+0x16a>
 8007cd0:	3f01      	subs	r7, #1
 8007cd2:	2f16      	cmp	r7, #22
 8007cd4:	d854      	bhi.n	8007d80 <_dtoa_r+0x218>
 8007cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cda:	4b60      	ldr	r3, [pc, #384]	@ (8007e5c <_dtoa_r+0x2f4>)
 8007cdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f7f8 fe6a 	bl	80009bc <__aeabi_dcmplt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d04b      	beq.n	8007d84 <_dtoa_r+0x21c>
 8007cec:	2300      	movs	r3, #0
 8007cee:	3f01      	subs	r7, #1
 8007cf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cf2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007cf4:	1b9b      	subs	r3, r3, r6
 8007cf6:	1e5a      	subs	r2, r3, #1
 8007cf8:	bf49      	itett	mi
 8007cfa:	f1c3 0301 	rsbmi	r3, r3, #1
 8007cfe:	2300      	movpl	r3, #0
 8007d00:	9304      	strmi	r3, [sp, #16]
 8007d02:	2300      	movmi	r3, #0
 8007d04:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d06:	bf54      	ite	pl
 8007d08:	9304      	strpl	r3, [sp, #16]
 8007d0a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007d0c:	2f00      	cmp	r7, #0
 8007d0e:	db3b      	blt.n	8007d88 <_dtoa_r+0x220>
 8007d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d12:	970e      	str	r7, [sp, #56]	@ 0x38
 8007d14:	443b      	add	r3, r7
 8007d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d18:	2300      	movs	r3, #0
 8007d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d865      	bhi.n	8007dee <_dtoa_r+0x286>
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	bfc4      	itt	gt
 8007d26:	3b04      	subgt	r3, #4
 8007d28:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007d2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d2c:	bfc8      	it	gt
 8007d2e:	2400      	movgt	r4, #0
 8007d30:	f1a3 0302 	sub.w	r3, r3, #2
 8007d34:	bfd8      	it	le
 8007d36:	2401      	movle	r4, #1
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d864      	bhi.n	8007e06 <_dtoa_r+0x29e>
 8007d3c:	e8df f003 	tbb	[pc, r3]
 8007d40:	2c385553 	.word	0x2c385553
 8007d44:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007d48:	441e      	add	r6, r3
 8007d4a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	bfc1      	itttt	gt
 8007d52:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d56:	fa08 f803 	lslgt.w	r8, r8, r3
 8007d5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d62:	bfd6      	itet	le
 8007d64:	f1c3 0320 	rsble	r3, r3, #32
 8007d68:	ea48 0003 	orrgt.w	r0, r8, r3
 8007d6c:	fa04 f003 	lslle.w	r0, r4, r3
 8007d70:	f7f8 fb38 	bl	80003e4 <__aeabi_ui2d>
 8007d74:	2201      	movs	r2, #1
 8007d76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d7a:	3e01      	subs	r6, #1
 8007d7c:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d7e:	e774      	b.n	8007c6a <_dtoa_r+0x102>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e7b5      	b.n	8007cf0 <_dtoa_r+0x188>
 8007d84:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007d86:	e7b4      	b.n	8007cf2 <_dtoa_r+0x18a>
 8007d88:	9b04      	ldr	r3, [sp, #16]
 8007d8a:	1bdb      	subs	r3, r3, r7
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	427b      	negs	r3, r7
 8007d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d92:	2300      	movs	r3, #0
 8007d94:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d96:	e7c1      	b.n	8007d1c <_dtoa_r+0x1b4>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d9e:	eb07 0b03 	add.w	fp, r7, r3
 8007da2:	f10b 0301 	add.w	r3, fp, #1
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	9308      	str	r3, [sp, #32]
 8007daa:	bfb8      	it	lt
 8007dac:	2301      	movlt	r3, #1
 8007dae:	e006      	b.n	8007dbe <_dtoa_r+0x256>
 8007db0:	2301      	movs	r3, #1
 8007db2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007db4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dd28      	ble.n	8007e0c <_dtoa_r+0x2a4>
 8007dba:	469b      	mov	fp, r3
 8007dbc:	9308      	str	r3, [sp, #32]
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007dc6:	f102 0514 	add.w	r5, r2, #20
 8007dca:	429d      	cmp	r5, r3
 8007dcc:	d926      	bls.n	8007e1c <_dtoa_r+0x2b4>
 8007dce:	6041      	str	r1, [r0, #4]
 8007dd0:	4648      	mov	r0, r9
 8007dd2:	f000 fd9b 	bl	800890c <_Balloc>
 8007dd6:	4682      	mov	sl, r0
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d143      	bne.n	8007e64 <_dtoa_r+0x2fc>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	f240 11af 	movw	r1, #431	@ 0x1af
 8007de2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e60 <_dtoa_r+0x2f8>)
 8007de4:	e6d4      	b.n	8007b90 <_dtoa_r+0x28>
 8007de6:	2300      	movs	r3, #0
 8007de8:	e7e3      	b.n	8007db2 <_dtoa_r+0x24a>
 8007dea:	2300      	movs	r3, #0
 8007dec:	e7d5      	b.n	8007d9a <_dtoa_r+0x232>
 8007dee:	2401      	movs	r4, #1
 8007df0:	2300      	movs	r3, #0
 8007df2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007df4:	9320      	str	r3, [sp, #128]	@ 0x80
 8007df6:	f04f 3bff 	mov.w	fp, #4294967295
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2312      	movs	r3, #18
 8007dfe:	f8cd b020 	str.w	fp, [sp, #32]
 8007e02:	9221      	str	r2, [sp, #132]	@ 0x84
 8007e04:	e7db      	b.n	8007dbe <_dtoa_r+0x256>
 8007e06:	2301      	movs	r3, #1
 8007e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e0a:	e7f4      	b.n	8007df6 <_dtoa_r+0x28e>
 8007e0c:	f04f 0b01 	mov.w	fp, #1
 8007e10:	465b      	mov	r3, fp
 8007e12:	f8cd b020 	str.w	fp, [sp, #32]
 8007e16:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007e1a:	e7d0      	b.n	8007dbe <_dtoa_r+0x256>
 8007e1c:	3101      	adds	r1, #1
 8007e1e:	0052      	lsls	r2, r2, #1
 8007e20:	e7d1      	b.n	8007dc6 <_dtoa_r+0x25e>
 8007e22:	bf00      	nop
 8007e24:	f3af 8000 	nop.w
 8007e28:	636f4361 	.word	0x636f4361
 8007e2c:	3fd287a7 	.word	0x3fd287a7
 8007e30:	8b60c8b3 	.word	0x8b60c8b3
 8007e34:	3fc68a28 	.word	0x3fc68a28
 8007e38:	509f79fb 	.word	0x509f79fb
 8007e3c:	3fd34413 	.word	0x3fd34413
 8007e40:	0800b9ef 	.word	0x0800b9ef
 8007e44:	0800ba06 	.word	0x0800ba06
 8007e48:	7ff00000 	.word	0x7ff00000
 8007e4c:	0800b9eb 	.word	0x0800b9eb
 8007e50:	0800b9bf 	.word	0x0800b9bf
 8007e54:	0800b9be 	.word	0x0800b9be
 8007e58:	3ff80000 	.word	0x3ff80000
 8007e5c:	0800bb58 	.word	0x0800bb58
 8007e60:	0800ba5e 	.word	0x0800ba5e
 8007e64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e68:	6018      	str	r0, [r3, #0]
 8007e6a:	9b08      	ldr	r3, [sp, #32]
 8007e6c:	2b0e      	cmp	r3, #14
 8007e6e:	f200 80a1 	bhi.w	8007fb4 <_dtoa_r+0x44c>
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	f000 809e 	beq.w	8007fb4 <_dtoa_r+0x44c>
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	dd33      	ble.n	8007ee4 <_dtoa_r+0x37c>
 8007e7c:	4b9c      	ldr	r3, [pc, #624]	@ (80080f0 <_dtoa_r+0x588>)
 8007e7e:	f007 020f 	and.w	r2, r7, #15
 8007e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e86:	05f8      	lsls	r0, r7, #23
 8007e88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007e90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e94:	d516      	bpl.n	8007ec4 <_dtoa_r+0x35c>
 8007e96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e9a:	4b96      	ldr	r3, [pc, #600]	@ (80080f4 <_dtoa_r+0x58c>)
 8007e9c:	2603      	movs	r6, #3
 8007e9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ea2:	f7f8 fc43 	bl	800072c <__aeabi_ddiv>
 8007ea6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007eaa:	f004 040f 	and.w	r4, r4, #15
 8007eae:	4d91      	ldr	r5, [pc, #580]	@ (80080f4 <_dtoa_r+0x58c>)
 8007eb0:	b954      	cbnz	r4, 8007ec8 <_dtoa_r+0x360>
 8007eb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eba:	f7f8 fc37 	bl	800072c <__aeabi_ddiv>
 8007ebe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ec2:	e028      	b.n	8007f16 <_dtoa_r+0x3ae>
 8007ec4:	2602      	movs	r6, #2
 8007ec6:	e7f2      	b.n	8007eae <_dtoa_r+0x346>
 8007ec8:	07e1      	lsls	r1, r4, #31
 8007eca:	d508      	bpl.n	8007ede <_dtoa_r+0x376>
 8007ecc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ed4:	f7f8 fb00 	bl	80004d8 <__aeabi_dmul>
 8007ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007edc:	3601      	adds	r6, #1
 8007ede:	1064      	asrs	r4, r4, #1
 8007ee0:	3508      	adds	r5, #8
 8007ee2:	e7e5      	b.n	8007eb0 <_dtoa_r+0x348>
 8007ee4:	f000 80af 	beq.w	8008046 <_dtoa_r+0x4de>
 8007ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eec:	427c      	negs	r4, r7
 8007eee:	4b80      	ldr	r3, [pc, #512]	@ (80080f0 <_dtoa_r+0x588>)
 8007ef0:	f004 020f 	and.w	r2, r4, #15
 8007ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 faec 	bl	80004d8 <__aeabi_dmul>
 8007f00:	2602      	movs	r6, #2
 8007f02:	2300      	movs	r3, #0
 8007f04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f08:	4d7a      	ldr	r5, [pc, #488]	@ (80080f4 <_dtoa_r+0x58c>)
 8007f0a:	1124      	asrs	r4, r4, #4
 8007f0c:	2c00      	cmp	r4, #0
 8007f0e:	f040 808f 	bne.w	8008030 <_dtoa_r+0x4c8>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1d3      	bne.n	8007ebe <_dtoa_r+0x356>
 8007f16:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007f1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 8094 	beq.w	800804a <_dtoa_r+0x4e2>
 8007f22:	2200      	movs	r2, #0
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	4b73      	ldr	r3, [pc, #460]	@ (80080f8 <_dtoa_r+0x590>)
 8007f2a:	f7f8 fd47 	bl	80009bc <__aeabi_dcmplt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f000 808b 	beq.w	800804a <_dtoa_r+0x4e2>
 8007f34:	9b08      	ldr	r3, [sp, #32]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 8087 	beq.w	800804a <_dtoa_r+0x4e2>
 8007f3c:	f1bb 0f00 	cmp.w	fp, #0
 8007f40:	dd34      	ble.n	8007fac <_dtoa_r+0x444>
 8007f42:	4620      	mov	r0, r4
 8007f44:	2200      	movs	r2, #0
 8007f46:	4629      	mov	r1, r5
 8007f48:	4b6c      	ldr	r3, [pc, #432]	@ (80080fc <_dtoa_r+0x594>)
 8007f4a:	f7f8 fac5 	bl	80004d8 <__aeabi_dmul>
 8007f4e:	465c      	mov	r4, fp
 8007f50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f54:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f58:	3601      	adds	r6, #1
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7f8 fa52 	bl	8000404 <__aeabi_i2d>
 8007f60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f64:	f7f8 fab8 	bl	80004d8 <__aeabi_dmul>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4b65      	ldr	r3, [pc, #404]	@ (8008100 <_dtoa_r+0x598>)
 8007f6c:	f7f8 f8fe 	bl	800016c <__adddf3>
 8007f70:	4605      	mov	r5, r0
 8007f72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d16a      	bne.n	8008050 <_dtoa_r+0x4e8>
 8007f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4b60      	ldr	r3, [pc, #384]	@ (8008104 <_dtoa_r+0x59c>)
 8007f82:	f7f8 f8f1 	bl	8000168 <__aeabi_dsub>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f8e:	462a      	mov	r2, r5
 8007f90:	4633      	mov	r3, r6
 8007f92:	f7f8 fd31 	bl	80009f8 <__aeabi_dcmpgt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f040 8298 	bne.w	80084cc <_dtoa_r+0x964>
 8007f9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fa6:	f7f8 fd09 	bl	80009bc <__aeabi_dcmplt>
 8007faa:	bb38      	cbnz	r0, 8007ffc <_dtoa_r+0x494>
 8007fac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007fb0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007fb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f2c0 8157 	blt.w	800826a <_dtoa_r+0x702>
 8007fbc:	2f0e      	cmp	r7, #14
 8007fbe:	f300 8154 	bgt.w	800826a <_dtoa_r+0x702>
 8007fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80080f0 <_dtoa_r+0x588>)
 8007fc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fcc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f280 80e5 	bge.w	80081a2 <_dtoa_r+0x63a>
 8007fd8:	9b08      	ldr	r3, [sp, #32]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f300 80e1 	bgt.w	80081a2 <_dtoa_r+0x63a>
 8007fe0:	d10c      	bne.n	8007ffc <_dtoa_r+0x494>
 8007fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4b46      	ldr	r3, [pc, #280]	@ (8008104 <_dtoa_r+0x59c>)
 8007fea:	f7f8 fa75 	bl	80004d8 <__aeabi_dmul>
 8007fee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ff2:	f7f8 fcf7 	bl	80009e4 <__aeabi_dcmpge>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f000 8266 	beq.w	80084c8 <_dtoa_r+0x960>
 8007ffc:	2400      	movs	r4, #0
 8007ffe:	4625      	mov	r5, r4
 8008000:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008002:	4656      	mov	r6, sl
 8008004:	ea6f 0803 	mvn.w	r8, r3
 8008008:	2700      	movs	r7, #0
 800800a:	4621      	mov	r1, r4
 800800c:	4648      	mov	r0, r9
 800800e:	f000 fcbd 	bl	800898c <_Bfree>
 8008012:	2d00      	cmp	r5, #0
 8008014:	f000 80bd 	beq.w	8008192 <_dtoa_r+0x62a>
 8008018:	b12f      	cbz	r7, 8008026 <_dtoa_r+0x4be>
 800801a:	42af      	cmp	r7, r5
 800801c:	d003      	beq.n	8008026 <_dtoa_r+0x4be>
 800801e:	4639      	mov	r1, r7
 8008020:	4648      	mov	r0, r9
 8008022:	f000 fcb3 	bl	800898c <_Bfree>
 8008026:	4629      	mov	r1, r5
 8008028:	4648      	mov	r0, r9
 800802a:	f000 fcaf 	bl	800898c <_Bfree>
 800802e:	e0b0      	b.n	8008192 <_dtoa_r+0x62a>
 8008030:	07e2      	lsls	r2, r4, #31
 8008032:	d505      	bpl.n	8008040 <_dtoa_r+0x4d8>
 8008034:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008038:	f7f8 fa4e 	bl	80004d8 <__aeabi_dmul>
 800803c:	2301      	movs	r3, #1
 800803e:	3601      	adds	r6, #1
 8008040:	1064      	asrs	r4, r4, #1
 8008042:	3508      	adds	r5, #8
 8008044:	e762      	b.n	8007f0c <_dtoa_r+0x3a4>
 8008046:	2602      	movs	r6, #2
 8008048:	e765      	b.n	8007f16 <_dtoa_r+0x3ae>
 800804a:	46b8      	mov	r8, r7
 800804c:	9c08      	ldr	r4, [sp, #32]
 800804e:	e784      	b.n	8007f5a <_dtoa_r+0x3f2>
 8008050:	4b27      	ldr	r3, [pc, #156]	@ (80080f0 <_dtoa_r+0x588>)
 8008052:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008058:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800805c:	4454      	add	r4, sl
 800805e:	2900      	cmp	r1, #0
 8008060:	d054      	beq.n	800810c <_dtoa_r+0x5a4>
 8008062:	2000      	movs	r0, #0
 8008064:	4928      	ldr	r1, [pc, #160]	@ (8008108 <_dtoa_r+0x5a0>)
 8008066:	f7f8 fb61 	bl	800072c <__aeabi_ddiv>
 800806a:	4633      	mov	r3, r6
 800806c:	462a      	mov	r2, r5
 800806e:	f7f8 f87b 	bl	8000168 <__aeabi_dsub>
 8008072:	4656      	mov	r6, sl
 8008074:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800807c:	f7f8 fcdc 	bl	8000a38 <__aeabi_d2iz>
 8008080:	4605      	mov	r5, r0
 8008082:	f7f8 f9bf 	bl	8000404 <__aeabi_i2d>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800808e:	f7f8 f86b 	bl	8000168 <__aeabi_dsub>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	3530      	adds	r5, #48	@ 0x30
 8008098:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800809c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080a0:	f806 5b01 	strb.w	r5, [r6], #1
 80080a4:	f7f8 fc8a 	bl	80009bc <__aeabi_dcmplt>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d172      	bne.n	8008192 <_dtoa_r+0x62a>
 80080ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080b0:	2000      	movs	r0, #0
 80080b2:	4911      	ldr	r1, [pc, #68]	@ (80080f8 <_dtoa_r+0x590>)
 80080b4:	f7f8 f858 	bl	8000168 <__aeabi_dsub>
 80080b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080bc:	f7f8 fc7e 	bl	80009bc <__aeabi_dcmplt>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	f040 80b4 	bne.w	800822e <_dtoa_r+0x6c6>
 80080c6:	42a6      	cmp	r6, r4
 80080c8:	f43f af70 	beq.w	8007fac <_dtoa_r+0x444>
 80080cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080d0:	2200      	movs	r2, #0
 80080d2:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <_dtoa_r+0x594>)
 80080d4:	f7f8 fa00 	bl	80004d8 <__aeabi_dmul>
 80080d8:	2200      	movs	r2, #0
 80080da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080e2:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <_dtoa_r+0x594>)
 80080e4:	f7f8 f9f8 	bl	80004d8 <__aeabi_dmul>
 80080e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080ec:	e7c4      	b.n	8008078 <_dtoa_r+0x510>
 80080ee:	bf00      	nop
 80080f0:	0800bb58 	.word	0x0800bb58
 80080f4:	0800bb30 	.word	0x0800bb30
 80080f8:	3ff00000 	.word	0x3ff00000
 80080fc:	40240000 	.word	0x40240000
 8008100:	401c0000 	.word	0x401c0000
 8008104:	40140000 	.word	0x40140000
 8008108:	3fe00000 	.word	0x3fe00000
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	f7f8 f9e2 	bl	80004d8 <__aeabi_dmul>
 8008114:	4656      	mov	r6, sl
 8008116:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800811a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800811c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008120:	f7f8 fc8a 	bl	8000a38 <__aeabi_d2iz>
 8008124:	4605      	mov	r5, r0
 8008126:	f7f8 f96d 	bl	8000404 <__aeabi_i2d>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008132:	f7f8 f819 	bl	8000168 <__aeabi_dsub>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	3530      	adds	r5, #48	@ 0x30
 800813c:	f806 5b01 	strb.w	r5, [r6], #1
 8008140:	42a6      	cmp	r6, r4
 8008142:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	d124      	bne.n	8008196 <_dtoa_r+0x62e>
 800814c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008150:	4bae      	ldr	r3, [pc, #696]	@ (800840c <_dtoa_r+0x8a4>)
 8008152:	f7f8 f80b 	bl	800016c <__adddf3>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800815e:	f7f8 fc4b 	bl	80009f8 <__aeabi_dcmpgt>
 8008162:	2800      	cmp	r0, #0
 8008164:	d163      	bne.n	800822e <_dtoa_r+0x6c6>
 8008166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800816a:	2000      	movs	r0, #0
 800816c:	49a7      	ldr	r1, [pc, #668]	@ (800840c <_dtoa_r+0x8a4>)
 800816e:	f7f7 fffb 	bl	8000168 <__aeabi_dsub>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800817a:	f7f8 fc1f 	bl	80009bc <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	f43f af14 	beq.w	8007fac <_dtoa_r+0x444>
 8008184:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008186:	1e73      	subs	r3, r6, #1
 8008188:	9313      	str	r3, [sp, #76]	@ 0x4c
 800818a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800818e:	2b30      	cmp	r3, #48	@ 0x30
 8008190:	d0f8      	beq.n	8008184 <_dtoa_r+0x61c>
 8008192:	4647      	mov	r7, r8
 8008194:	e03b      	b.n	800820e <_dtoa_r+0x6a6>
 8008196:	4b9e      	ldr	r3, [pc, #632]	@ (8008410 <_dtoa_r+0x8a8>)
 8008198:	f7f8 f99e 	bl	80004d8 <__aeabi_dmul>
 800819c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081a0:	e7bc      	b.n	800811c <_dtoa_r+0x5b4>
 80081a2:	4656      	mov	r6, sl
 80081a4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80081a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	f7f8 fabc 	bl	800072c <__aeabi_ddiv>
 80081b4:	f7f8 fc40 	bl	8000a38 <__aeabi_d2iz>
 80081b8:	4680      	mov	r8, r0
 80081ba:	f7f8 f923 	bl	8000404 <__aeabi_i2d>
 80081be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081c2:	f7f8 f989 	bl	80004d8 <__aeabi_dmul>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4620      	mov	r0, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7f7 ffcb 	bl	8000168 <__aeabi_dsub>
 80081d2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081d6:	9d08      	ldr	r5, [sp, #32]
 80081d8:	f806 4b01 	strb.w	r4, [r6], #1
 80081dc:	eba6 040a 	sub.w	r4, r6, sl
 80081e0:	42a5      	cmp	r5, r4
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	d133      	bne.n	8008250 <_dtoa_r+0x6e8>
 80081e8:	f7f7 ffc0 	bl	800016c <__adddf3>
 80081ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f0:	4604      	mov	r4, r0
 80081f2:	460d      	mov	r5, r1
 80081f4:	f7f8 fc00 	bl	80009f8 <__aeabi_dcmpgt>
 80081f8:	b9c0      	cbnz	r0, 800822c <_dtoa_r+0x6c4>
 80081fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081fe:	4620      	mov	r0, r4
 8008200:	4629      	mov	r1, r5
 8008202:	f7f8 fbd1 	bl	80009a8 <__aeabi_dcmpeq>
 8008206:	b110      	cbz	r0, 800820e <_dtoa_r+0x6a6>
 8008208:	f018 0f01 	tst.w	r8, #1
 800820c:	d10e      	bne.n	800822c <_dtoa_r+0x6c4>
 800820e:	4648      	mov	r0, r9
 8008210:	9903      	ldr	r1, [sp, #12]
 8008212:	f000 fbbb 	bl	800898c <_Bfree>
 8008216:	2300      	movs	r3, #0
 8008218:	7033      	strb	r3, [r6, #0]
 800821a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800821c:	3701      	adds	r7, #1
 800821e:	601f      	str	r7, [r3, #0]
 8008220:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 824b 	beq.w	80086be <_dtoa_r+0xb56>
 8008228:	601e      	str	r6, [r3, #0]
 800822a:	e248      	b.n	80086be <_dtoa_r+0xb56>
 800822c:	46b8      	mov	r8, r7
 800822e:	4633      	mov	r3, r6
 8008230:	461e      	mov	r6, r3
 8008232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008236:	2a39      	cmp	r2, #57	@ 0x39
 8008238:	d106      	bne.n	8008248 <_dtoa_r+0x6e0>
 800823a:	459a      	cmp	sl, r3
 800823c:	d1f8      	bne.n	8008230 <_dtoa_r+0x6c8>
 800823e:	2230      	movs	r2, #48	@ 0x30
 8008240:	f108 0801 	add.w	r8, r8, #1
 8008244:	f88a 2000 	strb.w	r2, [sl]
 8008248:	781a      	ldrb	r2, [r3, #0]
 800824a:	3201      	adds	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e7a0      	b.n	8008192 <_dtoa_r+0x62a>
 8008250:	2200      	movs	r2, #0
 8008252:	4b6f      	ldr	r3, [pc, #444]	@ (8008410 <_dtoa_r+0x8a8>)
 8008254:	f7f8 f940 	bl	80004d8 <__aeabi_dmul>
 8008258:	2200      	movs	r2, #0
 800825a:	2300      	movs	r3, #0
 800825c:	4604      	mov	r4, r0
 800825e:	460d      	mov	r5, r1
 8008260:	f7f8 fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8008264:	2800      	cmp	r0, #0
 8008266:	d09f      	beq.n	80081a8 <_dtoa_r+0x640>
 8008268:	e7d1      	b.n	800820e <_dtoa_r+0x6a6>
 800826a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800826c:	2a00      	cmp	r2, #0
 800826e:	f000 80ea 	beq.w	8008446 <_dtoa_r+0x8de>
 8008272:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008274:	2a01      	cmp	r2, #1
 8008276:	f300 80cd 	bgt.w	8008414 <_dtoa_r+0x8ac>
 800827a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800827c:	2a00      	cmp	r2, #0
 800827e:	f000 80c1 	beq.w	8008404 <_dtoa_r+0x89c>
 8008282:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008286:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008288:	9e04      	ldr	r6, [sp, #16]
 800828a:	9a04      	ldr	r2, [sp, #16]
 800828c:	2101      	movs	r1, #1
 800828e:	441a      	add	r2, r3
 8008290:	9204      	str	r2, [sp, #16]
 8008292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008294:	4648      	mov	r0, r9
 8008296:	441a      	add	r2, r3
 8008298:	9209      	str	r2, [sp, #36]	@ 0x24
 800829a:	f000 fc2b 	bl	8008af4 <__i2b>
 800829e:	4605      	mov	r5, r0
 80082a0:	b166      	cbz	r6, 80082bc <_dtoa_r+0x754>
 80082a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dd09      	ble.n	80082bc <_dtoa_r+0x754>
 80082a8:	42b3      	cmp	r3, r6
 80082aa:	bfa8      	it	ge
 80082ac:	4633      	movge	r3, r6
 80082ae:	9a04      	ldr	r2, [sp, #16]
 80082b0:	1af6      	subs	r6, r6, r3
 80082b2:	1ad2      	subs	r2, r2, r3
 80082b4:	9204      	str	r2, [sp, #16]
 80082b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80082bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082be:	b30b      	cbz	r3, 8008304 <_dtoa_r+0x79c>
 80082c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 80c6 	beq.w	8008454 <_dtoa_r+0x8ec>
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	f000 80c0 	beq.w	800844e <_dtoa_r+0x8e6>
 80082ce:	4629      	mov	r1, r5
 80082d0:	4622      	mov	r2, r4
 80082d2:	4648      	mov	r0, r9
 80082d4:	f000 fcc6 	bl	8008c64 <__pow5mult>
 80082d8:	9a03      	ldr	r2, [sp, #12]
 80082da:	4601      	mov	r1, r0
 80082dc:	4605      	mov	r5, r0
 80082de:	4648      	mov	r0, r9
 80082e0:	f000 fc1e 	bl	8008b20 <__multiply>
 80082e4:	9903      	ldr	r1, [sp, #12]
 80082e6:	4680      	mov	r8, r0
 80082e8:	4648      	mov	r0, r9
 80082ea:	f000 fb4f 	bl	800898c <_Bfree>
 80082ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f0:	1b1b      	subs	r3, r3, r4
 80082f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80082f4:	f000 80b1 	beq.w	800845a <_dtoa_r+0x8f2>
 80082f8:	4641      	mov	r1, r8
 80082fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082fc:	4648      	mov	r0, r9
 80082fe:	f000 fcb1 	bl	8008c64 <__pow5mult>
 8008302:	9003      	str	r0, [sp, #12]
 8008304:	2101      	movs	r1, #1
 8008306:	4648      	mov	r0, r9
 8008308:	f000 fbf4 	bl	8008af4 <__i2b>
 800830c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800830e:	4604      	mov	r4, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 81d8 	beq.w	80086c6 <_dtoa_r+0xb5e>
 8008316:	461a      	mov	r2, r3
 8008318:	4601      	mov	r1, r0
 800831a:	4648      	mov	r0, r9
 800831c:	f000 fca2 	bl	8008c64 <__pow5mult>
 8008320:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008322:	4604      	mov	r4, r0
 8008324:	2b01      	cmp	r3, #1
 8008326:	f300 809f 	bgt.w	8008468 <_dtoa_r+0x900>
 800832a:	9b06      	ldr	r3, [sp, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 8097 	bne.w	8008460 <_dtoa_r+0x8f8>
 8008332:	9b07      	ldr	r3, [sp, #28]
 8008334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 8093 	bne.w	8008464 <_dtoa_r+0x8fc>
 800833e:	9b07      	ldr	r3, [sp, #28]
 8008340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008344:	0d1b      	lsrs	r3, r3, #20
 8008346:	051b      	lsls	r3, r3, #20
 8008348:	b133      	cbz	r3, 8008358 <_dtoa_r+0x7f0>
 800834a:	9b04      	ldr	r3, [sp, #16]
 800834c:	3301      	adds	r3, #1
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008352:	3301      	adds	r3, #1
 8008354:	9309      	str	r3, [sp, #36]	@ 0x24
 8008356:	2301      	movs	r3, #1
 8008358:	930a      	str	r3, [sp, #40]	@ 0x28
 800835a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 81b8 	beq.w	80086d2 <_dtoa_r+0xb6a>
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008368:	6918      	ldr	r0, [r3, #16]
 800836a:	f000 fb77 	bl	8008a5c <__hi0bits>
 800836e:	f1c0 0020 	rsb	r0, r0, #32
 8008372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008374:	4418      	add	r0, r3
 8008376:	f010 001f 	ands.w	r0, r0, #31
 800837a:	f000 8082 	beq.w	8008482 <_dtoa_r+0x91a>
 800837e:	f1c0 0320 	rsb	r3, r0, #32
 8008382:	2b04      	cmp	r3, #4
 8008384:	dd73      	ble.n	800846e <_dtoa_r+0x906>
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	f1c0 001c 	rsb	r0, r0, #28
 800838c:	4403      	add	r3, r0
 800838e:	9304      	str	r3, [sp, #16]
 8008390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008392:	4406      	add	r6, r0
 8008394:	4403      	add	r3, r0
 8008396:	9309      	str	r3, [sp, #36]	@ 0x24
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	dd05      	ble.n	80083aa <_dtoa_r+0x842>
 800839e:	461a      	mov	r2, r3
 80083a0:	4648      	mov	r0, r9
 80083a2:	9903      	ldr	r1, [sp, #12]
 80083a4:	f000 fcb8 	bl	8008d18 <__lshift>
 80083a8:	9003      	str	r0, [sp, #12]
 80083aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	dd05      	ble.n	80083bc <_dtoa_r+0x854>
 80083b0:	4621      	mov	r1, r4
 80083b2:	461a      	mov	r2, r3
 80083b4:	4648      	mov	r0, r9
 80083b6:	f000 fcaf 	bl	8008d18 <__lshift>
 80083ba:	4604      	mov	r4, r0
 80083bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d061      	beq.n	8008486 <_dtoa_r+0x91e>
 80083c2:	4621      	mov	r1, r4
 80083c4:	9803      	ldr	r0, [sp, #12]
 80083c6:	f000 fd13 	bl	8008df0 <__mcmp>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	da5b      	bge.n	8008486 <_dtoa_r+0x91e>
 80083ce:	2300      	movs	r3, #0
 80083d0:	220a      	movs	r2, #10
 80083d2:	4648      	mov	r0, r9
 80083d4:	9903      	ldr	r1, [sp, #12]
 80083d6:	f000 fafb 	bl	80089d0 <__multadd>
 80083da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083dc:	f107 38ff 	add.w	r8, r7, #4294967295
 80083e0:	9003      	str	r0, [sp, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 8177 	beq.w	80086d6 <_dtoa_r+0xb6e>
 80083e8:	4629      	mov	r1, r5
 80083ea:	2300      	movs	r3, #0
 80083ec:	220a      	movs	r2, #10
 80083ee:	4648      	mov	r0, r9
 80083f0:	f000 faee 	bl	80089d0 <__multadd>
 80083f4:	f1bb 0f00 	cmp.w	fp, #0
 80083f8:	4605      	mov	r5, r0
 80083fa:	dc6f      	bgt.n	80084dc <_dtoa_r+0x974>
 80083fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083fe:	2b02      	cmp	r3, #2
 8008400:	dc49      	bgt.n	8008496 <_dtoa_r+0x92e>
 8008402:	e06b      	b.n	80084dc <_dtoa_r+0x974>
 8008404:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008406:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800840a:	e73c      	b.n	8008286 <_dtoa_r+0x71e>
 800840c:	3fe00000 	.word	0x3fe00000
 8008410:	40240000 	.word	0x40240000
 8008414:	9b08      	ldr	r3, [sp, #32]
 8008416:	1e5c      	subs	r4, r3, #1
 8008418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800841a:	42a3      	cmp	r3, r4
 800841c:	db09      	blt.n	8008432 <_dtoa_r+0x8ca>
 800841e:	1b1c      	subs	r4, r3, r4
 8008420:	9b08      	ldr	r3, [sp, #32]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f6bf af30 	bge.w	8008288 <_dtoa_r+0x720>
 8008428:	9b04      	ldr	r3, [sp, #16]
 800842a:	9a08      	ldr	r2, [sp, #32]
 800842c:	1a9e      	subs	r6, r3, r2
 800842e:	2300      	movs	r3, #0
 8008430:	e72b      	b.n	800828a <_dtoa_r+0x722>
 8008432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008434:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008436:	1ae3      	subs	r3, r4, r3
 8008438:	441a      	add	r2, r3
 800843a:	940a      	str	r4, [sp, #40]	@ 0x28
 800843c:	9e04      	ldr	r6, [sp, #16]
 800843e:	2400      	movs	r4, #0
 8008440:	9b08      	ldr	r3, [sp, #32]
 8008442:	920e      	str	r2, [sp, #56]	@ 0x38
 8008444:	e721      	b.n	800828a <_dtoa_r+0x722>
 8008446:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008448:	9e04      	ldr	r6, [sp, #16]
 800844a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800844c:	e728      	b.n	80082a0 <_dtoa_r+0x738>
 800844e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008452:	e751      	b.n	80082f8 <_dtoa_r+0x790>
 8008454:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008456:	9903      	ldr	r1, [sp, #12]
 8008458:	e750      	b.n	80082fc <_dtoa_r+0x794>
 800845a:	f8cd 800c 	str.w	r8, [sp, #12]
 800845e:	e751      	b.n	8008304 <_dtoa_r+0x79c>
 8008460:	2300      	movs	r3, #0
 8008462:	e779      	b.n	8008358 <_dtoa_r+0x7f0>
 8008464:	9b06      	ldr	r3, [sp, #24]
 8008466:	e777      	b.n	8008358 <_dtoa_r+0x7f0>
 8008468:	2300      	movs	r3, #0
 800846a:	930a      	str	r3, [sp, #40]	@ 0x28
 800846c:	e779      	b.n	8008362 <_dtoa_r+0x7fa>
 800846e:	d093      	beq.n	8008398 <_dtoa_r+0x830>
 8008470:	9a04      	ldr	r2, [sp, #16]
 8008472:	331c      	adds	r3, #28
 8008474:	441a      	add	r2, r3
 8008476:	9204      	str	r2, [sp, #16]
 8008478:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800847a:	441e      	add	r6, r3
 800847c:	441a      	add	r2, r3
 800847e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008480:	e78a      	b.n	8008398 <_dtoa_r+0x830>
 8008482:	4603      	mov	r3, r0
 8008484:	e7f4      	b.n	8008470 <_dtoa_r+0x908>
 8008486:	9b08      	ldr	r3, [sp, #32]
 8008488:	46b8      	mov	r8, r7
 800848a:	2b00      	cmp	r3, #0
 800848c:	dc20      	bgt.n	80084d0 <_dtoa_r+0x968>
 800848e:	469b      	mov	fp, r3
 8008490:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008492:	2b02      	cmp	r3, #2
 8008494:	dd1e      	ble.n	80084d4 <_dtoa_r+0x96c>
 8008496:	f1bb 0f00 	cmp.w	fp, #0
 800849a:	f47f adb1 	bne.w	8008000 <_dtoa_r+0x498>
 800849e:	4621      	mov	r1, r4
 80084a0:	465b      	mov	r3, fp
 80084a2:	2205      	movs	r2, #5
 80084a4:	4648      	mov	r0, r9
 80084a6:	f000 fa93 	bl	80089d0 <__multadd>
 80084aa:	4601      	mov	r1, r0
 80084ac:	4604      	mov	r4, r0
 80084ae:	9803      	ldr	r0, [sp, #12]
 80084b0:	f000 fc9e 	bl	8008df0 <__mcmp>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f77f ada3 	ble.w	8008000 <_dtoa_r+0x498>
 80084ba:	4656      	mov	r6, sl
 80084bc:	2331      	movs	r3, #49	@ 0x31
 80084be:	f108 0801 	add.w	r8, r8, #1
 80084c2:	f806 3b01 	strb.w	r3, [r6], #1
 80084c6:	e59f      	b.n	8008008 <_dtoa_r+0x4a0>
 80084c8:	46b8      	mov	r8, r7
 80084ca:	9c08      	ldr	r4, [sp, #32]
 80084cc:	4625      	mov	r5, r4
 80084ce:	e7f4      	b.n	80084ba <_dtoa_r+0x952>
 80084d0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80084d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8101 	beq.w	80086de <_dtoa_r+0xb76>
 80084dc:	2e00      	cmp	r6, #0
 80084de:	dd05      	ble.n	80084ec <_dtoa_r+0x984>
 80084e0:	4629      	mov	r1, r5
 80084e2:	4632      	mov	r2, r6
 80084e4:	4648      	mov	r0, r9
 80084e6:	f000 fc17 	bl	8008d18 <__lshift>
 80084ea:	4605      	mov	r5, r0
 80084ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d05c      	beq.n	80085ac <_dtoa_r+0xa44>
 80084f2:	4648      	mov	r0, r9
 80084f4:	6869      	ldr	r1, [r5, #4]
 80084f6:	f000 fa09 	bl	800890c <_Balloc>
 80084fa:	4606      	mov	r6, r0
 80084fc:	b928      	cbnz	r0, 800850a <_dtoa_r+0x9a2>
 80084fe:	4602      	mov	r2, r0
 8008500:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008504:	4b80      	ldr	r3, [pc, #512]	@ (8008708 <_dtoa_r+0xba0>)
 8008506:	f7ff bb43 	b.w	8007b90 <_dtoa_r+0x28>
 800850a:	692a      	ldr	r2, [r5, #16]
 800850c:	f105 010c 	add.w	r1, r5, #12
 8008510:	3202      	adds	r2, #2
 8008512:	0092      	lsls	r2, r2, #2
 8008514:	300c      	adds	r0, #12
 8008516:	f000 ff9d 	bl	8009454 <memcpy>
 800851a:	2201      	movs	r2, #1
 800851c:	4631      	mov	r1, r6
 800851e:	4648      	mov	r0, r9
 8008520:	f000 fbfa 	bl	8008d18 <__lshift>
 8008524:	462f      	mov	r7, r5
 8008526:	4605      	mov	r5, r0
 8008528:	f10a 0301 	add.w	r3, sl, #1
 800852c:	9304      	str	r3, [sp, #16]
 800852e:	eb0a 030b 	add.w	r3, sl, fp
 8008532:	930a      	str	r3, [sp, #40]	@ 0x28
 8008534:	9b06      	ldr	r3, [sp, #24]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	9309      	str	r3, [sp, #36]	@ 0x24
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	4621      	mov	r1, r4
 8008540:	9803      	ldr	r0, [sp, #12]
 8008542:	f103 3bff 	add.w	fp, r3, #4294967295
 8008546:	f7ff fa86 	bl	8007a56 <quorem>
 800854a:	4603      	mov	r3, r0
 800854c:	4639      	mov	r1, r7
 800854e:	3330      	adds	r3, #48	@ 0x30
 8008550:	9006      	str	r0, [sp, #24]
 8008552:	9803      	ldr	r0, [sp, #12]
 8008554:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008556:	f000 fc4b 	bl	8008df0 <__mcmp>
 800855a:	462a      	mov	r2, r5
 800855c:	9008      	str	r0, [sp, #32]
 800855e:	4621      	mov	r1, r4
 8008560:	4648      	mov	r0, r9
 8008562:	f000 fc61 	bl	8008e28 <__mdiff>
 8008566:	68c2      	ldr	r2, [r0, #12]
 8008568:	4606      	mov	r6, r0
 800856a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800856c:	bb02      	cbnz	r2, 80085b0 <_dtoa_r+0xa48>
 800856e:	4601      	mov	r1, r0
 8008570:	9803      	ldr	r0, [sp, #12]
 8008572:	f000 fc3d 	bl	8008df0 <__mcmp>
 8008576:	4602      	mov	r2, r0
 8008578:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800857a:	4631      	mov	r1, r6
 800857c:	4648      	mov	r0, r9
 800857e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8008582:	f000 fa03 	bl	800898c <_Bfree>
 8008586:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008588:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800858a:	9e04      	ldr	r6, [sp, #16]
 800858c:	ea42 0103 	orr.w	r1, r2, r3
 8008590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008592:	4319      	orrs	r1, r3
 8008594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008596:	d10d      	bne.n	80085b4 <_dtoa_r+0xa4c>
 8008598:	2b39      	cmp	r3, #57	@ 0x39
 800859a:	d027      	beq.n	80085ec <_dtoa_r+0xa84>
 800859c:	9a08      	ldr	r2, [sp, #32]
 800859e:	2a00      	cmp	r2, #0
 80085a0:	dd01      	ble.n	80085a6 <_dtoa_r+0xa3e>
 80085a2:	9b06      	ldr	r3, [sp, #24]
 80085a4:	3331      	adds	r3, #49	@ 0x31
 80085a6:	f88b 3000 	strb.w	r3, [fp]
 80085aa:	e52e      	b.n	800800a <_dtoa_r+0x4a2>
 80085ac:	4628      	mov	r0, r5
 80085ae:	e7b9      	b.n	8008524 <_dtoa_r+0x9bc>
 80085b0:	2201      	movs	r2, #1
 80085b2:	e7e2      	b.n	800857a <_dtoa_r+0xa12>
 80085b4:	9908      	ldr	r1, [sp, #32]
 80085b6:	2900      	cmp	r1, #0
 80085b8:	db04      	blt.n	80085c4 <_dtoa_r+0xa5c>
 80085ba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80085bc:	4301      	orrs	r1, r0
 80085be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085c0:	4301      	orrs	r1, r0
 80085c2:	d120      	bne.n	8008606 <_dtoa_r+0xa9e>
 80085c4:	2a00      	cmp	r2, #0
 80085c6:	ddee      	ble.n	80085a6 <_dtoa_r+0xa3e>
 80085c8:	2201      	movs	r2, #1
 80085ca:	9903      	ldr	r1, [sp, #12]
 80085cc:	4648      	mov	r0, r9
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	f000 fba2 	bl	8008d18 <__lshift>
 80085d4:	4621      	mov	r1, r4
 80085d6:	9003      	str	r0, [sp, #12]
 80085d8:	f000 fc0a 	bl	8008df0 <__mcmp>
 80085dc:	2800      	cmp	r0, #0
 80085de:	9b04      	ldr	r3, [sp, #16]
 80085e0:	dc02      	bgt.n	80085e8 <_dtoa_r+0xa80>
 80085e2:	d1e0      	bne.n	80085a6 <_dtoa_r+0xa3e>
 80085e4:	07da      	lsls	r2, r3, #31
 80085e6:	d5de      	bpl.n	80085a6 <_dtoa_r+0xa3e>
 80085e8:	2b39      	cmp	r3, #57	@ 0x39
 80085ea:	d1da      	bne.n	80085a2 <_dtoa_r+0xa3a>
 80085ec:	2339      	movs	r3, #57	@ 0x39
 80085ee:	f88b 3000 	strb.w	r3, [fp]
 80085f2:	4633      	mov	r3, r6
 80085f4:	461e      	mov	r6, r3
 80085f6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	2a39      	cmp	r2, #57	@ 0x39
 80085fe:	d04e      	beq.n	800869e <_dtoa_r+0xb36>
 8008600:	3201      	adds	r2, #1
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	e501      	b.n	800800a <_dtoa_r+0x4a2>
 8008606:	2a00      	cmp	r2, #0
 8008608:	dd03      	ble.n	8008612 <_dtoa_r+0xaaa>
 800860a:	2b39      	cmp	r3, #57	@ 0x39
 800860c:	d0ee      	beq.n	80085ec <_dtoa_r+0xa84>
 800860e:	3301      	adds	r3, #1
 8008610:	e7c9      	b.n	80085a6 <_dtoa_r+0xa3e>
 8008612:	9a04      	ldr	r2, [sp, #16]
 8008614:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008616:	f802 3c01 	strb.w	r3, [r2, #-1]
 800861a:	428a      	cmp	r2, r1
 800861c:	d028      	beq.n	8008670 <_dtoa_r+0xb08>
 800861e:	2300      	movs	r3, #0
 8008620:	220a      	movs	r2, #10
 8008622:	9903      	ldr	r1, [sp, #12]
 8008624:	4648      	mov	r0, r9
 8008626:	f000 f9d3 	bl	80089d0 <__multadd>
 800862a:	42af      	cmp	r7, r5
 800862c:	9003      	str	r0, [sp, #12]
 800862e:	f04f 0300 	mov.w	r3, #0
 8008632:	f04f 020a 	mov.w	r2, #10
 8008636:	4639      	mov	r1, r7
 8008638:	4648      	mov	r0, r9
 800863a:	d107      	bne.n	800864c <_dtoa_r+0xae4>
 800863c:	f000 f9c8 	bl	80089d0 <__multadd>
 8008640:	4607      	mov	r7, r0
 8008642:	4605      	mov	r5, r0
 8008644:	9b04      	ldr	r3, [sp, #16]
 8008646:	3301      	adds	r3, #1
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	e777      	b.n	800853c <_dtoa_r+0x9d4>
 800864c:	f000 f9c0 	bl	80089d0 <__multadd>
 8008650:	4629      	mov	r1, r5
 8008652:	4607      	mov	r7, r0
 8008654:	2300      	movs	r3, #0
 8008656:	220a      	movs	r2, #10
 8008658:	4648      	mov	r0, r9
 800865a:	f000 f9b9 	bl	80089d0 <__multadd>
 800865e:	4605      	mov	r5, r0
 8008660:	e7f0      	b.n	8008644 <_dtoa_r+0xadc>
 8008662:	f1bb 0f00 	cmp.w	fp, #0
 8008666:	bfcc      	ite	gt
 8008668:	465e      	movgt	r6, fp
 800866a:	2601      	movle	r6, #1
 800866c:	2700      	movs	r7, #0
 800866e:	4456      	add	r6, sl
 8008670:	2201      	movs	r2, #1
 8008672:	9903      	ldr	r1, [sp, #12]
 8008674:	4648      	mov	r0, r9
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	f000 fb4e 	bl	8008d18 <__lshift>
 800867c:	4621      	mov	r1, r4
 800867e:	9003      	str	r0, [sp, #12]
 8008680:	f000 fbb6 	bl	8008df0 <__mcmp>
 8008684:	2800      	cmp	r0, #0
 8008686:	dcb4      	bgt.n	80085f2 <_dtoa_r+0xa8a>
 8008688:	d102      	bne.n	8008690 <_dtoa_r+0xb28>
 800868a:	9b04      	ldr	r3, [sp, #16]
 800868c:	07db      	lsls	r3, r3, #31
 800868e:	d4b0      	bmi.n	80085f2 <_dtoa_r+0xa8a>
 8008690:	4633      	mov	r3, r6
 8008692:	461e      	mov	r6, r3
 8008694:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008698:	2a30      	cmp	r2, #48	@ 0x30
 800869a:	d0fa      	beq.n	8008692 <_dtoa_r+0xb2a>
 800869c:	e4b5      	b.n	800800a <_dtoa_r+0x4a2>
 800869e:	459a      	cmp	sl, r3
 80086a0:	d1a8      	bne.n	80085f4 <_dtoa_r+0xa8c>
 80086a2:	2331      	movs	r3, #49	@ 0x31
 80086a4:	f108 0801 	add.w	r8, r8, #1
 80086a8:	f88a 3000 	strb.w	r3, [sl]
 80086ac:	e4ad      	b.n	800800a <_dtoa_r+0x4a2>
 80086ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80086b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800870c <_dtoa_r+0xba4>
 80086b4:	b11b      	cbz	r3, 80086be <_dtoa_r+0xb56>
 80086b6:	f10a 0308 	add.w	r3, sl, #8
 80086ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	4650      	mov	r0, sl
 80086c0:	b017      	add	sp, #92	@ 0x5c
 80086c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	f77f ae2e 	ble.w	800832a <_dtoa_r+0x7c2>
 80086ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086d2:	2001      	movs	r0, #1
 80086d4:	e64d      	b.n	8008372 <_dtoa_r+0x80a>
 80086d6:	f1bb 0f00 	cmp.w	fp, #0
 80086da:	f77f aed9 	ble.w	8008490 <_dtoa_r+0x928>
 80086de:	4656      	mov	r6, sl
 80086e0:	4621      	mov	r1, r4
 80086e2:	9803      	ldr	r0, [sp, #12]
 80086e4:	f7ff f9b7 	bl	8007a56 <quorem>
 80086e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80086ec:	f806 3b01 	strb.w	r3, [r6], #1
 80086f0:	eba6 020a 	sub.w	r2, r6, sl
 80086f4:	4593      	cmp	fp, r2
 80086f6:	ddb4      	ble.n	8008662 <_dtoa_r+0xafa>
 80086f8:	2300      	movs	r3, #0
 80086fa:	220a      	movs	r2, #10
 80086fc:	4648      	mov	r0, r9
 80086fe:	9903      	ldr	r1, [sp, #12]
 8008700:	f000 f966 	bl	80089d0 <__multadd>
 8008704:	9003      	str	r0, [sp, #12]
 8008706:	e7eb      	b.n	80086e0 <_dtoa_r+0xb78>
 8008708:	0800ba5e 	.word	0x0800ba5e
 800870c:	0800b9e2 	.word	0x0800b9e2

08008710 <_free_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4605      	mov	r5, r0
 8008714:	2900      	cmp	r1, #0
 8008716:	d040      	beq.n	800879a <_free_r+0x8a>
 8008718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800871c:	1f0c      	subs	r4, r1, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfb8      	it	lt
 8008722:	18e4      	addlt	r4, r4, r3
 8008724:	f000 f8e6 	bl	80088f4 <__malloc_lock>
 8008728:	4a1c      	ldr	r2, [pc, #112]	@ (800879c <_free_r+0x8c>)
 800872a:	6813      	ldr	r3, [r2, #0]
 800872c:	b933      	cbnz	r3, 800873c <_free_r+0x2c>
 800872e:	6063      	str	r3, [r4, #4]
 8008730:	6014      	str	r4, [r2, #0]
 8008732:	4628      	mov	r0, r5
 8008734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008738:	f000 b8e2 	b.w	8008900 <__malloc_unlock>
 800873c:	42a3      	cmp	r3, r4
 800873e:	d908      	bls.n	8008752 <_free_r+0x42>
 8008740:	6820      	ldr	r0, [r4, #0]
 8008742:	1821      	adds	r1, r4, r0
 8008744:	428b      	cmp	r3, r1
 8008746:	bf01      	itttt	eq
 8008748:	6819      	ldreq	r1, [r3, #0]
 800874a:	685b      	ldreq	r3, [r3, #4]
 800874c:	1809      	addeq	r1, r1, r0
 800874e:	6021      	streq	r1, [r4, #0]
 8008750:	e7ed      	b.n	800872e <_free_r+0x1e>
 8008752:	461a      	mov	r2, r3
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	b10b      	cbz	r3, 800875c <_free_r+0x4c>
 8008758:	42a3      	cmp	r3, r4
 800875a:	d9fa      	bls.n	8008752 <_free_r+0x42>
 800875c:	6811      	ldr	r1, [r2, #0]
 800875e:	1850      	adds	r0, r2, r1
 8008760:	42a0      	cmp	r0, r4
 8008762:	d10b      	bne.n	800877c <_free_r+0x6c>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	4401      	add	r1, r0
 8008768:	1850      	adds	r0, r2, r1
 800876a:	4283      	cmp	r3, r0
 800876c:	6011      	str	r1, [r2, #0]
 800876e:	d1e0      	bne.n	8008732 <_free_r+0x22>
 8008770:	6818      	ldr	r0, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	4408      	add	r0, r1
 8008776:	6010      	str	r0, [r2, #0]
 8008778:	6053      	str	r3, [r2, #4]
 800877a:	e7da      	b.n	8008732 <_free_r+0x22>
 800877c:	d902      	bls.n	8008784 <_free_r+0x74>
 800877e:	230c      	movs	r3, #12
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	e7d6      	b.n	8008732 <_free_r+0x22>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	1821      	adds	r1, r4, r0
 8008788:	428b      	cmp	r3, r1
 800878a:	bf01      	itttt	eq
 800878c:	6819      	ldreq	r1, [r3, #0]
 800878e:	685b      	ldreq	r3, [r3, #4]
 8008790:	1809      	addeq	r1, r1, r0
 8008792:	6021      	streq	r1, [r4, #0]
 8008794:	6063      	str	r3, [r4, #4]
 8008796:	6054      	str	r4, [r2, #4]
 8008798:	e7cb      	b.n	8008732 <_free_r+0x22>
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	200007c4 	.word	0x200007c4

080087a0 <malloc>:
 80087a0:	4b02      	ldr	r3, [pc, #8]	@ (80087ac <malloc+0xc>)
 80087a2:	4601      	mov	r1, r0
 80087a4:	6818      	ldr	r0, [r3, #0]
 80087a6:	f000 b825 	b.w	80087f4 <_malloc_r>
 80087aa:	bf00      	nop
 80087ac:	2000004c 	.word	0x2000004c

080087b0 <sbrk_aligned>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	4e0f      	ldr	r6, [pc, #60]	@ (80087f0 <sbrk_aligned+0x40>)
 80087b4:	460c      	mov	r4, r1
 80087b6:	6831      	ldr	r1, [r6, #0]
 80087b8:	4605      	mov	r5, r0
 80087ba:	b911      	cbnz	r1, 80087c2 <sbrk_aligned+0x12>
 80087bc:	f000 fe3a 	bl	8009434 <_sbrk_r>
 80087c0:	6030      	str	r0, [r6, #0]
 80087c2:	4621      	mov	r1, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 fe35 	bl	8009434 <_sbrk_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d103      	bne.n	80087d6 <sbrk_aligned+0x26>
 80087ce:	f04f 34ff 	mov.w	r4, #4294967295
 80087d2:	4620      	mov	r0, r4
 80087d4:	bd70      	pop	{r4, r5, r6, pc}
 80087d6:	1cc4      	adds	r4, r0, #3
 80087d8:	f024 0403 	bic.w	r4, r4, #3
 80087dc:	42a0      	cmp	r0, r4
 80087de:	d0f8      	beq.n	80087d2 <sbrk_aligned+0x22>
 80087e0:	1a21      	subs	r1, r4, r0
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 fe26 	bl	8009434 <_sbrk_r>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d1f2      	bne.n	80087d2 <sbrk_aligned+0x22>
 80087ec:	e7ef      	b.n	80087ce <sbrk_aligned+0x1e>
 80087ee:	bf00      	nop
 80087f0:	200007c0 	.word	0x200007c0

080087f4 <_malloc_r>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	1ccd      	adds	r5, r1, #3
 80087fa:	f025 0503 	bic.w	r5, r5, #3
 80087fe:	3508      	adds	r5, #8
 8008800:	2d0c      	cmp	r5, #12
 8008802:	bf38      	it	cc
 8008804:	250c      	movcc	r5, #12
 8008806:	2d00      	cmp	r5, #0
 8008808:	4606      	mov	r6, r0
 800880a:	db01      	blt.n	8008810 <_malloc_r+0x1c>
 800880c:	42a9      	cmp	r1, r5
 800880e:	d904      	bls.n	800881a <_malloc_r+0x26>
 8008810:	230c      	movs	r3, #12
 8008812:	6033      	str	r3, [r6, #0]
 8008814:	2000      	movs	r0, #0
 8008816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088f0 <_malloc_r+0xfc>
 800881e:	f000 f869 	bl	80088f4 <__malloc_lock>
 8008822:	f8d8 3000 	ldr.w	r3, [r8]
 8008826:	461c      	mov	r4, r3
 8008828:	bb44      	cbnz	r4, 800887c <_malloc_r+0x88>
 800882a:	4629      	mov	r1, r5
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff ffbf 	bl	80087b0 <sbrk_aligned>
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	4604      	mov	r4, r0
 8008836:	d158      	bne.n	80088ea <_malloc_r+0xf6>
 8008838:	f8d8 4000 	ldr.w	r4, [r8]
 800883c:	4627      	mov	r7, r4
 800883e:	2f00      	cmp	r7, #0
 8008840:	d143      	bne.n	80088ca <_malloc_r+0xd6>
 8008842:	2c00      	cmp	r4, #0
 8008844:	d04b      	beq.n	80088de <_malloc_r+0xea>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	4639      	mov	r1, r7
 800884a:	4630      	mov	r0, r6
 800884c:	eb04 0903 	add.w	r9, r4, r3
 8008850:	f000 fdf0 	bl	8009434 <_sbrk_r>
 8008854:	4581      	cmp	r9, r0
 8008856:	d142      	bne.n	80088de <_malloc_r+0xea>
 8008858:	6821      	ldr	r1, [r4, #0]
 800885a:	4630      	mov	r0, r6
 800885c:	1a6d      	subs	r5, r5, r1
 800885e:	4629      	mov	r1, r5
 8008860:	f7ff ffa6 	bl	80087b0 <sbrk_aligned>
 8008864:	3001      	adds	r0, #1
 8008866:	d03a      	beq.n	80088de <_malloc_r+0xea>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	442b      	add	r3, r5
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	f8d8 3000 	ldr.w	r3, [r8]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	bb62      	cbnz	r2, 80088d0 <_malloc_r+0xdc>
 8008876:	f8c8 7000 	str.w	r7, [r8]
 800887a:	e00f      	b.n	800889c <_malloc_r+0xa8>
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	1b52      	subs	r2, r2, r5
 8008880:	d420      	bmi.n	80088c4 <_malloc_r+0xd0>
 8008882:	2a0b      	cmp	r2, #11
 8008884:	d917      	bls.n	80088b6 <_malloc_r+0xc2>
 8008886:	1961      	adds	r1, r4, r5
 8008888:	42a3      	cmp	r3, r4
 800888a:	6025      	str	r5, [r4, #0]
 800888c:	bf18      	it	ne
 800888e:	6059      	strne	r1, [r3, #4]
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	bf08      	it	eq
 8008894:	f8c8 1000 	streq.w	r1, [r8]
 8008898:	5162      	str	r2, [r4, r5]
 800889a:	604b      	str	r3, [r1, #4]
 800889c:	4630      	mov	r0, r6
 800889e:	f000 f82f 	bl	8008900 <__malloc_unlock>
 80088a2:	f104 000b 	add.w	r0, r4, #11
 80088a6:	1d23      	adds	r3, r4, #4
 80088a8:	f020 0007 	bic.w	r0, r0, #7
 80088ac:	1ac2      	subs	r2, r0, r3
 80088ae:	bf1c      	itt	ne
 80088b0:	1a1b      	subne	r3, r3, r0
 80088b2:	50a3      	strne	r3, [r4, r2]
 80088b4:	e7af      	b.n	8008816 <_malloc_r+0x22>
 80088b6:	6862      	ldr	r2, [r4, #4]
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	bf0c      	ite	eq
 80088bc:	f8c8 2000 	streq.w	r2, [r8]
 80088c0:	605a      	strne	r2, [r3, #4]
 80088c2:	e7eb      	b.n	800889c <_malloc_r+0xa8>
 80088c4:	4623      	mov	r3, r4
 80088c6:	6864      	ldr	r4, [r4, #4]
 80088c8:	e7ae      	b.n	8008828 <_malloc_r+0x34>
 80088ca:	463c      	mov	r4, r7
 80088cc:	687f      	ldr	r7, [r7, #4]
 80088ce:	e7b6      	b.n	800883e <_malloc_r+0x4a>
 80088d0:	461a      	mov	r2, r3
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d1fb      	bne.n	80088d0 <_malloc_r+0xdc>
 80088d8:	2300      	movs	r3, #0
 80088da:	6053      	str	r3, [r2, #4]
 80088dc:	e7de      	b.n	800889c <_malloc_r+0xa8>
 80088de:	230c      	movs	r3, #12
 80088e0:	4630      	mov	r0, r6
 80088e2:	6033      	str	r3, [r6, #0]
 80088e4:	f000 f80c 	bl	8008900 <__malloc_unlock>
 80088e8:	e794      	b.n	8008814 <_malloc_r+0x20>
 80088ea:	6005      	str	r5, [r0, #0]
 80088ec:	e7d6      	b.n	800889c <_malloc_r+0xa8>
 80088ee:	bf00      	nop
 80088f0:	200007c4 	.word	0x200007c4

080088f4 <__malloc_lock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	@ (80088fc <__malloc_lock+0x8>)
 80088f6:	f7ff b89e 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 80088fa:	bf00      	nop
 80088fc:	200007bc 	.word	0x200007bc

08008900 <__malloc_unlock>:
 8008900:	4801      	ldr	r0, [pc, #4]	@ (8008908 <__malloc_unlock+0x8>)
 8008902:	f7ff b899 	b.w	8007a38 <__retarget_lock_release_recursive>
 8008906:	bf00      	nop
 8008908:	200007bc 	.word	0x200007bc

0800890c <_Balloc>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	69c6      	ldr	r6, [r0, #28]
 8008910:	4604      	mov	r4, r0
 8008912:	460d      	mov	r5, r1
 8008914:	b976      	cbnz	r6, 8008934 <_Balloc+0x28>
 8008916:	2010      	movs	r0, #16
 8008918:	f7ff ff42 	bl	80087a0 <malloc>
 800891c:	4602      	mov	r2, r0
 800891e:	61e0      	str	r0, [r4, #28]
 8008920:	b920      	cbnz	r0, 800892c <_Balloc+0x20>
 8008922:	216b      	movs	r1, #107	@ 0x6b
 8008924:	4b17      	ldr	r3, [pc, #92]	@ (8008984 <_Balloc+0x78>)
 8008926:	4818      	ldr	r0, [pc, #96]	@ (8008988 <_Balloc+0x7c>)
 8008928:	f000 fda2 	bl	8009470 <__assert_func>
 800892c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008930:	6006      	str	r6, [r0, #0]
 8008932:	60c6      	str	r6, [r0, #12]
 8008934:	69e6      	ldr	r6, [r4, #28]
 8008936:	68f3      	ldr	r3, [r6, #12]
 8008938:	b183      	cbz	r3, 800895c <_Balloc+0x50>
 800893a:	69e3      	ldr	r3, [r4, #28]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008942:	b9b8      	cbnz	r0, 8008974 <_Balloc+0x68>
 8008944:	2101      	movs	r1, #1
 8008946:	fa01 f605 	lsl.w	r6, r1, r5
 800894a:	1d72      	adds	r2, r6, #5
 800894c:	4620      	mov	r0, r4
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	f000 fdac 	bl	80094ac <_calloc_r>
 8008954:	b160      	cbz	r0, 8008970 <_Balloc+0x64>
 8008956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800895a:	e00e      	b.n	800897a <_Balloc+0x6e>
 800895c:	2221      	movs	r2, #33	@ 0x21
 800895e:	2104      	movs	r1, #4
 8008960:	4620      	mov	r0, r4
 8008962:	f000 fda3 	bl	80094ac <_calloc_r>
 8008966:	69e3      	ldr	r3, [r4, #28]
 8008968:	60f0      	str	r0, [r6, #12]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e4      	bne.n	800893a <_Balloc+0x2e>
 8008970:	2000      	movs	r0, #0
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	6802      	ldr	r2, [r0, #0]
 8008976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800897a:	2300      	movs	r3, #0
 800897c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008980:	e7f7      	b.n	8008972 <_Balloc+0x66>
 8008982:	bf00      	nop
 8008984:	0800b9ef 	.word	0x0800b9ef
 8008988:	0800ba6f 	.word	0x0800ba6f

0800898c <_Bfree>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	69c6      	ldr	r6, [r0, #28]
 8008990:	4605      	mov	r5, r0
 8008992:	460c      	mov	r4, r1
 8008994:	b976      	cbnz	r6, 80089b4 <_Bfree+0x28>
 8008996:	2010      	movs	r0, #16
 8008998:	f7ff ff02 	bl	80087a0 <malloc>
 800899c:	4602      	mov	r2, r0
 800899e:	61e8      	str	r0, [r5, #28]
 80089a0:	b920      	cbnz	r0, 80089ac <_Bfree+0x20>
 80089a2:	218f      	movs	r1, #143	@ 0x8f
 80089a4:	4b08      	ldr	r3, [pc, #32]	@ (80089c8 <_Bfree+0x3c>)
 80089a6:	4809      	ldr	r0, [pc, #36]	@ (80089cc <_Bfree+0x40>)
 80089a8:	f000 fd62 	bl	8009470 <__assert_func>
 80089ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089b0:	6006      	str	r6, [r0, #0]
 80089b2:	60c6      	str	r6, [r0, #12]
 80089b4:	b13c      	cbz	r4, 80089c6 <_Bfree+0x3a>
 80089b6:	69eb      	ldr	r3, [r5, #28]
 80089b8:	6862      	ldr	r2, [r4, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089c0:	6021      	str	r1, [r4, #0]
 80089c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	0800b9ef 	.word	0x0800b9ef
 80089cc:	0800ba6f 	.word	0x0800ba6f

080089d0 <__multadd>:
 80089d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	4607      	mov	r7, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	461e      	mov	r6, r3
 80089da:	2000      	movs	r0, #0
 80089dc:	690d      	ldr	r5, [r1, #16]
 80089de:	f101 0c14 	add.w	ip, r1, #20
 80089e2:	f8dc 3000 	ldr.w	r3, [ip]
 80089e6:	3001      	adds	r0, #1
 80089e8:	b299      	uxth	r1, r3
 80089ea:	fb02 6101 	mla	r1, r2, r1, r6
 80089ee:	0c1e      	lsrs	r6, r3, #16
 80089f0:	0c0b      	lsrs	r3, r1, #16
 80089f2:	fb02 3306 	mla	r3, r2, r6, r3
 80089f6:	b289      	uxth	r1, r1
 80089f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089fc:	4285      	cmp	r5, r0
 80089fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a02:	f84c 1b04 	str.w	r1, [ip], #4
 8008a06:	dcec      	bgt.n	80089e2 <__multadd+0x12>
 8008a08:	b30e      	cbz	r6, 8008a4e <__multadd+0x7e>
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dc19      	bgt.n	8008a44 <__multadd+0x74>
 8008a10:	6861      	ldr	r1, [r4, #4]
 8008a12:	4638      	mov	r0, r7
 8008a14:	3101      	adds	r1, #1
 8008a16:	f7ff ff79 	bl	800890c <_Balloc>
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	b928      	cbnz	r0, 8008a2a <__multadd+0x5a>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	21ba      	movs	r1, #186	@ 0xba
 8008a22:	4b0c      	ldr	r3, [pc, #48]	@ (8008a54 <__multadd+0x84>)
 8008a24:	480c      	ldr	r0, [pc, #48]	@ (8008a58 <__multadd+0x88>)
 8008a26:	f000 fd23 	bl	8009470 <__assert_func>
 8008a2a:	6922      	ldr	r2, [r4, #16]
 8008a2c:	f104 010c 	add.w	r1, r4, #12
 8008a30:	3202      	adds	r2, #2
 8008a32:	0092      	lsls	r2, r2, #2
 8008a34:	300c      	adds	r0, #12
 8008a36:	f000 fd0d 	bl	8009454 <memcpy>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff ffa5 	bl	800898c <_Bfree>
 8008a42:	4644      	mov	r4, r8
 8008a44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a48:	3501      	adds	r5, #1
 8008a4a:	615e      	str	r6, [r3, #20]
 8008a4c:	6125      	str	r5, [r4, #16]
 8008a4e:	4620      	mov	r0, r4
 8008a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a54:	0800ba5e 	.word	0x0800ba5e
 8008a58:	0800ba6f 	.word	0x0800ba6f

08008a5c <__hi0bits>:
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a62:	bf3a      	itte	cc
 8008a64:	0403      	lslcc	r3, r0, #16
 8008a66:	2010      	movcc	r0, #16
 8008a68:	2000      	movcs	r0, #0
 8008a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a6e:	bf3c      	itt	cc
 8008a70:	021b      	lslcc	r3, r3, #8
 8008a72:	3008      	addcc	r0, #8
 8008a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a78:	bf3c      	itt	cc
 8008a7a:	011b      	lslcc	r3, r3, #4
 8008a7c:	3004      	addcc	r0, #4
 8008a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a82:	bf3c      	itt	cc
 8008a84:	009b      	lslcc	r3, r3, #2
 8008a86:	3002      	addcc	r0, #2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	db05      	blt.n	8008a98 <__hi0bits+0x3c>
 8008a8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a90:	f100 0001 	add.w	r0, r0, #1
 8008a94:	bf08      	it	eq
 8008a96:	2020      	moveq	r0, #32
 8008a98:	4770      	bx	lr

08008a9a <__lo0bits>:
 8008a9a:	6803      	ldr	r3, [r0, #0]
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	f013 0007 	ands.w	r0, r3, #7
 8008aa2:	d00b      	beq.n	8008abc <__lo0bits+0x22>
 8008aa4:	07d9      	lsls	r1, r3, #31
 8008aa6:	d421      	bmi.n	8008aec <__lo0bits+0x52>
 8008aa8:	0798      	lsls	r0, r3, #30
 8008aaa:	bf49      	itett	mi
 8008aac:	085b      	lsrmi	r3, r3, #1
 8008aae:	089b      	lsrpl	r3, r3, #2
 8008ab0:	2001      	movmi	r0, #1
 8008ab2:	6013      	strmi	r3, [r2, #0]
 8008ab4:	bf5c      	itt	pl
 8008ab6:	2002      	movpl	r0, #2
 8008ab8:	6013      	strpl	r3, [r2, #0]
 8008aba:	4770      	bx	lr
 8008abc:	b299      	uxth	r1, r3
 8008abe:	b909      	cbnz	r1, 8008ac4 <__lo0bits+0x2a>
 8008ac0:	2010      	movs	r0, #16
 8008ac2:	0c1b      	lsrs	r3, r3, #16
 8008ac4:	b2d9      	uxtb	r1, r3
 8008ac6:	b909      	cbnz	r1, 8008acc <__lo0bits+0x32>
 8008ac8:	3008      	adds	r0, #8
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	0719      	lsls	r1, r3, #28
 8008ace:	bf04      	itt	eq
 8008ad0:	091b      	lsreq	r3, r3, #4
 8008ad2:	3004      	addeq	r0, #4
 8008ad4:	0799      	lsls	r1, r3, #30
 8008ad6:	bf04      	itt	eq
 8008ad8:	089b      	lsreq	r3, r3, #2
 8008ada:	3002      	addeq	r0, #2
 8008adc:	07d9      	lsls	r1, r3, #31
 8008ade:	d403      	bmi.n	8008ae8 <__lo0bits+0x4e>
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	f100 0001 	add.w	r0, r0, #1
 8008ae6:	d003      	beq.n	8008af0 <__lo0bits+0x56>
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	4770      	bx	lr
 8008aec:	2000      	movs	r0, #0
 8008aee:	4770      	bx	lr
 8008af0:	2020      	movs	r0, #32
 8008af2:	4770      	bx	lr

08008af4 <__i2b>:
 8008af4:	b510      	push	{r4, lr}
 8008af6:	460c      	mov	r4, r1
 8008af8:	2101      	movs	r1, #1
 8008afa:	f7ff ff07 	bl	800890c <_Balloc>
 8008afe:	4602      	mov	r2, r0
 8008b00:	b928      	cbnz	r0, 8008b0e <__i2b+0x1a>
 8008b02:	f240 1145 	movw	r1, #325	@ 0x145
 8008b06:	4b04      	ldr	r3, [pc, #16]	@ (8008b18 <__i2b+0x24>)
 8008b08:	4804      	ldr	r0, [pc, #16]	@ (8008b1c <__i2b+0x28>)
 8008b0a:	f000 fcb1 	bl	8009470 <__assert_func>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	6144      	str	r4, [r0, #20]
 8008b12:	6103      	str	r3, [r0, #16]
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	bf00      	nop
 8008b18:	0800ba5e 	.word	0x0800ba5e
 8008b1c:	0800ba6f 	.word	0x0800ba6f

08008b20 <__multiply>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	4617      	mov	r7, r2
 8008b26:	690a      	ldr	r2, [r1, #16]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	4689      	mov	r9, r1
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	bfa2      	ittt	ge
 8008b30:	463b      	movge	r3, r7
 8008b32:	460f      	movge	r7, r1
 8008b34:	4699      	movge	r9, r3
 8008b36:	693d      	ldr	r5, [r7, #16]
 8008b38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	eb05 060a 	add.w	r6, r5, sl
 8008b44:	42b3      	cmp	r3, r6
 8008b46:	b085      	sub	sp, #20
 8008b48:	bfb8      	it	lt
 8008b4a:	3101      	addlt	r1, #1
 8008b4c:	f7ff fede 	bl	800890c <_Balloc>
 8008b50:	b930      	cbnz	r0, 8008b60 <__multiply+0x40>
 8008b52:	4602      	mov	r2, r0
 8008b54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b58:	4b40      	ldr	r3, [pc, #256]	@ (8008c5c <__multiply+0x13c>)
 8008b5a:	4841      	ldr	r0, [pc, #260]	@ (8008c60 <__multiply+0x140>)
 8008b5c:	f000 fc88 	bl	8009470 <__assert_func>
 8008b60:	f100 0414 	add.w	r4, r0, #20
 8008b64:	4623      	mov	r3, r4
 8008b66:	2200      	movs	r2, #0
 8008b68:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008b6c:	4573      	cmp	r3, lr
 8008b6e:	d320      	bcc.n	8008bb2 <__multiply+0x92>
 8008b70:	f107 0814 	add.w	r8, r7, #20
 8008b74:	f109 0114 	add.w	r1, r9, #20
 8008b78:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008b7c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008b80:	9302      	str	r3, [sp, #8]
 8008b82:	1beb      	subs	r3, r5, r7
 8008b84:	3b15      	subs	r3, #21
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	3715      	adds	r7, #21
 8008b8e:	42bd      	cmp	r5, r7
 8008b90:	bf38      	it	cc
 8008b92:	2304      	movcc	r3, #4
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	9b02      	ldr	r3, [sp, #8]
 8008b98:	9103      	str	r1, [sp, #12]
 8008b9a:	428b      	cmp	r3, r1
 8008b9c:	d80c      	bhi.n	8008bb8 <__multiply+0x98>
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	dd03      	ble.n	8008baa <__multiply+0x8a>
 8008ba2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d055      	beq.n	8008c56 <__multiply+0x136>
 8008baa:	6106      	str	r6, [r0, #16]
 8008bac:	b005      	add	sp, #20
 8008bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb2:	f843 2b04 	str.w	r2, [r3], #4
 8008bb6:	e7d9      	b.n	8008b6c <__multiply+0x4c>
 8008bb8:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bbc:	f1ba 0f00 	cmp.w	sl, #0
 8008bc0:	d01f      	beq.n	8008c02 <__multiply+0xe2>
 8008bc2:	46c4      	mov	ip, r8
 8008bc4:	46a1      	mov	r9, r4
 8008bc6:	2700      	movs	r7, #0
 8008bc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008bcc:	f8d9 3000 	ldr.w	r3, [r9]
 8008bd0:	fa1f fb82 	uxth.w	fp, r2
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	fb0a 330b 	mla	r3, sl, fp, r3
 8008bda:	443b      	add	r3, r7
 8008bdc:	f8d9 7000 	ldr.w	r7, [r9]
 8008be0:	0c12      	lsrs	r2, r2, #16
 8008be2:	0c3f      	lsrs	r7, r7, #16
 8008be4:	fb0a 7202 	mla	r2, sl, r2, r7
 8008be8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bf2:	4565      	cmp	r5, ip
 8008bf4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008bf8:	f849 3b04 	str.w	r3, [r9], #4
 8008bfc:	d8e4      	bhi.n	8008bc8 <__multiply+0xa8>
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	50e7      	str	r7, [r4, r3]
 8008c02:	9b03      	ldr	r3, [sp, #12]
 8008c04:	3104      	adds	r1, #4
 8008c06:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c0a:	f1b9 0f00 	cmp.w	r9, #0
 8008c0e:	d020      	beq.n	8008c52 <__multiply+0x132>
 8008c10:	4647      	mov	r7, r8
 8008c12:	46a4      	mov	ip, r4
 8008c14:	f04f 0a00 	mov.w	sl, #0
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	f8b7 b000 	ldrh.w	fp, [r7]
 8008c1e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	fb09 220b 	mla	r2, r9, fp, r2
 8008c28:	4452      	add	r2, sl
 8008c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c2e:	f84c 3b04 	str.w	r3, [ip], #4
 8008c32:	f857 3b04 	ldr.w	r3, [r7], #4
 8008c36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c3a:	f8bc 3000 	ldrh.w	r3, [ip]
 8008c3e:	42bd      	cmp	r5, r7
 8008c40:	fb09 330a 	mla	r3, r9, sl, r3
 8008c44:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008c48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c4c:	d8e5      	bhi.n	8008c1a <__multiply+0xfa>
 8008c4e:	9a01      	ldr	r2, [sp, #4]
 8008c50:	50a3      	str	r3, [r4, r2]
 8008c52:	3404      	adds	r4, #4
 8008c54:	e79f      	b.n	8008b96 <__multiply+0x76>
 8008c56:	3e01      	subs	r6, #1
 8008c58:	e7a1      	b.n	8008b9e <__multiply+0x7e>
 8008c5a:	bf00      	nop
 8008c5c:	0800ba5e 	.word	0x0800ba5e
 8008c60:	0800ba6f 	.word	0x0800ba6f

08008c64 <__pow5mult>:
 8008c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c68:	4615      	mov	r5, r2
 8008c6a:	f012 0203 	ands.w	r2, r2, #3
 8008c6e:	4607      	mov	r7, r0
 8008c70:	460e      	mov	r6, r1
 8008c72:	d007      	beq.n	8008c84 <__pow5mult+0x20>
 8008c74:	4c25      	ldr	r4, [pc, #148]	@ (8008d0c <__pow5mult+0xa8>)
 8008c76:	3a01      	subs	r2, #1
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c7e:	f7ff fea7 	bl	80089d0 <__multadd>
 8008c82:	4606      	mov	r6, r0
 8008c84:	10ad      	asrs	r5, r5, #2
 8008c86:	d03d      	beq.n	8008d04 <__pow5mult+0xa0>
 8008c88:	69fc      	ldr	r4, [r7, #28]
 8008c8a:	b97c      	cbnz	r4, 8008cac <__pow5mult+0x48>
 8008c8c:	2010      	movs	r0, #16
 8008c8e:	f7ff fd87 	bl	80087a0 <malloc>
 8008c92:	4602      	mov	r2, r0
 8008c94:	61f8      	str	r0, [r7, #28]
 8008c96:	b928      	cbnz	r0, 8008ca4 <__pow5mult+0x40>
 8008c98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008d10 <__pow5mult+0xac>)
 8008c9e:	481d      	ldr	r0, [pc, #116]	@ (8008d14 <__pow5mult+0xb0>)
 8008ca0:	f000 fbe6 	bl	8009470 <__assert_func>
 8008ca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ca8:	6004      	str	r4, [r0, #0]
 8008caa:	60c4      	str	r4, [r0, #12]
 8008cac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cb4:	b94c      	cbnz	r4, 8008cca <__pow5mult+0x66>
 8008cb6:	f240 2171 	movw	r1, #625	@ 0x271
 8008cba:	4638      	mov	r0, r7
 8008cbc:	f7ff ff1a 	bl	8008af4 <__i2b>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	f04f 0900 	mov.w	r9, #0
 8008cce:	07eb      	lsls	r3, r5, #31
 8008cd0:	d50a      	bpl.n	8008ce8 <__pow5mult+0x84>
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f7ff ff22 	bl	8008b20 <__multiply>
 8008cdc:	4680      	mov	r8, r0
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f7ff fe53 	bl	800898c <_Bfree>
 8008ce6:	4646      	mov	r6, r8
 8008ce8:	106d      	asrs	r5, r5, #1
 8008cea:	d00b      	beq.n	8008d04 <__pow5mult+0xa0>
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	b938      	cbnz	r0, 8008d00 <__pow5mult+0x9c>
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	f7ff ff13 	bl	8008b20 <__multiply>
 8008cfa:	6020      	str	r0, [r4, #0]
 8008cfc:	f8c0 9000 	str.w	r9, [r0]
 8008d00:	4604      	mov	r4, r0
 8008d02:	e7e4      	b.n	8008cce <__pow5mult+0x6a>
 8008d04:	4630      	mov	r0, r6
 8008d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d0a:	bf00      	nop
 8008d0c:	0800bb20 	.word	0x0800bb20
 8008d10:	0800b9ef 	.word	0x0800b9ef
 8008d14:	0800ba6f 	.word	0x0800ba6f

08008d18 <__lshift>:
 8008d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	4607      	mov	r7, r0
 8008d20:	4691      	mov	r9, r2
 8008d22:	6923      	ldr	r3, [r4, #16]
 8008d24:	6849      	ldr	r1, [r1, #4]
 8008d26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d2a:	68a3      	ldr	r3, [r4, #8]
 8008d2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d30:	f108 0601 	add.w	r6, r8, #1
 8008d34:	42b3      	cmp	r3, r6
 8008d36:	db0b      	blt.n	8008d50 <__lshift+0x38>
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff fde7 	bl	800890c <_Balloc>
 8008d3e:	4605      	mov	r5, r0
 8008d40:	b948      	cbnz	r0, 8008d56 <__lshift+0x3e>
 8008d42:	4602      	mov	r2, r0
 8008d44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d48:	4b27      	ldr	r3, [pc, #156]	@ (8008de8 <__lshift+0xd0>)
 8008d4a:	4828      	ldr	r0, [pc, #160]	@ (8008dec <__lshift+0xd4>)
 8008d4c:	f000 fb90 	bl	8009470 <__assert_func>
 8008d50:	3101      	adds	r1, #1
 8008d52:	005b      	lsls	r3, r3, #1
 8008d54:	e7ee      	b.n	8008d34 <__lshift+0x1c>
 8008d56:	2300      	movs	r3, #0
 8008d58:	f100 0114 	add.w	r1, r0, #20
 8008d5c:	f100 0210 	add.w	r2, r0, #16
 8008d60:	4618      	mov	r0, r3
 8008d62:	4553      	cmp	r3, sl
 8008d64:	db33      	blt.n	8008dce <__lshift+0xb6>
 8008d66:	6920      	ldr	r0, [r4, #16]
 8008d68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d6c:	f104 0314 	add.w	r3, r4, #20
 8008d70:	f019 091f 	ands.w	r9, r9, #31
 8008d74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d7c:	d02b      	beq.n	8008dd6 <__lshift+0xbe>
 8008d7e:	468a      	mov	sl, r1
 8008d80:	2200      	movs	r2, #0
 8008d82:	f1c9 0e20 	rsb	lr, r9, #32
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	fa00 f009 	lsl.w	r0, r0, r9
 8008d8c:	4310      	orrs	r0, r2
 8008d8e:	f84a 0b04 	str.w	r0, [sl], #4
 8008d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d96:	459c      	cmp	ip, r3
 8008d98:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d9c:	d8f3      	bhi.n	8008d86 <__lshift+0x6e>
 8008d9e:	ebac 0304 	sub.w	r3, ip, r4
 8008da2:	3b15      	subs	r3, #21
 8008da4:	f023 0303 	bic.w	r3, r3, #3
 8008da8:	3304      	adds	r3, #4
 8008daa:	f104 0015 	add.w	r0, r4, #21
 8008dae:	4560      	cmp	r0, ip
 8008db0:	bf88      	it	hi
 8008db2:	2304      	movhi	r3, #4
 8008db4:	50ca      	str	r2, [r1, r3]
 8008db6:	b10a      	cbz	r2, 8008dbc <__lshift+0xa4>
 8008db8:	f108 0602 	add.w	r6, r8, #2
 8008dbc:	3e01      	subs	r6, #1
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	612e      	str	r6, [r5, #16]
 8008dc4:	f7ff fde2 	bl	800898c <_Bfree>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dce:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	e7c5      	b.n	8008d62 <__lshift+0x4a>
 8008dd6:	3904      	subs	r1, #4
 8008dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ddc:	459c      	cmp	ip, r3
 8008dde:	f841 2f04 	str.w	r2, [r1, #4]!
 8008de2:	d8f9      	bhi.n	8008dd8 <__lshift+0xc0>
 8008de4:	e7ea      	b.n	8008dbc <__lshift+0xa4>
 8008de6:	bf00      	nop
 8008de8:	0800ba5e 	.word	0x0800ba5e
 8008dec:	0800ba6f 	.word	0x0800ba6f

08008df0 <__mcmp>:
 8008df0:	4603      	mov	r3, r0
 8008df2:	690a      	ldr	r2, [r1, #16]
 8008df4:	6900      	ldr	r0, [r0, #16]
 8008df6:	b530      	push	{r4, r5, lr}
 8008df8:	1a80      	subs	r0, r0, r2
 8008dfa:	d10e      	bne.n	8008e1a <__mcmp+0x2a>
 8008dfc:	3314      	adds	r3, #20
 8008dfe:	3114      	adds	r1, #20
 8008e00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e10:	4295      	cmp	r5, r2
 8008e12:	d003      	beq.n	8008e1c <__mcmp+0x2c>
 8008e14:	d205      	bcs.n	8008e22 <__mcmp+0x32>
 8008e16:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1a:	bd30      	pop	{r4, r5, pc}
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	d3f3      	bcc.n	8008e08 <__mcmp+0x18>
 8008e20:	e7fb      	b.n	8008e1a <__mcmp+0x2a>
 8008e22:	2001      	movs	r0, #1
 8008e24:	e7f9      	b.n	8008e1a <__mcmp+0x2a>
	...

08008e28 <__mdiff>:
 8008e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	4689      	mov	r9, r1
 8008e2e:	4606      	mov	r6, r0
 8008e30:	4611      	mov	r1, r2
 8008e32:	4648      	mov	r0, r9
 8008e34:	4614      	mov	r4, r2
 8008e36:	f7ff ffdb 	bl	8008df0 <__mcmp>
 8008e3a:	1e05      	subs	r5, r0, #0
 8008e3c:	d112      	bne.n	8008e64 <__mdiff+0x3c>
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4630      	mov	r0, r6
 8008e42:	f7ff fd63 	bl	800890c <_Balloc>
 8008e46:	4602      	mov	r2, r0
 8008e48:	b928      	cbnz	r0, 8008e56 <__mdiff+0x2e>
 8008e4a:	f240 2137 	movw	r1, #567	@ 0x237
 8008e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8008f48 <__mdiff+0x120>)
 8008e50:	483e      	ldr	r0, [pc, #248]	@ (8008f4c <__mdiff+0x124>)
 8008e52:	f000 fb0d 	bl	8009470 <__assert_func>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	b003      	add	sp, #12
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e64:	bfbc      	itt	lt
 8008e66:	464b      	movlt	r3, r9
 8008e68:	46a1      	movlt	r9, r4
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e70:	bfba      	itte	lt
 8008e72:	461c      	movlt	r4, r3
 8008e74:	2501      	movlt	r5, #1
 8008e76:	2500      	movge	r5, #0
 8008e78:	f7ff fd48 	bl	800890c <_Balloc>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	b918      	cbnz	r0, 8008e88 <__mdiff+0x60>
 8008e80:	f240 2145 	movw	r1, #581	@ 0x245
 8008e84:	4b30      	ldr	r3, [pc, #192]	@ (8008f48 <__mdiff+0x120>)
 8008e86:	e7e3      	b.n	8008e50 <__mdiff+0x28>
 8008e88:	f100 0b14 	add.w	fp, r0, #20
 8008e8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e90:	f109 0310 	add.w	r3, r9, #16
 8008e94:	60c5      	str	r5, [r0, #12]
 8008e96:	f04f 0c00 	mov.w	ip, #0
 8008e9a:	f109 0514 	add.w	r5, r9, #20
 8008e9e:	46d9      	mov	r9, fp
 8008ea0:	6926      	ldr	r6, [r4, #16]
 8008ea2:	f104 0e14 	add.w	lr, r4, #20
 8008ea6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008eaa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008eae:	9301      	str	r3, [sp, #4]
 8008eb0:	9b01      	ldr	r3, [sp, #4]
 8008eb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008eb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008eba:	b281      	uxth	r1, r0
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	fa1f f38a 	uxth.w	r3, sl
 8008ec2:	1a5b      	subs	r3, r3, r1
 8008ec4:	0c00      	lsrs	r0, r0, #16
 8008ec6:	4463      	add	r3, ip
 8008ec8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ecc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ed6:	4576      	cmp	r6, lr
 8008ed8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008edc:	f849 3b04 	str.w	r3, [r9], #4
 8008ee0:	d8e6      	bhi.n	8008eb0 <__mdiff+0x88>
 8008ee2:	1b33      	subs	r3, r6, r4
 8008ee4:	3b15      	subs	r3, #21
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	3415      	adds	r4, #21
 8008eec:	3304      	adds	r3, #4
 8008eee:	42a6      	cmp	r6, r4
 8008ef0:	bf38      	it	cc
 8008ef2:	2304      	movcc	r3, #4
 8008ef4:	441d      	add	r5, r3
 8008ef6:	445b      	add	r3, fp
 8008ef8:	461e      	mov	r6, r3
 8008efa:	462c      	mov	r4, r5
 8008efc:	4544      	cmp	r4, r8
 8008efe:	d30e      	bcc.n	8008f1e <__mdiff+0xf6>
 8008f00:	f108 0103 	add.w	r1, r8, #3
 8008f04:	1b49      	subs	r1, r1, r5
 8008f06:	f021 0103 	bic.w	r1, r1, #3
 8008f0a:	3d03      	subs	r5, #3
 8008f0c:	45a8      	cmp	r8, r5
 8008f0e:	bf38      	it	cc
 8008f10:	2100      	movcc	r1, #0
 8008f12:	440b      	add	r3, r1
 8008f14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f18:	b199      	cbz	r1, 8008f42 <__mdiff+0x11a>
 8008f1a:	6117      	str	r7, [r2, #16]
 8008f1c:	e79e      	b.n	8008e5c <__mdiff+0x34>
 8008f1e:	46e6      	mov	lr, ip
 8008f20:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f24:	fa1f fc81 	uxth.w	ip, r1
 8008f28:	44f4      	add	ip, lr
 8008f2a:	0c08      	lsrs	r0, r1, #16
 8008f2c:	4471      	add	r1, lr
 8008f2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f32:	b289      	uxth	r1, r1
 8008f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f3c:	f846 1b04 	str.w	r1, [r6], #4
 8008f40:	e7dc      	b.n	8008efc <__mdiff+0xd4>
 8008f42:	3f01      	subs	r7, #1
 8008f44:	e7e6      	b.n	8008f14 <__mdiff+0xec>
 8008f46:	bf00      	nop
 8008f48:	0800ba5e 	.word	0x0800ba5e
 8008f4c:	0800ba6f 	.word	0x0800ba6f

08008f50 <__d2b>:
 8008f50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008f54:	2101      	movs	r1, #1
 8008f56:	4690      	mov	r8, r2
 8008f58:	4699      	mov	r9, r3
 8008f5a:	9e08      	ldr	r6, [sp, #32]
 8008f5c:	f7ff fcd6 	bl	800890c <_Balloc>
 8008f60:	4604      	mov	r4, r0
 8008f62:	b930      	cbnz	r0, 8008f72 <__d2b+0x22>
 8008f64:	4602      	mov	r2, r0
 8008f66:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f6a:	4b23      	ldr	r3, [pc, #140]	@ (8008ff8 <__d2b+0xa8>)
 8008f6c:	4823      	ldr	r0, [pc, #140]	@ (8008ffc <__d2b+0xac>)
 8008f6e:	f000 fa7f 	bl	8009470 <__assert_func>
 8008f72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f7a:	b10d      	cbz	r5, 8008f80 <__d2b+0x30>
 8008f7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	f1b8 0300 	subs.w	r3, r8, #0
 8008f86:	d024      	beq.n	8008fd2 <__d2b+0x82>
 8008f88:	4668      	mov	r0, sp
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	f7ff fd85 	bl	8008a9a <__lo0bits>
 8008f90:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f94:	b1d8      	cbz	r0, 8008fce <__d2b+0x7e>
 8008f96:	f1c0 0320 	rsb	r3, r0, #32
 8008f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	40c2      	lsrs	r2, r0
 8008fa2:	6163      	str	r3, [r4, #20]
 8008fa4:	9201      	str	r2, [sp, #4]
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bf0c      	ite	eq
 8008fac:	2201      	moveq	r2, #1
 8008fae:	2202      	movne	r2, #2
 8008fb0:	61a3      	str	r3, [r4, #24]
 8008fb2:	6122      	str	r2, [r4, #16]
 8008fb4:	b1ad      	cbz	r5, 8008fe2 <__d2b+0x92>
 8008fb6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fba:	4405      	add	r5, r0
 8008fbc:	6035      	str	r5, [r6, #0]
 8008fbe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc4:	6018      	str	r0, [r3, #0]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	b002      	add	sp, #8
 8008fca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008fce:	6161      	str	r1, [r4, #20]
 8008fd0:	e7e9      	b.n	8008fa6 <__d2b+0x56>
 8008fd2:	a801      	add	r0, sp, #4
 8008fd4:	f7ff fd61 	bl	8008a9a <__lo0bits>
 8008fd8:	9b01      	ldr	r3, [sp, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	6163      	str	r3, [r4, #20]
 8008fde:	3020      	adds	r0, #32
 8008fe0:	e7e7      	b.n	8008fb2 <__d2b+0x62>
 8008fe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008fe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fea:	6030      	str	r0, [r6, #0]
 8008fec:	6918      	ldr	r0, [r3, #16]
 8008fee:	f7ff fd35 	bl	8008a5c <__hi0bits>
 8008ff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ff6:	e7e4      	b.n	8008fc2 <__d2b+0x72>
 8008ff8:	0800ba5e 	.word	0x0800ba5e
 8008ffc:	0800ba6f 	.word	0x0800ba6f

08009000 <__ssputs_r>:
 8009000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	461f      	mov	r7, r3
 8009006:	688e      	ldr	r6, [r1, #8]
 8009008:	4682      	mov	sl, r0
 800900a:	42be      	cmp	r6, r7
 800900c:	460c      	mov	r4, r1
 800900e:	4690      	mov	r8, r2
 8009010:	680b      	ldr	r3, [r1, #0]
 8009012:	d82d      	bhi.n	8009070 <__ssputs_r+0x70>
 8009014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009018:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800901c:	d026      	beq.n	800906c <__ssputs_r+0x6c>
 800901e:	6965      	ldr	r5, [r4, #20]
 8009020:	6909      	ldr	r1, [r1, #16]
 8009022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009026:	eba3 0901 	sub.w	r9, r3, r1
 800902a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800902e:	1c7b      	adds	r3, r7, #1
 8009030:	444b      	add	r3, r9
 8009032:	106d      	asrs	r5, r5, #1
 8009034:	429d      	cmp	r5, r3
 8009036:	bf38      	it	cc
 8009038:	461d      	movcc	r5, r3
 800903a:	0553      	lsls	r3, r2, #21
 800903c:	d527      	bpl.n	800908e <__ssputs_r+0x8e>
 800903e:	4629      	mov	r1, r5
 8009040:	f7ff fbd8 	bl	80087f4 <_malloc_r>
 8009044:	4606      	mov	r6, r0
 8009046:	b360      	cbz	r0, 80090a2 <__ssputs_r+0xa2>
 8009048:	464a      	mov	r2, r9
 800904a:	6921      	ldr	r1, [r4, #16]
 800904c:	f000 fa02 	bl	8009454 <memcpy>
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800905a:	81a3      	strh	r3, [r4, #12]
 800905c:	6126      	str	r6, [r4, #16]
 800905e:	444e      	add	r6, r9
 8009060:	6026      	str	r6, [r4, #0]
 8009062:	463e      	mov	r6, r7
 8009064:	6165      	str	r5, [r4, #20]
 8009066:	eba5 0509 	sub.w	r5, r5, r9
 800906a:	60a5      	str	r5, [r4, #8]
 800906c:	42be      	cmp	r6, r7
 800906e:	d900      	bls.n	8009072 <__ssputs_r+0x72>
 8009070:	463e      	mov	r6, r7
 8009072:	4632      	mov	r2, r6
 8009074:	4641      	mov	r1, r8
 8009076:	6820      	ldr	r0, [r4, #0]
 8009078:	f000 f9c2 	bl	8009400 <memmove>
 800907c:	2000      	movs	r0, #0
 800907e:	68a3      	ldr	r3, [r4, #8]
 8009080:	1b9b      	subs	r3, r3, r6
 8009082:	60a3      	str	r3, [r4, #8]
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	4433      	add	r3, r6
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908e:	462a      	mov	r2, r5
 8009090:	f000 fa32 	bl	80094f8 <_realloc_r>
 8009094:	4606      	mov	r6, r0
 8009096:	2800      	cmp	r0, #0
 8009098:	d1e0      	bne.n	800905c <__ssputs_r+0x5c>
 800909a:	4650      	mov	r0, sl
 800909c:	6921      	ldr	r1, [r4, #16]
 800909e:	f7ff fb37 	bl	8008710 <_free_r>
 80090a2:	230c      	movs	r3, #12
 80090a4:	f8ca 3000 	str.w	r3, [sl]
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090b2:	81a3      	strh	r3, [r4, #12]
 80090b4:	e7e9      	b.n	800908a <__ssputs_r+0x8a>
	...

080090b8 <_svfiprintf_r>:
 80090b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	4698      	mov	r8, r3
 80090be:	898b      	ldrh	r3, [r1, #12]
 80090c0:	4607      	mov	r7, r0
 80090c2:	061b      	lsls	r3, r3, #24
 80090c4:	460d      	mov	r5, r1
 80090c6:	4614      	mov	r4, r2
 80090c8:	b09d      	sub	sp, #116	@ 0x74
 80090ca:	d510      	bpl.n	80090ee <_svfiprintf_r+0x36>
 80090cc:	690b      	ldr	r3, [r1, #16]
 80090ce:	b973      	cbnz	r3, 80090ee <_svfiprintf_r+0x36>
 80090d0:	2140      	movs	r1, #64	@ 0x40
 80090d2:	f7ff fb8f 	bl	80087f4 <_malloc_r>
 80090d6:	6028      	str	r0, [r5, #0]
 80090d8:	6128      	str	r0, [r5, #16]
 80090da:	b930      	cbnz	r0, 80090ea <_svfiprintf_r+0x32>
 80090dc:	230c      	movs	r3, #12
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	f04f 30ff 	mov.w	r0, #4294967295
 80090e4:	b01d      	add	sp, #116	@ 0x74
 80090e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ea:	2340      	movs	r3, #64	@ 0x40
 80090ec:	616b      	str	r3, [r5, #20]
 80090ee:	2300      	movs	r3, #0
 80090f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80090f2:	2320      	movs	r3, #32
 80090f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090f8:	2330      	movs	r3, #48	@ 0x30
 80090fa:	f04f 0901 	mov.w	r9, #1
 80090fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009102:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800929c <_svfiprintf_r+0x1e4>
 8009106:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800910a:	4623      	mov	r3, r4
 800910c:	469a      	mov	sl, r3
 800910e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009112:	b10a      	cbz	r2, 8009118 <_svfiprintf_r+0x60>
 8009114:	2a25      	cmp	r2, #37	@ 0x25
 8009116:	d1f9      	bne.n	800910c <_svfiprintf_r+0x54>
 8009118:	ebba 0b04 	subs.w	fp, sl, r4
 800911c:	d00b      	beq.n	8009136 <_svfiprintf_r+0x7e>
 800911e:	465b      	mov	r3, fp
 8009120:	4622      	mov	r2, r4
 8009122:	4629      	mov	r1, r5
 8009124:	4638      	mov	r0, r7
 8009126:	f7ff ff6b 	bl	8009000 <__ssputs_r>
 800912a:	3001      	adds	r0, #1
 800912c:	f000 80a7 	beq.w	800927e <_svfiprintf_r+0x1c6>
 8009130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009132:	445a      	add	r2, fp
 8009134:	9209      	str	r2, [sp, #36]	@ 0x24
 8009136:	f89a 3000 	ldrb.w	r3, [sl]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 809f 	beq.w	800927e <_svfiprintf_r+0x1c6>
 8009140:	2300      	movs	r3, #0
 8009142:	f04f 32ff 	mov.w	r2, #4294967295
 8009146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800914a:	f10a 0a01 	add.w	sl, sl, #1
 800914e:	9304      	str	r3, [sp, #16]
 8009150:	9307      	str	r3, [sp, #28]
 8009152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009156:	931a      	str	r3, [sp, #104]	@ 0x68
 8009158:	4654      	mov	r4, sl
 800915a:	2205      	movs	r2, #5
 800915c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009160:	484e      	ldr	r0, [pc, #312]	@ (800929c <_svfiprintf_r+0x1e4>)
 8009162:	f7fe fc6a 	bl	8007a3a <memchr>
 8009166:	9a04      	ldr	r2, [sp, #16]
 8009168:	b9d8      	cbnz	r0, 80091a2 <_svfiprintf_r+0xea>
 800916a:	06d0      	lsls	r0, r2, #27
 800916c:	bf44      	itt	mi
 800916e:	2320      	movmi	r3, #32
 8009170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009174:	0711      	lsls	r1, r2, #28
 8009176:	bf44      	itt	mi
 8009178:	232b      	movmi	r3, #43	@ 0x2b
 800917a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800917e:	f89a 3000 	ldrb.w	r3, [sl]
 8009182:	2b2a      	cmp	r3, #42	@ 0x2a
 8009184:	d015      	beq.n	80091b2 <_svfiprintf_r+0xfa>
 8009186:	4654      	mov	r4, sl
 8009188:	2000      	movs	r0, #0
 800918a:	f04f 0c0a 	mov.w	ip, #10
 800918e:	9a07      	ldr	r2, [sp, #28]
 8009190:	4621      	mov	r1, r4
 8009192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009196:	3b30      	subs	r3, #48	@ 0x30
 8009198:	2b09      	cmp	r3, #9
 800919a:	d94b      	bls.n	8009234 <_svfiprintf_r+0x17c>
 800919c:	b1b0      	cbz	r0, 80091cc <_svfiprintf_r+0x114>
 800919e:	9207      	str	r2, [sp, #28]
 80091a0:	e014      	b.n	80091cc <_svfiprintf_r+0x114>
 80091a2:	eba0 0308 	sub.w	r3, r0, r8
 80091a6:	fa09 f303 	lsl.w	r3, r9, r3
 80091aa:	4313      	orrs	r3, r2
 80091ac:	46a2      	mov	sl, r4
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	e7d2      	b.n	8009158 <_svfiprintf_r+0xa0>
 80091b2:	9b03      	ldr	r3, [sp, #12]
 80091b4:	1d19      	adds	r1, r3, #4
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	9103      	str	r1, [sp, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bfbb      	ittet	lt
 80091be:	425b      	neglt	r3, r3
 80091c0:	f042 0202 	orrlt.w	r2, r2, #2
 80091c4:	9307      	strge	r3, [sp, #28]
 80091c6:	9307      	strlt	r3, [sp, #28]
 80091c8:	bfb8      	it	lt
 80091ca:	9204      	strlt	r2, [sp, #16]
 80091cc:	7823      	ldrb	r3, [r4, #0]
 80091ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80091d0:	d10a      	bne.n	80091e8 <_svfiprintf_r+0x130>
 80091d2:	7863      	ldrb	r3, [r4, #1]
 80091d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80091d6:	d132      	bne.n	800923e <_svfiprintf_r+0x186>
 80091d8:	9b03      	ldr	r3, [sp, #12]
 80091da:	3402      	adds	r4, #2
 80091dc:	1d1a      	adds	r2, r3, #4
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	9203      	str	r2, [sp, #12]
 80091e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091e6:	9305      	str	r3, [sp, #20]
 80091e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80092a0 <_svfiprintf_r+0x1e8>
 80091ec:	2203      	movs	r2, #3
 80091ee:	4650      	mov	r0, sl
 80091f0:	7821      	ldrb	r1, [r4, #0]
 80091f2:	f7fe fc22 	bl	8007a3a <memchr>
 80091f6:	b138      	cbz	r0, 8009208 <_svfiprintf_r+0x150>
 80091f8:	2240      	movs	r2, #64	@ 0x40
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	eba0 000a 	sub.w	r0, r0, sl
 8009200:	4082      	lsls	r2, r0
 8009202:	4313      	orrs	r3, r2
 8009204:	3401      	adds	r4, #1
 8009206:	9304      	str	r3, [sp, #16]
 8009208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920c:	2206      	movs	r2, #6
 800920e:	4825      	ldr	r0, [pc, #148]	@ (80092a4 <_svfiprintf_r+0x1ec>)
 8009210:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009214:	f7fe fc11 	bl	8007a3a <memchr>
 8009218:	2800      	cmp	r0, #0
 800921a:	d036      	beq.n	800928a <_svfiprintf_r+0x1d2>
 800921c:	4b22      	ldr	r3, [pc, #136]	@ (80092a8 <_svfiprintf_r+0x1f0>)
 800921e:	bb1b      	cbnz	r3, 8009268 <_svfiprintf_r+0x1b0>
 8009220:	9b03      	ldr	r3, [sp, #12]
 8009222:	3307      	adds	r3, #7
 8009224:	f023 0307 	bic.w	r3, r3, #7
 8009228:	3308      	adds	r3, #8
 800922a:	9303      	str	r3, [sp, #12]
 800922c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800922e:	4433      	add	r3, r6
 8009230:	9309      	str	r3, [sp, #36]	@ 0x24
 8009232:	e76a      	b.n	800910a <_svfiprintf_r+0x52>
 8009234:	460c      	mov	r4, r1
 8009236:	2001      	movs	r0, #1
 8009238:	fb0c 3202 	mla	r2, ip, r2, r3
 800923c:	e7a8      	b.n	8009190 <_svfiprintf_r+0xd8>
 800923e:	2300      	movs	r3, #0
 8009240:	f04f 0c0a 	mov.w	ip, #10
 8009244:	4619      	mov	r1, r3
 8009246:	3401      	adds	r4, #1
 8009248:	9305      	str	r3, [sp, #20]
 800924a:	4620      	mov	r0, r4
 800924c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009250:	3a30      	subs	r2, #48	@ 0x30
 8009252:	2a09      	cmp	r2, #9
 8009254:	d903      	bls.n	800925e <_svfiprintf_r+0x1a6>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0c6      	beq.n	80091e8 <_svfiprintf_r+0x130>
 800925a:	9105      	str	r1, [sp, #20]
 800925c:	e7c4      	b.n	80091e8 <_svfiprintf_r+0x130>
 800925e:	4604      	mov	r4, r0
 8009260:	2301      	movs	r3, #1
 8009262:	fb0c 2101 	mla	r1, ip, r1, r2
 8009266:	e7f0      	b.n	800924a <_svfiprintf_r+0x192>
 8009268:	ab03      	add	r3, sp, #12
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	462a      	mov	r2, r5
 800926e:	4638      	mov	r0, r7
 8009270:	4b0e      	ldr	r3, [pc, #56]	@ (80092ac <_svfiprintf_r+0x1f4>)
 8009272:	a904      	add	r1, sp, #16
 8009274:	f7fd fe7e 	bl	8006f74 <_printf_float>
 8009278:	1c42      	adds	r2, r0, #1
 800927a:	4606      	mov	r6, r0
 800927c:	d1d6      	bne.n	800922c <_svfiprintf_r+0x174>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	065b      	lsls	r3, r3, #25
 8009282:	f53f af2d 	bmi.w	80090e0 <_svfiprintf_r+0x28>
 8009286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009288:	e72c      	b.n	80090e4 <_svfiprintf_r+0x2c>
 800928a:	ab03      	add	r3, sp, #12
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	462a      	mov	r2, r5
 8009290:	4638      	mov	r0, r7
 8009292:	4b06      	ldr	r3, [pc, #24]	@ (80092ac <_svfiprintf_r+0x1f4>)
 8009294:	a904      	add	r1, sp, #16
 8009296:	f7fe f90b 	bl	80074b0 <_printf_i>
 800929a:	e7ed      	b.n	8009278 <_svfiprintf_r+0x1c0>
 800929c:	0800bac8 	.word	0x0800bac8
 80092a0:	0800bace 	.word	0x0800bace
 80092a4:	0800bad2 	.word	0x0800bad2
 80092a8:	08006f75 	.word	0x08006f75
 80092ac:	08009001 	.word	0x08009001

080092b0 <__sflush_r>:
 80092b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	0716      	lsls	r6, r2, #28
 80092b8:	4605      	mov	r5, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	d454      	bmi.n	8009368 <__sflush_r+0xb8>
 80092be:	684b      	ldr	r3, [r1, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dc02      	bgt.n	80092ca <__sflush_r+0x1a>
 80092c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	dd48      	ble.n	800935c <__sflush_r+0xac>
 80092ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092cc:	2e00      	cmp	r6, #0
 80092ce:	d045      	beq.n	800935c <__sflush_r+0xac>
 80092d0:	2300      	movs	r3, #0
 80092d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092d6:	682f      	ldr	r7, [r5, #0]
 80092d8:	6a21      	ldr	r1, [r4, #32]
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	d030      	beq.n	8009340 <__sflush_r+0x90>
 80092de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	0759      	lsls	r1, r3, #29
 80092e4:	d505      	bpl.n	80092f2 <__sflush_r+0x42>
 80092e6:	6863      	ldr	r3, [r4, #4]
 80092e8:	1ad2      	subs	r2, r2, r3
 80092ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092ec:	b10b      	cbz	r3, 80092f2 <__sflush_r+0x42>
 80092ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092f0:	1ad2      	subs	r2, r2, r3
 80092f2:	2300      	movs	r3, #0
 80092f4:	4628      	mov	r0, r5
 80092f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092f8:	6a21      	ldr	r1, [r4, #32]
 80092fa:	47b0      	blx	r6
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	d106      	bne.n	8009310 <__sflush_r+0x60>
 8009302:	6829      	ldr	r1, [r5, #0]
 8009304:	291d      	cmp	r1, #29
 8009306:	d82b      	bhi.n	8009360 <__sflush_r+0xb0>
 8009308:	4a28      	ldr	r2, [pc, #160]	@ (80093ac <__sflush_r+0xfc>)
 800930a:	40ca      	lsrs	r2, r1
 800930c:	07d6      	lsls	r6, r2, #31
 800930e:	d527      	bpl.n	8009360 <__sflush_r+0xb0>
 8009310:	2200      	movs	r2, #0
 8009312:	6062      	str	r2, [r4, #4]
 8009314:	6922      	ldr	r2, [r4, #16]
 8009316:	04d9      	lsls	r1, r3, #19
 8009318:	6022      	str	r2, [r4, #0]
 800931a:	d504      	bpl.n	8009326 <__sflush_r+0x76>
 800931c:	1c42      	adds	r2, r0, #1
 800931e:	d101      	bne.n	8009324 <__sflush_r+0x74>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	b903      	cbnz	r3, 8009326 <__sflush_r+0x76>
 8009324:	6560      	str	r0, [r4, #84]	@ 0x54
 8009326:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009328:	602f      	str	r7, [r5, #0]
 800932a:	b1b9      	cbz	r1, 800935c <__sflush_r+0xac>
 800932c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009330:	4299      	cmp	r1, r3
 8009332:	d002      	beq.n	800933a <__sflush_r+0x8a>
 8009334:	4628      	mov	r0, r5
 8009336:	f7ff f9eb 	bl	8008710 <_free_r>
 800933a:	2300      	movs	r3, #0
 800933c:	6363      	str	r3, [r4, #52]	@ 0x34
 800933e:	e00d      	b.n	800935c <__sflush_r+0xac>
 8009340:	2301      	movs	r3, #1
 8009342:	4628      	mov	r0, r5
 8009344:	47b0      	blx	r6
 8009346:	4602      	mov	r2, r0
 8009348:	1c50      	adds	r0, r2, #1
 800934a:	d1c9      	bne.n	80092e0 <__sflush_r+0x30>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0c6      	beq.n	80092e0 <__sflush_r+0x30>
 8009352:	2b1d      	cmp	r3, #29
 8009354:	d001      	beq.n	800935a <__sflush_r+0xaa>
 8009356:	2b16      	cmp	r3, #22
 8009358:	d11d      	bne.n	8009396 <__sflush_r+0xe6>
 800935a:	602f      	str	r7, [r5, #0]
 800935c:	2000      	movs	r0, #0
 800935e:	e021      	b.n	80093a4 <__sflush_r+0xf4>
 8009360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009364:	b21b      	sxth	r3, r3
 8009366:	e01a      	b.n	800939e <__sflush_r+0xee>
 8009368:	690f      	ldr	r7, [r1, #16]
 800936a:	2f00      	cmp	r7, #0
 800936c:	d0f6      	beq.n	800935c <__sflush_r+0xac>
 800936e:	0793      	lsls	r3, r2, #30
 8009370:	bf18      	it	ne
 8009372:	2300      	movne	r3, #0
 8009374:	680e      	ldr	r6, [r1, #0]
 8009376:	bf08      	it	eq
 8009378:	694b      	ldreq	r3, [r1, #20]
 800937a:	1bf6      	subs	r6, r6, r7
 800937c:	600f      	str	r7, [r1, #0]
 800937e:	608b      	str	r3, [r1, #8]
 8009380:	2e00      	cmp	r6, #0
 8009382:	ddeb      	ble.n	800935c <__sflush_r+0xac>
 8009384:	4633      	mov	r3, r6
 8009386:	463a      	mov	r2, r7
 8009388:	4628      	mov	r0, r5
 800938a:	6a21      	ldr	r1, [r4, #32]
 800938c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009390:	47e0      	blx	ip
 8009392:	2800      	cmp	r0, #0
 8009394:	dc07      	bgt.n	80093a6 <__sflush_r+0xf6>
 8009396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800939e:	f04f 30ff 	mov.w	r0, #4294967295
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a6:	4407      	add	r7, r0
 80093a8:	1a36      	subs	r6, r6, r0
 80093aa:	e7e9      	b.n	8009380 <__sflush_r+0xd0>
 80093ac:	20400001 	.word	0x20400001

080093b0 <_fflush_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	690b      	ldr	r3, [r1, #16]
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	b913      	cbnz	r3, 80093c0 <_fflush_r+0x10>
 80093ba:	2500      	movs	r5, #0
 80093bc:	4628      	mov	r0, r5
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	b118      	cbz	r0, 80093ca <_fflush_r+0x1a>
 80093c2:	6a03      	ldr	r3, [r0, #32]
 80093c4:	b90b      	cbnz	r3, 80093ca <_fflush_r+0x1a>
 80093c6:	f7fe fa1d 	bl	8007804 <__sinit>
 80093ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0f3      	beq.n	80093ba <_fflush_r+0xa>
 80093d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093d4:	07d0      	lsls	r0, r2, #31
 80093d6:	d404      	bmi.n	80093e2 <_fflush_r+0x32>
 80093d8:	0599      	lsls	r1, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_fflush_r+0x32>
 80093dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093de:	f7fe fb2a 	bl	8007a36 <__retarget_lock_acquire_recursive>
 80093e2:	4628      	mov	r0, r5
 80093e4:	4621      	mov	r1, r4
 80093e6:	f7ff ff63 	bl	80092b0 <__sflush_r>
 80093ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093ec:	4605      	mov	r5, r0
 80093ee:	07da      	lsls	r2, r3, #31
 80093f0:	d4e4      	bmi.n	80093bc <_fflush_r+0xc>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	059b      	lsls	r3, r3, #22
 80093f6:	d4e1      	bmi.n	80093bc <_fflush_r+0xc>
 80093f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093fa:	f7fe fb1d 	bl	8007a38 <__retarget_lock_release_recursive>
 80093fe:	e7dd      	b.n	80093bc <_fflush_r+0xc>

08009400 <memmove>:
 8009400:	4288      	cmp	r0, r1
 8009402:	b510      	push	{r4, lr}
 8009404:	eb01 0402 	add.w	r4, r1, r2
 8009408:	d902      	bls.n	8009410 <memmove+0x10>
 800940a:	4284      	cmp	r4, r0
 800940c:	4623      	mov	r3, r4
 800940e:	d807      	bhi.n	8009420 <memmove+0x20>
 8009410:	1e43      	subs	r3, r0, #1
 8009412:	42a1      	cmp	r1, r4
 8009414:	d008      	beq.n	8009428 <memmove+0x28>
 8009416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800941a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800941e:	e7f8      	b.n	8009412 <memmove+0x12>
 8009420:	4601      	mov	r1, r0
 8009422:	4402      	add	r2, r0
 8009424:	428a      	cmp	r2, r1
 8009426:	d100      	bne.n	800942a <memmove+0x2a>
 8009428:	bd10      	pop	{r4, pc}
 800942a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800942e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009432:	e7f7      	b.n	8009424 <memmove+0x24>

08009434 <_sbrk_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	2300      	movs	r3, #0
 8009438:	4d05      	ldr	r5, [pc, #20]	@ (8009450 <_sbrk_r+0x1c>)
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	602b      	str	r3, [r5, #0]
 8009440:	f7fb f96a 	bl	8004718 <_sbrk>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_sbrk_r+0x1a>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_sbrk_r+0x1a>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	200007b8 	.word	0x200007b8

08009454 <memcpy>:
 8009454:	440a      	add	r2, r1
 8009456:	4291      	cmp	r1, r2
 8009458:	f100 33ff 	add.w	r3, r0, #4294967295
 800945c:	d100      	bne.n	8009460 <memcpy+0xc>
 800945e:	4770      	bx	lr
 8009460:	b510      	push	{r4, lr}
 8009462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009466:	4291      	cmp	r1, r2
 8009468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800946c:	d1f9      	bne.n	8009462 <memcpy+0xe>
 800946e:	bd10      	pop	{r4, pc}

08009470 <__assert_func>:
 8009470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009472:	4614      	mov	r4, r2
 8009474:	461a      	mov	r2, r3
 8009476:	4b09      	ldr	r3, [pc, #36]	@ (800949c <__assert_func+0x2c>)
 8009478:	4605      	mov	r5, r0
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68d8      	ldr	r0, [r3, #12]
 800947e:	b14c      	cbz	r4, 8009494 <__assert_func+0x24>
 8009480:	4b07      	ldr	r3, [pc, #28]	@ (80094a0 <__assert_func+0x30>)
 8009482:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009486:	9100      	str	r1, [sp, #0]
 8009488:	462b      	mov	r3, r5
 800948a:	4906      	ldr	r1, [pc, #24]	@ (80094a4 <__assert_func+0x34>)
 800948c:	f000 f870 	bl	8009570 <fiprintf>
 8009490:	f000 f880 	bl	8009594 <abort>
 8009494:	4b04      	ldr	r3, [pc, #16]	@ (80094a8 <__assert_func+0x38>)
 8009496:	461c      	mov	r4, r3
 8009498:	e7f3      	b.n	8009482 <__assert_func+0x12>
 800949a:	bf00      	nop
 800949c:	2000004c 	.word	0x2000004c
 80094a0:	0800bae3 	.word	0x0800bae3
 80094a4:	0800baf0 	.word	0x0800baf0
 80094a8:	0800bb1e 	.word	0x0800bb1e

080094ac <_calloc_r>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	fba1 5402 	umull	r5, r4, r1, r2
 80094b2:	b934      	cbnz	r4, 80094c2 <_calloc_r+0x16>
 80094b4:	4629      	mov	r1, r5
 80094b6:	f7ff f99d 	bl	80087f4 <_malloc_r>
 80094ba:	4606      	mov	r6, r0
 80094bc:	b928      	cbnz	r0, 80094ca <_calloc_r+0x1e>
 80094be:	4630      	mov	r0, r6
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
 80094c2:	220c      	movs	r2, #12
 80094c4:	2600      	movs	r6, #0
 80094c6:	6002      	str	r2, [r0, #0]
 80094c8:	e7f9      	b.n	80094be <_calloc_r+0x12>
 80094ca:	462a      	mov	r2, r5
 80094cc:	4621      	mov	r1, r4
 80094ce:	f7fe fa34 	bl	800793a <memset>
 80094d2:	e7f4      	b.n	80094be <_calloc_r+0x12>

080094d4 <__ascii_mbtowc>:
 80094d4:	b082      	sub	sp, #8
 80094d6:	b901      	cbnz	r1, 80094da <__ascii_mbtowc+0x6>
 80094d8:	a901      	add	r1, sp, #4
 80094da:	b142      	cbz	r2, 80094ee <__ascii_mbtowc+0x1a>
 80094dc:	b14b      	cbz	r3, 80094f2 <__ascii_mbtowc+0x1e>
 80094de:	7813      	ldrb	r3, [r2, #0]
 80094e0:	600b      	str	r3, [r1, #0]
 80094e2:	7812      	ldrb	r2, [r2, #0]
 80094e4:	1e10      	subs	r0, r2, #0
 80094e6:	bf18      	it	ne
 80094e8:	2001      	movne	r0, #1
 80094ea:	b002      	add	sp, #8
 80094ec:	4770      	bx	lr
 80094ee:	4610      	mov	r0, r2
 80094f0:	e7fb      	b.n	80094ea <__ascii_mbtowc+0x16>
 80094f2:	f06f 0001 	mvn.w	r0, #1
 80094f6:	e7f8      	b.n	80094ea <__ascii_mbtowc+0x16>

080094f8 <_realloc_r>:
 80094f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094fc:	4607      	mov	r7, r0
 80094fe:	4614      	mov	r4, r2
 8009500:	460d      	mov	r5, r1
 8009502:	b921      	cbnz	r1, 800950e <_realloc_r+0x16>
 8009504:	4611      	mov	r1, r2
 8009506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800950a:	f7ff b973 	b.w	80087f4 <_malloc_r>
 800950e:	b92a      	cbnz	r2, 800951c <_realloc_r+0x24>
 8009510:	f7ff f8fe 	bl	8008710 <_free_r>
 8009514:	4625      	mov	r5, r4
 8009516:	4628      	mov	r0, r5
 8009518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800951c:	f000 f841 	bl	80095a2 <_malloc_usable_size_r>
 8009520:	4284      	cmp	r4, r0
 8009522:	4606      	mov	r6, r0
 8009524:	d802      	bhi.n	800952c <_realloc_r+0x34>
 8009526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800952a:	d8f4      	bhi.n	8009516 <_realloc_r+0x1e>
 800952c:	4621      	mov	r1, r4
 800952e:	4638      	mov	r0, r7
 8009530:	f7ff f960 	bl	80087f4 <_malloc_r>
 8009534:	4680      	mov	r8, r0
 8009536:	b908      	cbnz	r0, 800953c <_realloc_r+0x44>
 8009538:	4645      	mov	r5, r8
 800953a:	e7ec      	b.n	8009516 <_realloc_r+0x1e>
 800953c:	42b4      	cmp	r4, r6
 800953e:	4622      	mov	r2, r4
 8009540:	4629      	mov	r1, r5
 8009542:	bf28      	it	cs
 8009544:	4632      	movcs	r2, r6
 8009546:	f7ff ff85 	bl	8009454 <memcpy>
 800954a:	4629      	mov	r1, r5
 800954c:	4638      	mov	r0, r7
 800954e:	f7ff f8df 	bl	8008710 <_free_r>
 8009552:	e7f1      	b.n	8009538 <_realloc_r+0x40>

08009554 <__ascii_wctomb>:
 8009554:	4603      	mov	r3, r0
 8009556:	4608      	mov	r0, r1
 8009558:	b141      	cbz	r1, 800956c <__ascii_wctomb+0x18>
 800955a:	2aff      	cmp	r2, #255	@ 0xff
 800955c:	d904      	bls.n	8009568 <__ascii_wctomb+0x14>
 800955e:	228a      	movs	r2, #138	@ 0x8a
 8009560:	f04f 30ff 	mov.w	r0, #4294967295
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	4770      	bx	lr
 8009568:	2001      	movs	r0, #1
 800956a:	700a      	strb	r2, [r1, #0]
 800956c:	4770      	bx	lr
	...

08009570 <fiprintf>:
 8009570:	b40e      	push	{r1, r2, r3}
 8009572:	b503      	push	{r0, r1, lr}
 8009574:	4601      	mov	r1, r0
 8009576:	ab03      	add	r3, sp, #12
 8009578:	4805      	ldr	r0, [pc, #20]	@ (8009590 <fiprintf+0x20>)
 800957a:	f853 2b04 	ldr.w	r2, [r3], #4
 800957e:	6800      	ldr	r0, [r0, #0]
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	f000 f83d 	bl	8009600 <_vfiprintf_r>
 8009586:	b002      	add	sp, #8
 8009588:	f85d eb04 	ldr.w	lr, [sp], #4
 800958c:	b003      	add	sp, #12
 800958e:	4770      	bx	lr
 8009590:	2000004c 	.word	0x2000004c

08009594 <abort>:
 8009594:	2006      	movs	r0, #6
 8009596:	b508      	push	{r3, lr}
 8009598:	f000 fa06 	bl	80099a8 <raise>
 800959c:	2001      	movs	r0, #1
 800959e:	f7fb f846 	bl	800462e <_exit>

080095a2 <_malloc_usable_size_r>:
 80095a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a6:	1f18      	subs	r0, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	bfbc      	itt	lt
 80095ac:	580b      	ldrlt	r3, [r1, r0]
 80095ae:	18c0      	addlt	r0, r0, r3
 80095b0:	4770      	bx	lr

080095b2 <__sfputc_r>:
 80095b2:	6893      	ldr	r3, [r2, #8]
 80095b4:	b410      	push	{r4}
 80095b6:	3b01      	subs	r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	6093      	str	r3, [r2, #8]
 80095bc:	da07      	bge.n	80095ce <__sfputc_r+0x1c>
 80095be:	6994      	ldr	r4, [r2, #24]
 80095c0:	42a3      	cmp	r3, r4
 80095c2:	db01      	blt.n	80095c8 <__sfputc_r+0x16>
 80095c4:	290a      	cmp	r1, #10
 80095c6:	d102      	bne.n	80095ce <__sfputc_r+0x1c>
 80095c8:	bc10      	pop	{r4}
 80095ca:	f000 b931 	b.w	8009830 <__swbuf_r>
 80095ce:	6813      	ldr	r3, [r2, #0]
 80095d0:	1c58      	adds	r0, r3, #1
 80095d2:	6010      	str	r0, [r2, #0]
 80095d4:	7019      	strb	r1, [r3, #0]
 80095d6:	4608      	mov	r0, r1
 80095d8:	bc10      	pop	{r4}
 80095da:	4770      	bx	lr

080095dc <__sfputs_r>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	4606      	mov	r6, r0
 80095e0:	460f      	mov	r7, r1
 80095e2:	4614      	mov	r4, r2
 80095e4:	18d5      	adds	r5, r2, r3
 80095e6:	42ac      	cmp	r4, r5
 80095e8:	d101      	bne.n	80095ee <__sfputs_r+0x12>
 80095ea:	2000      	movs	r0, #0
 80095ec:	e007      	b.n	80095fe <__sfputs_r+0x22>
 80095ee:	463a      	mov	r2, r7
 80095f0:	4630      	mov	r0, r6
 80095f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f6:	f7ff ffdc 	bl	80095b2 <__sfputc_r>
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	d1f3      	bne.n	80095e6 <__sfputs_r+0xa>
 80095fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009600 <_vfiprintf_r>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	460d      	mov	r5, r1
 8009606:	4614      	mov	r4, r2
 8009608:	4698      	mov	r8, r3
 800960a:	4606      	mov	r6, r0
 800960c:	b09d      	sub	sp, #116	@ 0x74
 800960e:	b118      	cbz	r0, 8009618 <_vfiprintf_r+0x18>
 8009610:	6a03      	ldr	r3, [r0, #32]
 8009612:	b90b      	cbnz	r3, 8009618 <_vfiprintf_r+0x18>
 8009614:	f7fe f8f6 	bl	8007804 <__sinit>
 8009618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800961a:	07d9      	lsls	r1, r3, #31
 800961c:	d405      	bmi.n	800962a <_vfiprintf_r+0x2a>
 800961e:	89ab      	ldrh	r3, [r5, #12]
 8009620:	059a      	lsls	r2, r3, #22
 8009622:	d402      	bmi.n	800962a <_vfiprintf_r+0x2a>
 8009624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009626:	f7fe fa06 	bl	8007a36 <__retarget_lock_acquire_recursive>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	071b      	lsls	r3, r3, #28
 800962e:	d501      	bpl.n	8009634 <_vfiprintf_r+0x34>
 8009630:	692b      	ldr	r3, [r5, #16]
 8009632:	b99b      	cbnz	r3, 800965c <_vfiprintf_r+0x5c>
 8009634:	4629      	mov	r1, r5
 8009636:	4630      	mov	r0, r6
 8009638:	f000 f938 	bl	80098ac <__swsetup_r>
 800963c:	b170      	cbz	r0, 800965c <_vfiprintf_r+0x5c>
 800963e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009640:	07dc      	lsls	r4, r3, #31
 8009642:	d504      	bpl.n	800964e <_vfiprintf_r+0x4e>
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	b01d      	add	sp, #116	@ 0x74
 800964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964e:	89ab      	ldrh	r3, [r5, #12]
 8009650:	0598      	lsls	r0, r3, #22
 8009652:	d4f7      	bmi.n	8009644 <_vfiprintf_r+0x44>
 8009654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009656:	f7fe f9ef 	bl	8007a38 <__retarget_lock_release_recursive>
 800965a:	e7f3      	b.n	8009644 <_vfiprintf_r+0x44>
 800965c:	2300      	movs	r3, #0
 800965e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009660:	2320      	movs	r3, #32
 8009662:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009666:	2330      	movs	r3, #48	@ 0x30
 8009668:	f04f 0901 	mov.w	r9, #1
 800966c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009670:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800981c <_vfiprintf_r+0x21c>
 8009674:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009678:	4623      	mov	r3, r4
 800967a:	469a      	mov	sl, r3
 800967c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009680:	b10a      	cbz	r2, 8009686 <_vfiprintf_r+0x86>
 8009682:	2a25      	cmp	r2, #37	@ 0x25
 8009684:	d1f9      	bne.n	800967a <_vfiprintf_r+0x7a>
 8009686:	ebba 0b04 	subs.w	fp, sl, r4
 800968a:	d00b      	beq.n	80096a4 <_vfiprintf_r+0xa4>
 800968c:	465b      	mov	r3, fp
 800968e:	4622      	mov	r2, r4
 8009690:	4629      	mov	r1, r5
 8009692:	4630      	mov	r0, r6
 8009694:	f7ff ffa2 	bl	80095dc <__sfputs_r>
 8009698:	3001      	adds	r0, #1
 800969a:	f000 80a7 	beq.w	80097ec <_vfiprintf_r+0x1ec>
 800969e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096a0:	445a      	add	r2, fp
 80096a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80096a4:	f89a 3000 	ldrb.w	r3, [sl]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 809f 	beq.w	80097ec <_vfiprintf_r+0x1ec>
 80096ae:	2300      	movs	r3, #0
 80096b0:	f04f 32ff 	mov.w	r2, #4294967295
 80096b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b8:	f10a 0a01 	add.w	sl, sl, #1
 80096bc:	9304      	str	r3, [sp, #16]
 80096be:	9307      	str	r3, [sp, #28]
 80096c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80096c6:	4654      	mov	r4, sl
 80096c8:	2205      	movs	r2, #5
 80096ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ce:	4853      	ldr	r0, [pc, #332]	@ (800981c <_vfiprintf_r+0x21c>)
 80096d0:	f7fe f9b3 	bl	8007a3a <memchr>
 80096d4:	9a04      	ldr	r2, [sp, #16]
 80096d6:	b9d8      	cbnz	r0, 8009710 <_vfiprintf_r+0x110>
 80096d8:	06d1      	lsls	r1, r2, #27
 80096da:	bf44      	itt	mi
 80096dc:	2320      	movmi	r3, #32
 80096de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096e2:	0713      	lsls	r3, r2, #28
 80096e4:	bf44      	itt	mi
 80096e6:	232b      	movmi	r3, #43	@ 0x2b
 80096e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ec:	f89a 3000 	ldrb.w	r3, [sl]
 80096f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80096f2:	d015      	beq.n	8009720 <_vfiprintf_r+0x120>
 80096f4:	4654      	mov	r4, sl
 80096f6:	2000      	movs	r0, #0
 80096f8:	f04f 0c0a 	mov.w	ip, #10
 80096fc:	9a07      	ldr	r2, [sp, #28]
 80096fe:	4621      	mov	r1, r4
 8009700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009704:	3b30      	subs	r3, #48	@ 0x30
 8009706:	2b09      	cmp	r3, #9
 8009708:	d94b      	bls.n	80097a2 <_vfiprintf_r+0x1a2>
 800970a:	b1b0      	cbz	r0, 800973a <_vfiprintf_r+0x13a>
 800970c:	9207      	str	r2, [sp, #28]
 800970e:	e014      	b.n	800973a <_vfiprintf_r+0x13a>
 8009710:	eba0 0308 	sub.w	r3, r0, r8
 8009714:	fa09 f303 	lsl.w	r3, r9, r3
 8009718:	4313      	orrs	r3, r2
 800971a:	46a2      	mov	sl, r4
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	e7d2      	b.n	80096c6 <_vfiprintf_r+0xc6>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	1d19      	adds	r1, r3, #4
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	9103      	str	r1, [sp, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	bfbb      	ittet	lt
 800972c:	425b      	neglt	r3, r3
 800972e:	f042 0202 	orrlt.w	r2, r2, #2
 8009732:	9307      	strge	r3, [sp, #28]
 8009734:	9307      	strlt	r3, [sp, #28]
 8009736:	bfb8      	it	lt
 8009738:	9204      	strlt	r2, [sp, #16]
 800973a:	7823      	ldrb	r3, [r4, #0]
 800973c:	2b2e      	cmp	r3, #46	@ 0x2e
 800973e:	d10a      	bne.n	8009756 <_vfiprintf_r+0x156>
 8009740:	7863      	ldrb	r3, [r4, #1]
 8009742:	2b2a      	cmp	r3, #42	@ 0x2a
 8009744:	d132      	bne.n	80097ac <_vfiprintf_r+0x1ac>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	3402      	adds	r4, #2
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	9203      	str	r2, [sp, #12]
 8009750:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009820 <_vfiprintf_r+0x220>
 800975a:	2203      	movs	r2, #3
 800975c:	4650      	mov	r0, sl
 800975e:	7821      	ldrb	r1, [r4, #0]
 8009760:	f7fe f96b 	bl	8007a3a <memchr>
 8009764:	b138      	cbz	r0, 8009776 <_vfiprintf_r+0x176>
 8009766:	2240      	movs	r2, #64	@ 0x40
 8009768:	9b04      	ldr	r3, [sp, #16]
 800976a:	eba0 000a 	sub.w	r0, r0, sl
 800976e:	4082      	lsls	r2, r0
 8009770:	4313      	orrs	r3, r2
 8009772:	3401      	adds	r4, #1
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977a:	2206      	movs	r2, #6
 800977c:	4829      	ldr	r0, [pc, #164]	@ (8009824 <_vfiprintf_r+0x224>)
 800977e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009782:	f7fe f95a 	bl	8007a3a <memchr>
 8009786:	2800      	cmp	r0, #0
 8009788:	d03f      	beq.n	800980a <_vfiprintf_r+0x20a>
 800978a:	4b27      	ldr	r3, [pc, #156]	@ (8009828 <_vfiprintf_r+0x228>)
 800978c:	bb1b      	cbnz	r3, 80097d6 <_vfiprintf_r+0x1d6>
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	3307      	adds	r3, #7
 8009792:	f023 0307 	bic.w	r3, r3, #7
 8009796:	3308      	adds	r3, #8
 8009798:	9303      	str	r3, [sp, #12]
 800979a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800979c:	443b      	add	r3, r7
 800979e:	9309      	str	r3, [sp, #36]	@ 0x24
 80097a0:	e76a      	b.n	8009678 <_vfiprintf_r+0x78>
 80097a2:	460c      	mov	r4, r1
 80097a4:	2001      	movs	r0, #1
 80097a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80097aa:	e7a8      	b.n	80096fe <_vfiprintf_r+0xfe>
 80097ac:	2300      	movs	r3, #0
 80097ae:	f04f 0c0a 	mov.w	ip, #10
 80097b2:	4619      	mov	r1, r3
 80097b4:	3401      	adds	r4, #1
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	4620      	mov	r0, r4
 80097ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097be:	3a30      	subs	r2, #48	@ 0x30
 80097c0:	2a09      	cmp	r2, #9
 80097c2:	d903      	bls.n	80097cc <_vfiprintf_r+0x1cc>
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0c6      	beq.n	8009756 <_vfiprintf_r+0x156>
 80097c8:	9105      	str	r1, [sp, #20]
 80097ca:	e7c4      	b.n	8009756 <_vfiprintf_r+0x156>
 80097cc:	4604      	mov	r4, r0
 80097ce:	2301      	movs	r3, #1
 80097d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d4:	e7f0      	b.n	80097b8 <_vfiprintf_r+0x1b8>
 80097d6:	ab03      	add	r3, sp, #12
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	462a      	mov	r2, r5
 80097dc:	4630      	mov	r0, r6
 80097de:	4b13      	ldr	r3, [pc, #76]	@ (800982c <_vfiprintf_r+0x22c>)
 80097e0:	a904      	add	r1, sp, #16
 80097e2:	f7fd fbc7 	bl	8006f74 <_printf_float>
 80097e6:	4607      	mov	r7, r0
 80097e8:	1c78      	adds	r0, r7, #1
 80097ea:	d1d6      	bne.n	800979a <_vfiprintf_r+0x19a>
 80097ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097ee:	07d9      	lsls	r1, r3, #31
 80097f0:	d405      	bmi.n	80097fe <_vfiprintf_r+0x1fe>
 80097f2:	89ab      	ldrh	r3, [r5, #12]
 80097f4:	059a      	lsls	r2, r3, #22
 80097f6:	d402      	bmi.n	80097fe <_vfiprintf_r+0x1fe>
 80097f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097fa:	f7fe f91d 	bl	8007a38 <__retarget_lock_release_recursive>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	065b      	lsls	r3, r3, #25
 8009802:	f53f af1f 	bmi.w	8009644 <_vfiprintf_r+0x44>
 8009806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009808:	e71e      	b.n	8009648 <_vfiprintf_r+0x48>
 800980a:	ab03      	add	r3, sp, #12
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	462a      	mov	r2, r5
 8009810:	4630      	mov	r0, r6
 8009812:	4b06      	ldr	r3, [pc, #24]	@ (800982c <_vfiprintf_r+0x22c>)
 8009814:	a904      	add	r1, sp, #16
 8009816:	f7fd fe4b 	bl	80074b0 <_printf_i>
 800981a:	e7e4      	b.n	80097e6 <_vfiprintf_r+0x1e6>
 800981c:	0800bac8 	.word	0x0800bac8
 8009820:	0800bace 	.word	0x0800bace
 8009824:	0800bad2 	.word	0x0800bad2
 8009828:	08006f75 	.word	0x08006f75
 800982c:	080095dd 	.word	0x080095dd

08009830 <__swbuf_r>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	460e      	mov	r6, r1
 8009834:	4614      	mov	r4, r2
 8009836:	4605      	mov	r5, r0
 8009838:	b118      	cbz	r0, 8009842 <__swbuf_r+0x12>
 800983a:	6a03      	ldr	r3, [r0, #32]
 800983c:	b90b      	cbnz	r3, 8009842 <__swbuf_r+0x12>
 800983e:	f7fd ffe1 	bl	8007804 <__sinit>
 8009842:	69a3      	ldr	r3, [r4, #24]
 8009844:	60a3      	str	r3, [r4, #8]
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	071a      	lsls	r2, r3, #28
 800984a:	d501      	bpl.n	8009850 <__swbuf_r+0x20>
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	b943      	cbnz	r3, 8009862 <__swbuf_r+0x32>
 8009850:	4621      	mov	r1, r4
 8009852:	4628      	mov	r0, r5
 8009854:	f000 f82a 	bl	80098ac <__swsetup_r>
 8009858:	b118      	cbz	r0, 8009862 <__swbuf_r+0x32>
 800985a:	f04f 37ff 	mov.w	r7, #4294967295
 800985e:	4638      	mov	r0, r7
 8009860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	6922      	ldr	r2, [r4, #16]
 8009866:	b2f6      	uxtb	r6, r6
 8009868:	1a98      	subs	r0, r3, r2
 800986a:	6963      	ldr	r3, [r4, #20]
 800986c:	4637      	mov	r7, r6
 800986e:	4283      	cmp	r3, r0
 8009870:	dc05      	bgt.n	800987e <__swbuf_r+0x4e>
 8009872:	4621      	mov	r1, r4
 8009874:	4628      	mov	r0, r5
 8009876:	f7ff fd9b 	bl	80093b0 <_fflush_r>
 800987a:	2800      	cmp	r0, #0
 800987c:	d1ed      	bne.n	800985a <__swbuf_r+0x2a>
 800987e:	68a3      	ldr	r3, [r4, #8]
 8009880:	3b01      	subs	r3, #1
 8009882:	60a3      	str	r3, [r4, #8]
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	6022      	str	r2, [r4, #0]
 800988a:	701e      	strb	r6, [r3, #0]
 800988c:	6962      	ldr	r2, [r4, #20]
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	429a      	cmp	r2, r3
 8009892:	d004      	beq.n	800989e <__swbuf_r+0x6e>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	07db      	lsls	r3, r3, #31
 8009898:	d5e1      	bpl.n	800985e <__swbuf_r+0x2e>
 800989a:	2e0a      	cmp	r6, #10
 800989c:	d1df      	bne.n	800985e <__swbuf_r+0x2e>
 800989e:	4621      	mov	r1, r4
 80098a0:	4628      	mov	r0, r5
 80098a2:	f7ff fd85 	bl	80093b0 <_fflush_r>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d0d9      	beq.n	800985e <__swbuf_r+0x2e>
 80098aa:	e7d6      	b.n	800985a <__swbuf_r+0x2a>

080098ac <__swsetup_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4b29      	ldr	r3, [pc, #164]	@ (8009954 <__swsetup_r+0xa8>)
 80098b0:	4605      	mov	r5, r0
 80098b2:	6818      	ldr	r0, [r3, #0]
 80098b4:	460c      	mov	r4, r1
 80098b6:	b118      	cbz	r0, 80098c0 <__swsetup_r+0x14>
 80098b8:	6a03      	ldr	r3, [r0, #32]
 80098ba:	b90b      	cbnz	r3, 80098c0 <__swsetup_r+0x14>
 80098bc:	f7fd ffa2 	bl	8007804 <__sinit>
 80098c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c4:	0719      	lsls	r1, r3, #28
 80098c6:	d422      	bmi.n	800990e <__swsetup_r+0x62>
 80098c8:	06da      	lsls	r2, r3, #27
 80098ca:	d407      	bmi.n	80098dc <__swsetup_r+0x30>
 80098cc:	2209      	movs	r2, #9
 80098ce:	602a      	str	r2, [r5, #0]
 80098d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	e033      	b.n	8009944 <__swsetup_r+0x98>
 80098dc:	0758      	lsls	r0, r3, #29
 80098de:	d512      	bpl.n	8009906 <__swsetup_r+0x5a>
 80098e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098e2:	b141      	cbz	r1, 80098f6 <__swsetup_r+0x4a>
 80098e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098e8:	4299      	cmp	r1, r3
 80098ea:	d002      	beq.n	80098f2 <__swsetup_r+0x46>
 80098ec:	4628      	mov	r0, r5
 80098ee:	f7fe ff0f 	bl	8008710 <_free_r>
 80098f2:	2300      	movs	r3, #0
 80098f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	2300      	movs	r3, #0
 8009900:	6063      	str	r3, [r4, #4]
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	f043 0308 	orr.w	r3, r3, #8
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	b94b      	cbnz	r3, 8009926 <__swsetup_r+0x7a>
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800991c:	d003      	beq.n	8009926 <__swsetup_r+0x7a>
 800991e:	4621      	mov	r1, r4
 8009920:	4628      	mov	r0, r5
 8009922:	f000 f882 	bl	8009a2a <__smakebuf_r>
 8009926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992a:	f013 0201 	ands.w	r2, r3, #1
 800992e:	d00a      	beq.n	8009946 <__swsetup_r+0x9a>
 8009930:	2200      	movs	r2, #0
 8009932:	60a2      	str	r2, [r4, #8]
 8009934:	6962      	ldr	r2, [r4, #20]
 8009936:	4252      	negs	r2, r2
 8009938:	61a2      	str	r2, [r4, #24]
 800993a:	6922      	ldr	r2, [r4, #16]
 800993c:	b942      	cbnz	r2, 8009950 <__swsetup_r+0xa4>
 800993e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009942:	d1c5      	bne.n	80098d0 <__swsetup_r+0x24>
 8009944:	bd38      	pop	{r3, r4, r5, pc}
 8009946:	0799      	lsls	r1, r3, #30
 8009948:	bf58      	it	pl
 800994a:	6962      	ldrpl	r2, [r4, #20]
 800994c:	60a2      	str	r2, [r4, #8]
 800994e:	e7f4      	b.n	800993a <__swsetup_r+0x8e>
 8009950:	2000      	movs	r0, #0
 8009952:	e7f7      	b.n	8009944 <__swsetup_r+0x98>
 8009954:	2000004c 	.word	0x2000004c

08009958 <_raise_r>:
 8009958:	291f      	cmp	r1, #31
 800995a:	b538      	push	{r3, r4, r5, lr}
 800995c:	4605      	mov	r5, r0
 800995e:	460c      	mov	r4, r1
 8009960:	d904      	bls.n	800996c <_raise_r+0x14>
 8009962:	2316      	movs	r3, #22
 8009964:	6003      	str	r3, [r0, #0]
 8009966:	f04f 30ff 	mov.w	r0, #4294967295
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800996e:	b112      	cbz	r2, 8009976 <_raise_r+0x1e>
 8009970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009974:	b94b      	cbnz	r3, 800998a <_raise_r+0x32>
 8009976:	4628      	mov	r0, r5
 8009978:	f000 f830 	bl	80099dc <_getpid_r>
 800997c:	4622      	mov	r2, r4
 800997e:	4601      	mov	r1, r0
 8009980:	4628      	mov	r0, r5
 8009982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009986:	f000 b817 	b.w	80099b8 <_kill_r>
 800998a:	2b01      	cmp	r3, #1
 800998c:	d00a      	beq.n	80099a4 <_raise_r+0x4c>
 800998e:	1c59      	adds	r1, r3, #1
 8009990:	d103      	bne.n	800999a <_raise_r+0x42>
 8009992:	2316      	movs	r3, #22
 8009994:	6003      	str	r3, [r0, #0]
 8009996:	2001      	movs	r0, #1
 8009998:	e7e7      	b.n	800996a <_raise_r+0x12>
 800999a:	2100      	movs	r1, #0
 800999c:	4620      	mov	r0, r4
 800999e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099a2:	4798      	blx	r3
 80099a4:	2000      	movs	r0, #0
 80099a6:	e7e0      	b.n	800996a <_raise_r+0x12>

080099a8 <raise>:
 80099a8:	4b02      	ldr	r3, [pc, #8]	@ (80099b4 <raise+0xc>)
 80099aa:	4601      	mov	r1, r0
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	f7ff bfd3 	b.w	8009958 <_raise_r>
 80099b2:	bf00      	nop
 80099b4:	2000004c 	.word	0x2000004c

080099b8 <_kill_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	2300      	movs	r3, #0
 80099bc:	4d06      	ldr	r5, [pc, #24]	@ (80099d8 <_kill_r+0x20>)
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	4611      	mov	r1, r2
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	f7fa fe22 	bl	800460e <_kill>
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	d102      	bne.n	80099d4 <_kill_r+0x1c>
 80099ce:	682b      	ldr	r3, [r5, #0]
 80099d0:	b103      	cbz	r3, 80099d4 <_kill_r+0x1c>
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	bd38      	pop	{r3, r4, r5, pc}
 80099d6:	bf00      	nop
 80099d8:	200007b8 	.word	0x200007b8

080099dc <_getpid_r>:
 80099dc:	f7fa be10 	b.w	8004600 <_getpid>

080099e0 <__swhatbuf_r>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	460c      	mov	r4, r1
 80099e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e8:	4615      	mov	r5, r2
 80099ea:	2900      	cmp	r1, #0
 80099ec:	461e      	mov	r6, r3
 80099ee:	b096      	sub	sp, #88	@ 0x58
 80099f0:	da0c      	bge.n	8009a0c <__swhatbuf_r+0x2c>
 80099f2:	89a3      	ldrh	r3, [r4, #12]
 80099f4:	2100      	movs	r1, #0
 80099f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099fa:	bf14      	ite	ne
 80099fc:	2340      	movne	r3, #64	@ 0x40
 80099fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a02:	2000      	movs	r0, #0
 8009a04:	6031      	str	r1, [r6, #0]
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	b016      	add	sp, #88	@ 0x58
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	466a      	mov	r2, sp
 8009a0e:	f000 f849 	bl	8009aa4 <_fstat_r>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	dbed      	blt.n	80099f2 <__swhatbuf_r+0x12>
 8009a16:	9901      	ldr	r1, [sp, #4]
 8009a18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a20:	4259      	negs	r1, r3
 8009a22:	4159      	adcs	r1, r3
 8009a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a28:	e7eb      	b.n	8009a02 <__swhatbuf_r+0x22>

08009a2a <__smakebuf_r>:
 8009a2a:	898b      	ldrh	r3, [r1, #12]
 8009a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a2e:	079d      	lsls	r5, r3, #30
 8009a30:	4606      	mov	r6, r0
 8009a32:	460c      	mov	r4, r1
 8009a34:	d507      	bpl.n	8009a46 <__smakebuf_r+0x1c>
 8009a36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a3a:	6023      	str	r3, [r4, #0]
 8009a3c:	6123      	str	r3, [r4, #16]
 8009a3e:	2301      	movs	r3, #1
 8009a40:	6163      	str	r3, [r4, #20]
 8009a42:	b003      	add	sp, #12
 8009a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a46:	466a      	mov	r2, sp
 8009a48:	ab01      	add	r3, sp, #4
 8009a4a:	f7ff ffc9 	bl	80099e0 <__swhatbuf_r>
 8009a4e:	9f00      	ldr	r7, [sp, #0]
 8009a50:	4605      	mov	r5, r0
 8009a52:	4639      	mov	r1, r7
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7fe fecd 	bl	80087f4 <_malloc_r>
 8009a5a:	b948      	cbnz	r0, 8009a70 <__smakebuf_r+0x46>
 8009a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a60:	059a      	lsls	r2, r3, #22
 8009a62:	d4ee      	bmi.n	8009a42 <__smakebuf_r+0x18>
 8009a64:	f023 0303 	bic.w	r3, r3, #3
 8009a68:	f043 0302 	orr.w	r3, r3, #2
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	e7e2      	b.n	8009a36 <__smakebuf_r+0xc>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	6020      	str	r0, [r4, #0]
 8009a80:	b15b      	cbz	r3, 8009a9a <__smakebuf_r+0x70>
 8009a82:	4630      	mov	r0, r6
 8009a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a88:	f000 f81e 	bl	8009ac8 <_isatty_r>
 8009a8c:	b128      	cbz	r0, 8009a9a <__smakebuf_r+0x70>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f023 0303 	bic.w	r3, r3, #3
 8009a94:	f043 0301 	orr.w	r3, r3, #1
 8009a98:	81a3      	strh	r3, [r4, #12]
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	431d      	orrs	r5, r3
 8009a9e:	81a5      	strh	r5, [r4, #12]
 8009aa0:	e7cf      	b.n	8009a42 <__smakebuf_r+0x18>
	...

08009aa4 <_fstat_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	4d06      	ldr	r5, [pc, #24]	@ (8009ac4 <_fstat_r+0x20>)
 8009aaa:	4604      	mov	r4, r0
 8009aac:	4608      	mov	r0, r1
 8009aae:	4611      	mov	r1, r2
 8009ab0:	602b      	str	r3, [r5, #0]
 8009ab2:	f7fa fe0b 	bl	80046cc <_fstat>
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	d102      	bne.n	8009ac0 <_fstat_r+0x1c>
 8009aba:	682b      	ldr	r3, [r5, #0]
 8009abc:	b103      	cbz	r3, 8009ac0 <_fstat_r+0x1c>
 8009abe:	6023      	str	r3, [r4, #0]
 8009ac0:	bd38      	pop	{r3, r4, r5, pc}
 8009ac2:	bf00      	nop
 8009ac4:	200007b8 	.word	0x200007b8

08009ac8 <_isatty_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	2300      	movs	r3, #0
 8009acc:	4d05      	ldr	r5, [pc, #20]	@ (8009ae4 <_isatty_r+0x1c>)
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	602b      	str	r3, [r5, #0]
 8009ad4:	f7fa fe09 	bl	80046ea <_isatty>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_isatty_r+0x1a>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_isatty_r+0x1a>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	200007b8 	.word	0x200007b8

08009ae8 <_init>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	bf00      	nop
 8009aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aee:	bc08      	pop	{r3}
 8009af0:	469e      	mov	lr, r3
 8009af2:	4770      	bx	lr

08009af4 <_fini>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	bf00      	nop
 8009af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afa:	bc08      	pop	{r3}
 8009afc:	469e      	mov	lr, r3
 8009afe:	4770      	bx	lr
